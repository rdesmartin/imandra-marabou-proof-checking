open Utils
open Tightening
open Bound_lemma

module ProofTree = struct
  type t = 
    (* tightening, bounds lemmas, left child, right child *)
    | Node of Tightening.t list * BoundLemma.t list * t * t
    (* tightening, bounds lemmas, contradiction vector *)
    | Leaf of Tightening.t list * BoundLemma.t list * real list

  let non_empty_tightening n = match n with
    | Node ([], _, _, _) | Leaf ([], _, _) -> false
    | _ -> true

  let get_tightening n = match n with
    | Node (tightening, _, _, _)
    | Leaf (tightening, _, _) -> tightening

    let get_bound_lemmas n = match n with
    | Node (_, bound_lemmas, _, _)
    | Leaf (_, bound_lemmas, _) -> bound_lemmas

end