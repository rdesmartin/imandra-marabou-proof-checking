open Json_decoder
open Proof_tree
open Checker

let tiny1 = "json/tinyJsonProof1.json"
let tiny1_lemma = "json/tinyJsonProof1_Lemmas.json" (* ~800 Mb *)

let tiny2 = "json/tinyJsonProof2.json"
let tiny2_lemma = "json/tinyJsonProof2_Lemmas.json" (* ~800 Mb *)

let tiny3 = "json/tinyJsonProof3.json"
let tiny3_lemma = "json/tinyJsonProof3_Lemmas.json" (* ~800 Mb *)

let tiny4 = "json/tinyJsonProof4.json"
let tiny4_lemma = "json/tinyJsonProof4_Lemmas.json" (* ~800 Mb *)

let tiny5 = "json/tinyJsonProof5.json"
let tiny5_lemma = "json/tinyJsonProof5_Lemmas.json" (* ~800 Mb *)

let small = "json/smallJsonProof.json"
let small_lemma = "json/smallJsonProof_Lemmas.json" (* ~70 Mb *)

let small2 = "json/smallJsonProof2.json"
let small2_lemma = "json/smallJsonProof2_Lemmas.json" (* ~800 Mb *)

let small3 = "json/smallJsonProof3.json"
let small3_lemma = "json/smallJsonProof3_Lemmas.json" (* ~500 Mb *)

let small4 = "json/smallJsonProof4.json"
let small4_lemma = "json/smallJsonProof4_Lemmas.json" (* ~800 Mb *)

let small5 = "json/smallJsonProof5.json"
let small5_lemma = "json/smallJsonProof5_Lemmas.json" (* ~800 Mb *)

let small6 = "json/smallJsonProof6.json"
let small6_lemma = "json/smallJsonProof6_Lemmas.json" (* ~800 Mb *)


let medium = "json/mediumJsonProof.json"
let medium2 = "json/mediumJsonProof2.json"

let large = "json/largeJsonProof.json"

let proof_res = JSON_decoder.decode_proof_file_refl tiny2 [@@reflect];;

let main () =
    match proof_res with
    | Ok (tableau, upper_bounds, lower_bounds, constraints, proof_tree) -> 
        check_root tableau upper_bounds lower_bounds constraints proof_tree
    | Error e -> false