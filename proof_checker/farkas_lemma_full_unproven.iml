lemma scale_system_not_empty s c x =
    well_formed s x &&
    s <> [] 
    ==>
    scale_system s c <> []
    [@@auto][@@fc]

(* lemma p_add_pull_neg p q x =
    good_poly_length p x && 
    good_poly_length q x &&
    eval_poly (p_add p q) x <=. 0. 
    ==> 
    (eval_poly p x) +. (eval_poly q x) <=. 0.
[@@auto][@@rw][@@fc] *)

(* lemma p_add_strictly_pos p q x = 
    good_poly_length p x &&
    good_poly_length q x &&
    eval_poly p x >. 0. &&
    eval_poly q x >=. 0. 
    ==>
    eval_poly (p_add p q) x >. 0.
    [@@auto][@@apply eval_p_add_pull p q x][@@fc] *)

lemma solution_gt_pos s p x =
    good_poly_length p x &&
    well_formed s x &&
    eval_system (Gt p :: s) x
    ==> 
    eval_poly p x >. 0. 
[@@auto][@@fc]

lemma non_negative_solution_certificate s c x =
    well_formed s x &&
    s <> [] &&
    not (has_strict_ineq s) &&
    eval_system s x
    ==>
    eval_poly (mk_certificate s c) x >=. 0.
[@@auto][@@fc]

lemma non_negative_solution_certificate' s c x = 
    not (has_strict_ineq s) &&
    s <> [] &&
    well_formed s x &&
    eval_system s x 
    ==>
    not (eval_poly (mk_certificate s c) x <. 0.)
[@@auto][@@apply non_negative_solution_certificate s c x]

lemma positive_solution_certificate_strict s c x =
    well_formed s x &&
    s <> [] &&
    has_strict_ineq s &&
    eval_system s x
    ==>
    eval_poly (mk_certificate s c) x >. 0.
    [@@auto][@@disable has_strict_ineq, well_formed]

(* main theorem *)
theorem farkas_lemma (s: system) (x: var_vect) (c: certificate) =
    well_formed s x &&
    has_strict_ineq s &&
    check_cert s c
    ==>
    eval_system s x = false
    [@@auto]
    [@@apply 
    negative_eval_certificate s c x,
    non_negative_solution_certificate' s c x
    ]