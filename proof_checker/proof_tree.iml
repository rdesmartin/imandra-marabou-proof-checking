open Utils
open Tightening
open Bound_lemma

module PT_old = Proof_tree_old.ProofTree

module ProofTree = struct
  (* information about child node: pointer to tree, bound-tightening and bound propagation info *)
  type child_info = {
    ptr: t;
    tightenings: Tightening.t list;
    bound_lemmas: BoundLemma.t list;
  } and t = 
    (*  left child, right child *)
    | Node of child_info * child_info
    (* contradiction vector *)
    | Leaf of real list

    let rec of_old_tree old_tree = 
      match old_tree with
      | PT_old.Node (tightenings, bound_lemmas, old_child_l, old_child_r) -> 
        let child_l = { 
          ptr = of_old_tree old_child_l; 
          tightenings = PT_old.get_tightening old_child_l;
          bound_lemmas = PT_old.get_bound_lemmas old_child_l;
        } in
        let child_r = { 
          ptr = of_old_tree old_child_r; 
          tightenings = PT_old.get_tightening old_child_r;
          bound_lemmas = PT_old.get_bound_lemmas old_child_r;
        } in
        Node (child_l, child_r)
      | PT_old.Leaf (tightenings, bound_lemmas, contradiction) ->
        Leaf (contradiction)
end