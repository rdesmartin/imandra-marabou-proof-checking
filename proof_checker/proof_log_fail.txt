# lemma positive_solution_certificate_strict s c x =     well_formed s x &&     s <> [] &&     has_strict_ineq s &&     eval_system s x     ==>     eval_poly (mk_certificate s c) x >. 0.     [@@auto];;
val positive_solution_certificate_strict :
  system -> real list -> var_vect -> bool = <fun>
Goal:

well_formed s x && ((s <> []) && (has_strict_ineq s && eval_system s x))
==> eval_poly (mk_certificate s c) x >. 0.

1 nontautological subgoal.

Subgoal 1:

 H0. well_formed s x
 H1. not (s = [])
 H2. has_strict_ineq s
 H3. eval_system s x
 H4. eval_poly (sum_polys (scale_system s c)) x <= 0
|---------------------------------------------------------------------------
 false


Must try induction.

The recursive terms in the conjecture suggest 4 inductions.
Subsumption and merging reduces this to 1.

We shall induct according to a scheme derived from scale_system.

Induction scheme:

 (not
  (not Is_a(Geq, List.hd s)
   && (not Is_a(Eq, List.hd s) && (not (c <> []) && s <> [])))
  && (not (Is_a(Eq, List.hd s) && (not (c <> []) && s <> []))
      && (not
          ((List.hd c >. 0)
           && (not Is_a(Geq, List.hd s)
               && (not Is_a(Eq, List.hd s) && (c <> [] && s <> []))))
          && (not
              ((List.hd c >=. 0)
               && (Is_a(Geq, List.hd s)
                   && (not Is_a(Eq, List.hd s) && (c <> [] && s <> []))))
              && (not (Is_a(Eq, List.hd s) && (c <> [] && s <> []))
                  && (not
                      (not (List.hd c >. 0)
                       && (not Is_a(Geq, List.hd s)
                           && (not Is_a(Eq, List.hd s)
                               && (c <> [] && s <> []))))
                      && (not
                          (not (List.hd c >=. 0)
                           && (Is_a(Geq, List.hd s)
                               && (not Is_a(Eq, List.hd s)
                                   && (c <> [] && s <> []))))
                          && not
                             (Is_a(Geq, List.hd s)
                              && (not Is_a(Eq, List.hd s)
                                  && (not (c <> []) && s <> [])))))))))
  ==> φ c s x)
 && ((s <> []
      && (not (c <> [])
          && (not Is_a(Eq, List.hd s)
              && (Is_a(Geq, List.hd s) && φ c (List.tl s) x)))
      ==> φ c s x)
     && ((s <> []
          && (c <> []
              && (not Is_a(Eq, List.hd s)
                  && (Is_a(Geq, List.hd s)
                      && (not (List.hd c >=. 0)
                          && φ (List.tl c) (List.tl s) x))))
          ==> φ c s x)
         && ((s <> []
              && (c <> []
                  && (not Is_a(Eq, List.hd s)
                      && (not Is_a(Geq, List.hd s)
                          && (not (List.hd c >. 0)
                              && φ (List.tl c) (List.tl s) x))))
              ==> φ c s x)
             && ((s <> []
                  && (c <> []
                      && (Is_a(Eq, List.hd s) && φ (List.tl c) (List.tl s) x))
                  ==> φ c s x)
                 && ((s <> []
                      && (c <> []
                          && (not Is_a(Eq, List.hd s)
                              && (Is_a(Geq, List.hd s)
                                  && ((List.hd c >=. 0)
                                      && φ (List.tl c) (List.tl s) x))))
                      ==> φ c s x)
                     && ((s <> []
                          && (c <> []
                              && (not Is_a(Eq, List.hd s)
                                  && (not Is_a(Geq, List.hd s)
                                      && ((List.hd c >. 0)
                                          && φ (List.tl c) (List.tl s) x))))
                          ==> φ c s x)
                         && ((s <> []
                              && (not (c <> [])
                                  && (Is_a(Eq, List.hd s)
                                      && φ c (List.tl s) x))
                              ==> φ c s x)
                             && (s <> []
                                 && (not (c <> [])
                                     && (not Is_a(Eq, List.hd s)
                                         && (not Is_a(Geq, List.hd s)
                                             && φ c (List.tl s) x)))
                                 ==> φ c s x)))))))).

9 nontautological subgoals.

Subgoal 1.9:

 H0. not
     (not Is_a(Geq, List.hd s) && not Is_a(Eq, List.hd s) && not (c <> [])
      && s <> [])
 H1. not (Is_a(Eq, List.hd s) && not (c <> []) && s <> [])
 H2. not
     (not (List.hd c <= 0) && not Is_a(Geq, List.hd s)
      && not Is_a(Eq, List.hd s) && c <> [] && s <> [])
 H3. not
     ((List.hd c >= 0) && Is_a(Geq, List.hd s) && not Is_a(Eq, List.hd s)
      && c <> [] && s <> [])
 H4. not (Is_a(Eq, List.hd s) && c <> [] && s <> [])
 H5. not
     ((List.hd c <= 0) && not Is_a(Geq, List.hd s) && not Is_a(Eq, List.hd s)
      && c <> [] && s <> [])
 H6. not
     (not (List.hd c >= 0) && Is_a(Geq, List.hd s) && not Is_a(Eq, List.hd s)
      && c <> [] && s <> [])
 H7. not
     (Is_a(Geq, List.hd s) && not Is_a(Eq, List.hd s) && not (c <> [])
      && s <> [])
 H8. eval_poly (sum_polys (scale_system s c)) x <= 0
 H9. eval_system s x
 H10. has_strict_ineq s
 H11. s <> []
 H12. well_formed s x
|---------------------------------------------------------------------------
 false

But simplification reduces this to true, using the forward-chaining rules
scale_system_not_empty and scale_system_not_empty.

Subgoal 1.8:

 H0. s <> []
 H1. not (c <> [])
 H2. not Is_a(Eq, List.hd s)
 H3. Is_a(Geq, List.hd s)
 H4. not (has_strict_ineq (List.tl s))
     || not (eval_poly (sum_polys (scale_system (List.tl s) c)) x <= 0)
     || not (eval_system (List.tl s) x) || not (well_formed (List.tl s) x)
     || (List.tl s = [])
 H5. eval_poly (sum_polys (scale_system s c)) x <= 0
 H6. eval_system s x
 H7. has_strict_ineq s
 H8. s <> []
 H9. well_formed s x
|---------------------------------------------------------------------------
 false

This simplifies, using the definitions of eval_poly, eval_system,
has_strict_ineq, scale_system, sum_polys and well_formed to the following 3
subgoals:

Subgoal 1.8.3:

 H0. s <> []
 H1. has_strict_ineq (List.tl s)
 H2. List.tl s = []
 H3. eval_poly (sum_polys (scale_system (List.tl s) c)) x <= 0
 H4. eval_system (List.tl s) x
 H5. well_formed (List.tl s) x
 H6. Is_a(Geq, List.hd s)
 H7. good_poly_length (Destruct(Geq, 0, List.hd s)).1 x
 H8. eval_poly
     (p_add (Destruct(Geq, 0, List.hd s)).1
      (sum_polys (scale_system (List.tl s) c)))
     x <= 0
 H9. eval_poly (Destruct(Geq, 0, List.hd s)).1 x >= 0
|---------------------------------------------------------------------------
 C0. Is_a([], scale_system (List.tl s) c)
 C1. c <> []

But simplification reduces this to true, using the definitions of eval_poly,
eval_system, has_strict_ineq, p_add, scale_system, sum_polys and well_formed.

Subgoal 1.8.2:

 H0. s <> []
 H1. has_strict_ineq (List.tl s)
 H2. eval_system (List.tl s) x
 H3. well_formed (List.tl s) x
 H4. Is_a(Geq, List.hd s)
 H5. good_poly_length (Destruct(Geq, 0, List.hd s)).1 x
 H6. eval_poly
     (p_add (Destruct(Geq, 0, List.hd s)).1
      (sum_polys (scale_system (List.tl s) c)))
     x <= 0
 H7. eval_poly (Destruct(Geq, 0, List.hd s)).1 x >= 0
|---------------------------------------------------------------------------
 C0. Is_a([], scale_system (List.tl s) c)
 C1. eval_poly (sum_polys (scale_system (List.tl s) c)) x <= 0
 C2. c <> []


We can eliminate destructors by the following substitution:
 s -> s1 :: s2

This produces the modified subgoal:

Subgoal 1.8.2':

 H0. has_strict_ineq s2
 H1. well_formed s2 x
 H2. eval_system s2 x
 H3. eval_poly (Destruct(Geq, 0, s1)).1 x >= 0
 H4. eval_poly
     (p_add (Destruct(Geq, 0, s1)).1 (sum_polys (scale_system s2 c))) x <= 0
 H5. good_poly_length (Destruct(Geq, 0, s1)).1 x
 H6. Is_a(Geq, s1)
|---------------------------------------------------------------------------
 C0. c <> []
 C1. Is_a([], scale_system s2 c)
 C2. eval_poly (sum_polys (scale_system s2 c)) x <= 0


We can eliminate destructors by the following substitution:
 s1 -> Geq s11

This produces the modified subgoal:

Subgoal 1.8.2'':

 H0. has_strict_ineq s2
 H1. well_formed s2 x
 H2. eval_system s2 x
 H3. good_poly_length s11.1 x
 H4. eval_poly (p_add s11.1 (sum_polys (scale_system s2 c))) x <= 0
 H5. eval_poly s11.1 x >= 0
|---------------------------------------------------------------------------
 C0. c <> []
 C1. Is_a([], scale_system s2 c)
 C2. eval_poly (sum_polys (scale_system s2 c)) x <= 0


Candidates for generalization:

 scale_system s2 c

This produces the modified subgoal:

Subgoal 1.8.2''':

 H0. has_strict_ineq s2
 H1. well_formed s2 x
 H2. eval_system s2 x
 H3. good_poly_length s11.1 x
 H4. eval_poly (p_add s11.1 (sum_polys gen_1)) x <= 0
 H5. eval_poly s11.1 x >= 0
|---------------------------------------------------------------------------
 C0. c <> []
 C1. Is_a([], gen_1)
 C2. eval_poly (sum_polys gen_1) x <= 0


Candidates for generalization:

 sum_polys gen_1

This produces the modified subgoal:

Subgoal 1.8.2'''':

 H0. has_strict_ineq s2
 H1. well_formed s2 x
 H2. eval_system s2 x
 H3. good_poly_length s11.1 x
 H4. eval_poly (p_add s11.1 gen_2) x <= 0
 H5. eval_poly s11.1 x >= 0
|---------------------------------------------------------------------------
 C0. c <> []
 C1. Is_a([], gen_1)
 C2. eval_poly gen_2 x <= 0


Must try induction.

The recursive terms in the conjecture suggest 4 inductions.
Subsumption and merging reduces this to 2.

However, scheme scoring gives us a clear winner.
We shall induct according to a scheme derived from well_formed.

Induction scheme:

 (not (Is_a(Geq, List.hd s2) && (not Is_a(Eq, List.hd s2) && s2 <> []))
  && (not
      (not Is_a(Geq, List.hd s2) && (not Is_a(Eq, List.hd s2) && s2 <> []))
      && not (Is_a(Eq, List.hd s2) && s2 <> []))
  ==> φ c gen_1 gen_2 s11 s2 x)
 && ((s2 <> []
      && (Is_a(Eq, List.hd s2) && φ c gen_1 gen_2 s11 (List.tl s2) x)
      ==> φ c gen_1 gen_2 s11 s2 x)
     && ((s2 <> []
          && (not Is_a(Eq, List.hd s2)
              && (not Is_a(Geq, List.hd s2)
                  && φ c gen_1 gen_2 s11 (List.tl s2) x))
          ==> φ c gen_1 gen_2 s11 s2 x)
         && (s2 <> []
             && (not Is_a(Eq, List.hd s2)
                 && (Is_a(Geq, List.hd s2)
                     && φ c gen_1 gen_2 s11 (List.tl s2) x))
             ==> φ c gen_1 gen_2 s11 s2 x))).

4 nontautological subgoals.

Subgoal 1.8.2''''.4:

 H0. good_poly_length s11.1 x
 H1. eval_poly (p_add s11.1 gen_2) x <= 0
 H2. eval_system s2 x
 H3. has_strict_ineq s2
 H4. not (Is_a(Geq, List.hd s2) && not Is_a(Eq, List.hd s2) && s2 <> [])
 H5. not (not Is_a(Geq, List.hd s2) && not Is_a(Eq, List.hd s2) && s2 <> [])
 H6. not (Is_a(Eq, List.hd s2) && s2 <> [])
 H7. well_formed s2 x
 H8. eval_poly s11.1 x >= 0
|---------------------------------------------------------------------------
 C0. eval_poly gen_2 x <= 0
 C1. c <> []
 C2. Is_a([], gen_1)

But simplification reduces this to true, using the definitions of
has_strict_ineq and well_formed.

Subgoal 1.8.2''''.3:

 H0. good_poly_length s11.1 x
 H1. eval_poly (p_add s11.1 gen_2) x <= 0
 H2. eval_system s2 x
 H3. has_strict_ineq s2
 H4. s2 <> []
 H5. Is_a(Eq, List.hd s2)
 H6. not (good_poly_length s11.1 x) || not (eval_system (List.tl s2) x)
     || (eval_poly gen_2 x <= 0) || not (has_strict_ineq (List.tl s2))
     || not (eval_poly (p_add s11.1 gen_2) x <= 0)
     || not (well_formed (List.tl s2) x) || c <> []
     || not (eval_poly s11.1 x >= 0) || Is_a([], gen_1)
 H7. well_formed s2 x
 H8. eval_poly s11.1 x >= 0
|---------------------------------------------------------------------------
 C0. eval_poly gen_2 x <= 0
 C1. c <> []
 C2. Is_a([], gen_1)

But simplification reduces this to true, using the definitions of
eval_system, has_strict_ineq and well_formed.

Subgoal 1.8.2''''.2:

 H0. good_poly_length s11.1 x
 H1. eval_poly (p_add s11.1 gen_2) x <= 0
 H2. eval_system s2 x
 H3. s2 <> []
 H4. not Is_a(Eq, List.hd s2)
 H5. not Is_a(Geq, List.hd s2)
 H6. not (good_poly_length s11.1 x) || not (eval_system (List.tl s2) x)
     || (eval_poly gen_2 x <= 0) || not (has_strict_ineq (List.tl s2))
     || not (eval_poly (p_add s11.1 gen_2) x <= 0)
     || not (well_formed (List.tl s2) x) || c <> []
     || not (eval_poly s11.1 x >= 0) || Is_a([], gen_1)
 H7. has_strict_ineq s2
 H8. well_formed s2 x
 H9. eval_poly s11.1 x >= 0
|---------------------------------------------------------------------------
 C0. eval_poly gen_2 x <= 0
 C1. c <> []
 C2. Is_a([], gen_1)

This simplifies, using the definitions of eval_system, has_strict_ineq and
well_formed to:

Subgoal 1.8.2''''.2':

 H0. good_poly_length s11.1 x
 H1. eval_system (List.tl s2) x
 H2. s2 <> []
 H3. eval_poly (p_add s11.1 gen_2) x <= 0
 H4. good_poly_length (Destruct(Gt, 0, List.hd s2)) x
 H5. well_formed (List.tl s2) x
 H6. eval_poly s11.1 x >= 0
|---------------------------------------------------------------------------
 C0. Is_a(Eq, List.hd s2)
 C1. has_strict_ineq (List.tl s2)
 C2. eval_poly gen_2 x <= 0
 C3. eval_poly (Destruct(Gt, 0, List.hd s2)) x <= 0
 C4. Is_a(Geq, List.hd s2)
 C5. c <> []
 C6. Is_a([], gen_1)


We can eliminate destructors by the following substitution:
 s2 -> s21 :: s22

This produces the modified subgoal:

Subgoal 1.8.2''''.2'':

 H0. good_poly_length s11.1 x
 H1. good_poly_length (Destruct(Gt, 0, s21)) x
 H2. eval_poly (p_add s11.1 gen_2) x <= 0
 H3. well_formed s22 x
 H4. eval_poly s11.1 x >= 0
 H5. eval_system s22 x
|---------------------------------------------------------------------------
 C0. Is_a(Geq, s21)
 C1. eval_poly gen_2 x <= 0
 C2. c <> []
 C3. eval_poly (Destruct(Gt, 0, s21)) x <= 0
 C4. has_strict_ineq s22
 C5. Is_a([], gen_1)
 C6. Is_a(Eq, s21)


We can eliminate destructors by the following substitution:
 s21 -> Gt s211

This produces the modified subgoal:

Subgoal 1.8.2''''.2''':

 H0. good_poly_length s11.1 x
 H1. eval_poly (p_add s11.1 gen_2) x <= 0
 H2. well_formed s22 x
 H3. good_poly_length s211 x
 H4. eval_poly s11.1 x >= 0
 H5. eval_system s22 x
|---------------------------------------------------------------------------
 C0. eval_poly gen_2 x <= 0
 C1. eval_poly s211 x <= 0
 C2. c <> []
 C3. has_strict_ineq s22
 C4. Is_a([], gen_1)


Must try induction.

The recursive terms in the conjecture suggest 6 inductions.
Subsumption and merging reduces this to 2.

However, scheme scoring gives us a clear winner.
We shall induct according to a scheme derived from good_poly_length.

Induction scheme:

 (not (x <> [] && (gen_2 <> [] && s211 <> []))
  ==> φ c gen_1 gen_2 s11 s211 s22 x)
 && (s211 <> []
     && (gen_2 <> []
         && (x <> []
             && φ c gen_1 (List.tl gen_2) s11 (List.tl s211) s22 (List.tl x)))
     ==> φ c gen_1 gen_2 s11 s211 s22 x).

2 nontautological subgoals.

Subgoal 1.8.2''''.2'''.2:

 H0. good_poly_length s211 x
 H1. eval_poly (p_add s11.1 gen_2) x <= 0
 H2. eval_system s22 x
 H3. well_formed s22 x
 H4. good_poly_length s11.1 x
 H5. eval_poly s11.1 x >= 0
|---------------------------------------------------------------------------
 C0. Is_a([], gen_1)
 C1. c <> []
 C2. eval_poly gen_2 x <= 0
 C3. eval_poly s211 x <= 0
 C4. has_strict_ineq s22
 C5. x <> [] && gen_2 <> [] && s211 <> []

This simplifies, using the definitions of eval_poly and good_poly_length, and
the rewrite rule eval_p_add_pull to:

Subgoal 1.8.2''''.2'''.2':

 H0. gen_2 <> []
 H1. Is_a([], List.tl s211)
 H2. s11.1 <> []
 H3. List.hd s11.1 +. List.hd gen_2 <= 0
 H4. eval_system s22 x
 H5. Is_a([], List.tl gen_2)
 H6. well_formed s22 x
 H7. Is_a([], List.tl s11.1)
 H8. good_poly_length s11.1 x
 H9. eval_poly s11.1 x >= 0
 H10. s211 <> []
|---------------------------------------------------------------------------
 C0. List.hd gen_2 <= 0
 C1. Is_a([], gen_1)
 C2. c <> []
 C3. has_strict_ineq s22
 C4. x <> []
 C5. List.hd s211 <= 0

But simplification reduces this to true, using the definition of eval_poly.

Subgoal 1.8.2''''.2'''.1:

 H0. good_poly_length s211 x
 H1. eval_poly (p_add s11.1 gen_2) x <= 0
 H2. eval_system s22 x
 H3. well_formed s22 x
 H4. good_poly_length s11.1 x
 H5. eval_poly s11.1 x >= 0
 H6. s211 <> []
 H7. gen_2 <> []
 H8. x <> []
 H9. not (eval_poly (p_add s11.1 (List.tl gen_2)) (List.tl x) <= 0)
     || not (eval_system s22 (List.tl x)) || Is_a([], gen_1) || c <> []
     || not (well_formed s22 (List.tl x)) || has_strict_ineq s22
     || not (eval_poly s11.1 (List.tl x) >= 0)
     || (eval_poly (List.tl s211) (List.tl x) <= 0)
     || not (good_poly_length s11.1 (List.tl x))
     || not (good_poly_length (List.tl s211) (List.tl x))
     || (eval_poly (List.tl gen_2) (List.tl x) <= 0)
|---------------------------------------------------------------------------
 C0. Is_a([], gen_1)
 C1. c <> []
 C2. eval_poly gen_2 x <= 0
 C3. eval_poly s211 x <= 0
 C4. has_strict_ineq s22

This simplifies, using the definitions of eval_poly and good_poly_length to
the following 7 subgoals:

Subgoal 1.8.2''''.2'''.1.7:

 H0. eval_poly (p_add s11.1 (List.tl gen_2)) (List.tl x) <= 0
 H1. gen_2 <> []
 H2. eval_system s22 (List.tl x)
 H3. eval_poly (p_add s11.1 gen_2) x <= 0
 H4. x <> []
 H5. well_formed s22 (List.tl x)
 H6. eval_poly s11.1 (List.tl x) >= 0
 H7. good_poly_length s11.1 (List.tl x)
 H8. good_poly_length (List.tl s211) (List.tl x)
 H9. eval_system s22 x
 H10. well_formed s22 x
 H11. good_poly_length s11.1 x
 H12. eval_poly s11.1 x >= 0
 H13. s211 <> []
 H14. eval_poly (List.tl gen_2) (List.tl x) <= 0
|---------------------------------------------------------------------------
 C0. List.hd s211 * List.hd x +. eval_poly (List.tl s211) (List.tl x) <= 0
 C1. Is_a([], gen_1)
 C2. c <> []
 C3. List.hd gen_2 * List.hd x +. eval_poly (List.tl gen_2) (List.tl x) <= 0
 C4. has_strict_ineq s22
 C5. eval_poly (List.tl s211) (List.tl x) <= 0


We can eliminate destructors by the following
substitution:
 s211 -> s2111 :: s2112
 x -> x1 :: x2
 gen_2 -> gen_21 :: gen_22

This produces the modified subgoal:

Subgoal 1.8.2''''.2'''.1.7':

 H0. good_poly_length s11.1 x2
 H1. eval_system s22 (x1 :: x2)
 H2. eval_poly gen_22 x2 <= 0
 H3. eval_poly s11.1 (x1 :: x2) >= 0
 H4. good_poly_length s11.1 (x1 :: x2)
 H5. eval_system s22 x2
 H6. well_formed s22 (x1 :: x2)
 H7. eval_poly (p_add s11.1 (gen_21 :: gen_22)) (x1 :: x2) <= 0
 H8. eval_poly s11.1 x2 >= 0
 H9. good_poly_length s2112 x2
 H10. well_formed s22 x2
 H11. eval_poly (p_add s11.1 gen_22) x2 <= 0
|---------------------------------------------------------------------------
 C0. Is_a([], gen_1)
 C1. c <> []
 C2. has_strict_ineq s22
 C3. s2111 * x1 +. eval_poly s2112 x2 <= 0
 C4. eval_poly s2112 x2 <= 0
 C5. gen_21 * x1 +. eval_poly gen_22 x2 <= 0


Candidates for generalization:

 eval_poly gen_22 x2
 eval_poly s2112 x2

This produces the modified subgoal:

Subgoal 1.8.2''''.2'''.1.7'':

 H0. good_poly_length s11.1 x2
 H1. eval_system s22 (x1 :: x2)
 H2. gen_1 <= 0
 H3. eval_poly s11.1 (x1 :: x2) >= 0
 H4. good_poly_length s11.1 (x1 :: x2)
 H5. eval_system s22 x2
 H6. well_formed s22 (x1 :: x2)
 H7. eval_poly (p_add s11.1 (gen_21 :: gen_22)) (x1 :: x2) <= 0
 H8. eval_poly s11.1 x2 >= 0
 H9. good_poly_length s2112 x2
 H10. well_formed s22 x2
 H11. eval_poly (p_add s11.1 gen_22) x2 <= 0
|---------------------------------------------------------------------------
 C0. Is_a([], gen_1)
 C1. c <> []
 C2. has_strict_ineq s22
 C3. s2111 * x1 +. gen_2 <= 0
 C4. gen_2 <= 0
 C5. gen_21 * x1 +. gen_1 <= 0


Must try induction.

 ⚠  Aborting proof attempt for positive_solution_certificate_strict.

 ⓘ  Rules:
    (:def eval_poly)
    (:def eval_system)
    (:def good_poly_length)
    (:def has_strict_ineq)
    (:def p_add)
    (:def scale_system)
    (:def sum_polys)
    (:def well_formed)
    (:rw eval_p_add_pull)
    (:fc add_negative)
    (:fc eval_p_add_pull)
    (:fc scale_system_not_empty)
    (:induct good_poly_length)
    (:induct scale_system)
    (:induct well_formed)

Checkpoints:

 H0. good_poly_length s11.1 x2
 H1. eval_system s22 (x1 :: x2)
 H2. gen_1 <= 0
 H3. eval_poly s11.1 (x1 :: x2) >= 0
 H4. good_poly_length s11.1 (x1 :: x2)
 H5. eval_system s22 x2
 H6. well_formed s22 (x1 :: x2)
 H7. eval_poly (p_add s11.1 (gen_21 :: gen_22)) (x1 :: x2) <= 0
 H8. eval_poly s11.1 x2 >= 0
 H9. good_poly_length s2112 x2
 H10. well_formed s22 x2
 H11. eval_poly (p_add s11.1 gen_22) x2 <= 0
|---------------------------------------------------------------------------
 C0. Is_a([], gen_1)
 C1. c <> []
 C2. has_strict_ineq s22
 C3. s2111 * x1 +. gen_2 <= 0
 C4. gen_2 <= 0
 C5. gen_21 * x1 +. gen_1 <= 0

 H0. good_poly_length s11.1 x
 H1. eval_poly (p_add s11.1 gen_2) x <= 0
 H2. well_formed s22 x
 H3. good_poly_length s211 x
 H4. eval_poly s11.1 x >= 0
 H5. eval_system s22 x
|---------------------------------------------------------------------------
 C0. eval_poly gen_2 x <= 0
 C1. eval_poly s211 x <= 0
 C2. c <> []
 C3. has_strict_ineq s22
 C4. Is_a([], gen_1)

 H0. has_strict_ineq s2
 H1. well_formed s2 x
 H2. eval_system s2 x
 H3. good_poly_length s11.1 x
 H4. eval_poly (p_add s11.1 gen_2) x <= 0
 H5. eval_poly s11.1 x >= 0
|---------------------------------------------------------------------------
 C0. c <> []
 C1. Is_a([], gen_1)
 C2. eval_poly gen_2 x <= 0

Error:
  Maximum induction depth reached (3). You can set this with #max_induct.
  At <none>:1
  
# 

