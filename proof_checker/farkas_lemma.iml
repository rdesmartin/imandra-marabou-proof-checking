type poly = Real.t list

type var_vect = Real.t list

type exp = 
  | Eq of poly
  | Geq of poly
  | Gt of poly


let extract_poly (e: exp): real list =
    match e with
    | Geq p -> p
    | Eq p -> p
    | Gt p -> p
  

type certificate = Real.t list

type system = exp list

let rec eval_poly (p: poly) (x: var_vect): Real.t =
    match p, x with
    | [p], []          -> p
    | p :: ps, x :: xs -> p *. x +. eval_poly ps xs
    | _, _             -> 0.

let eval_exp (e: exp) (x: var_vect): bool =
    match e with
    | Eq p  -> eval_poly p x = 0.
    | Geq p -> eval_poly p x >=. 0.
    | Gt p -> eval_poly p x >. 0.

let rec eval_system (s: system) (x: var_vect): bool = 
    match s with 
    | []      -> true
    | e :: es -> eval_exp e x && eval_system es x

let rec is_neg_constant (p: poly): bool = 
    match p with
    | [c] -> (c <. 0.)
    | p :: ps -> p = 0. && is_neg_constant ps
    | [] -> false

let rec is_nonpos_constant (p: poly): bool =
    match p with
    | [c] -> c <=. 0.
    | p :: ps -> p = 0. && is_nonpos_constant ps
    | [] -> false

let rec p_add (p: poly) (q: poly): poly =
    match p, q with 
    | [], [] -> []
    | p :: ps, q :: qs -> p +. q :: p_add ps qs
    | _ -> []

let rec p_scale (p: poly) (c: Real.t) : poly =
    match p with
    | [] -> []
    | p :: ps -> p *. c :: p_scale ps c

let rec sum_polys (ps: poly list): poly = 
    match ps with
    | [] -> []
    | [p] -> p
    | p :: ps -> p_add p (sum_polys ps)

let rec scale_system (es: system) (cs: Real.t list) : poly list =
    match es, cs with
    | Eq e :: es , c :: cs -> p_scale e c :: scale_system es cs
    | Geq e :: es , c :: cs ->
        if (c >=. 0.) then (
            p_scale e c :: scale_system es cs
        ) else (
            e :: scale_system es cs
        )
    | Gt e :: es , c :: cs ->
        if (c >. 0.) then (
            p_scale e c :: scale_system es cs
        ) else (
            e :: scale_system es cs
        )
    | Eq e :: es, [] -> e :: scale_system es cs
    | Geq e :: es, [] -> e :: scale_system es cs 
    | Gt e :: es, [] -> e :: scale_system es cs  
    | _ -> []


let mk_certificate (s: system) (cs: Real.t list): certificate =
    sum_polys (scale_system s cs)

let rec has_strict_ineq s = match s with
    | [] -> false
    | Gt _ :: _ -> true
    | Eq _ :: s | Geq _ :: s -> has_strict_ineq s

let check_cert (s: system) (cs: certificate): bool =
    if has_strict_ineq s then (
        is_nonpos_constant (mk_certificate s cs)
    ) else (
        is_neg_constant (mk_certificate s cs)
    )

    let rec good_poly_length (p: poly) (x: var_vect): bool =
    match p, x with
    | [_], [] -> true
    | _ :: ps, _ :: xs -> good_poly_length ps xs
    | _ -> false

let rec well_formed (s: system) (x: var_vect): bool =
    match s with
    | [] -> false
    | [Eq e] | [Geq e] | [Gt e] -> good_poly_length e x
    | Eq e :: es -> good_poly_length e x && well_formed es x 
    | Geq e :: es -> good_poly_length e x && well_formed es x
    | Gt e :: es -> good_poly_length e x && well_formed es x

