open Utils
open Tightening

(* check that some split corresponds to a single variable split *)
let check_single_var_split l_t r_t =
    match l_t, r_t with
    | [(var1, value1, bound_type1)], [(var2, value2, bound_type2)] -> var1 = var2 && value1 = value2 && bound_type1 <> bound_type2
    | _ -> false


(** Match a given split with a constraint from a list of known ReLU constraints*)
let rec match_relu_constraint r_tightening l_tightening constraints =
    match constraints with
    | [] -> []
    | (RELU, l)::tl-> (
        match r_tightening, l_tightening with
        | [(var1, _, _); (var2, _, _)], [(var3, _, _); (var4, _, _)] ->
            if
                List.exists (fun x -> x = var1) l &&
                List.exists (fun x -> x = var2) l &&
                List.exists (fun x -> x = var3) l &&
                List.exists (fun x -> x = var4) l
            then
                l
            else
                match_relu_constraint r_tightening l_tightening tl
        | _ -> match_relu_constraint r_tightening l_tightening tl
    )
    | (_::tl) -> match_relu_constraint r_tightening l_tightening tl

(* find a constraint given two participating variables *)
let rec match_constraint (var1: int) (var2: int) constraints =
    match constraints with
    | [] -> (UNDEFINED, [])
    | (c, l)::tl->
            if List.exists (fun x -> x = var1) l && List.exists (fun x -> x = var2) l
            then (c, l)
            else match_constraint var1 var2 tl

(* check that the split corresponds to the active phase of a ReLU constraint *)
let is_active split b aux = match split with
    | [(var1, 0., UPPER); (var2, 0., LOWER)] -> var1 = aux && var2 = b
    | [(var1, 0., LOWER); (var2, 0., UPPER)] -> var1 = b && var2 = aux
    | _ -> false

(* check that the split corresponds to the inactive phase of a ReLU constraint *)
let is_inactive split f b = match split with
    | [(var1, 0., UPPER); (var2, 0., UPPER)] -> (var1 = f && var2 = b) || (var1 = b && var2 = f)
    | _ -> false

(* Check whether a proof tree node's split correspond to a known ReLU constraint *)
let check_relu_split (l_tightening : Tightening.t list) (r_tightening : Tightening.t list) constraints =
    let matched_constraint = match_relu_constraint l_tightening r_tightening constraints in
    match matched_constraint with
        | [b; f; aux; _] -> (is_active l_tightening b aux && is_inactive r_tightening f b) || (is_active r_tightening b aux && is_inactive l_tightening f b)
        | _ -> false