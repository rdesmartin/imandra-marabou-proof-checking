open Utils 

(* Dynamic bound tightenings *)
module Tightening = struct
    (* index of value to tighten, new value, bound type (UPPER or LOWER) *)
    type t = (int * real * bound_type)
    let compare (var1, _, _) (var2, _, _) = var1 <= var2

    let is_upper = function
        | (_, _, UPPER) -> true
        | _ -> false

    let is_lower = function
        | (_, _, LOWER) -> true
        | _ -> false

    (* update a single bound according to a list of tightenings *)
    let rec update_bounds_by_tightenings tightenings bounds =
    match tightenings with
        | [] -> bounds
        | (var, value, _)::tl -> let updated_bounds = set_nth bounds var value in(* find more elegant/efficient way to update *)
            update_bounds_by_tightenings tl updated_bounds

    (* update the bounds according to a list of tightenings *)
    let update_bounds tightenings upper_bounds lower_bounds =
        let upper_tightenings = List.filter is_upper tightenings in
        let lower_tightenings = List.filter (fun a -> not (is_upper a)) tightenings in
        let updated_upper = update_bounds_by_tightenings upper_tightenings upper_bounds in
        let updated_lower = update_bounds_by_tightenings lower_tightenings lower_bounds in
        (updated_upper, updated_lower)
    end