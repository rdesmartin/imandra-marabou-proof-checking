(* A proof of `case_1_bounded_at_i `. *)

[@@@import "relu.iml"]
[@@@import "struct_index.iml"]

open Relu
open Struct_index

let rec zip3 l1 l2 l3 = 
    match l1, l2, l3 with
    | [], _, _ | _, [], _ | _, _, [] -> []
    | h1::t1, h2::t2, h3::t3 -> (h1, h2, h3) :: zip3 t1 t2 t3

lemma zip3_length l1 l2 l3 = 
    List.length l1 = List.length l2
    && List.length l1 = List.length l3
    ==>
    List.length (zip3 l1 l2 l3) = List.length l1
    [@@by induct ~on_fun:[%id zip3] ()
    @> auto]
    [@@rw]

let rec bounded xs ls us = 
    match xs, ls, us with
    | [], [], [] -> true
    | x::xs, l::ls, u::us -> l <=. x && x <=. u && bounded xs ls us
    | _, _, _ -> true

lemma aux_1 a b = (a <=. b) <==> (b >=. a)

lemma aux_2 a b = (a <. b) ==> (a <=. b)
[@@by auto]

lemma aux_3 a b = (a = b) || (a <> b)
[@@by auto]

(* set list element at given index to x *)
let rec set_nth (l: 'a list) (n: int) (x: 'a): 'a list =    
    if n < 0 then l
    else
    match l with
    | [] -> []
    | hd::tl ->
    if n = 0 then (
        x :: tl
    ) else (
        hd :: set_nth tl (n-1) x
    )

lemma bounded_nth xs ls us n = 
    bounded xs ls us 
    ==>
    match (List.nth n xs), (List.nth n ls), (List.nth n us) with
    | Some x, Some l, Some u -> l <=. x && x <=. u
    (* | Some x, Some l, _ -> l <=. x
    | Some x, _, Some u -> x <=. u *)
    | _, _, _ -> true
    [@@by auto]
    [@@fc]

lemma bounded_nth' xs ls us n x_n l_n u_n =
    List.nth n xs = Some x_n
    && List.nth n ls = Some l_n
    && List.nth n us = Some u_n
    && bounded xs ls us 
    ==>
    l_n <=. x_n && x_n <=. u_n
    [@@by auto]

let bounded_elem (x, l, u) =
    l <=. x && x <=. u

let bounded_at_i = holds_at_i bounded_elem

let bounded_below = holds_below bounded_elem

let bounded_all = holds_all bounded_elem

lemma holds_at_i_out_of_bounds p x i =
    i < 0 || i >= List.length x
    ==>
    holds_at_i p i x
[@@by auto]
[@@fc]

lemma bounded_at_i_out_of_bounds x i =
    i < 0 || i >= List.length x
    ==>
    bounded_at_i i x
[@@by [%use holds_at_i_out_of_bounds bounded_elem x i]
    @> auto]
[@@fc]
[@@timeout 5]

lemma bounded_all_eq_bounded xs ls us = 
    bounded xs ls us = bounded_all (zip3 xs ls us)
[@@by auto]

lemma bounded_all_eq_bounded_below xs ls us =
    bounded_all (zip3 xs ls us) 
    = bounded_below (List.length (zip3 xs ls us) - 1) (zip3 xs ls us) 
[@@by [%use main bounded_elem (zip3 xs ls us) (List.length (zip3 xs ls us))]
@> auto]

lemma bounded_below_eq_bounded xs ls us =
    let i = List.length (zip3 xs ls us) - 1 in
    bounded_below i (zip3 xs ls us) = bounded xs ls us
[@@by [%use bounded_all_eq_bounded xs ls us]
    @> [%use bounded_all_eq_bounded_below xs ls us]
    @> auto]

lemma get_set_nth l n a =
    0 <= n && n < List.length l
    ==>
    List.nth n (set_nth l n a) = Some a
[@@by auto] [@@rw]

lemma set_nth_unchanged l n m a =
    n <> m
    ==>
    List.nth m (set_nth l n a) = List.nth m l
[@@by auto] [@@rw]

lemma set_nth_length_preservation l n x = 
    List.length (set_nth l n x) = List.length l
[@@by auto] [@@rw]

lemma relu_split xs b_var f_var a_var =
    eval_relu b_var f_var a_var xs
    ==> 
    match List.nth b_var xs, List.nth f_var xs, List.nth a_var xs with
    | Some b, Some f, Some a -> (b >=. 0. && 0. >=. a && a >=. 0.) 
        || (b <. 0. && 0. >=. f && f >=. 0.)
    | _, _, _ -> true 
    [@@by auto]
    [@@fc]

lemma eval_relu_different_indices b f aux (xs: real list) =
    eval_relu b f aux xs ==> (b <> f) && (b <> aux) && (f <> aux)
[@@fc]

lemma set_nth_unchanged_2vars (ls: real list) (i: int) (j: int) (k: int) (a: real) (b: real) =
    let ls' = set_nth (set_nth ls i a) j b in
    k <> i && k <> j
    ==>
    List.nth k ls' = List.nth k ls
[@@by auto]
[@@rw]

lemma get_set_nth_2vars (ls: real list) (i: int) (j: int) (a: real) (b: real) =
    let ls' = set_nth (set_nth ls i a) j b in
    0 <= i && i < List.length ls
    && i <> j
    ==>
    List.nth i ls' = Some a
[@@by auto]
[@@rw]

lemma valid_list_index l i x = 
    List.nth i l = Some x
    ==>
    0 <= i && i < List.length l
    [@@by auto]
    [@@fc]

lemma case_1 xs ls us b_var f_var a_var x_b x_f x_a l_i u_i l_i' u_i' i x_i =
    let ls' = set_nth ls f_var 0. in
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    List.nth b_var xs = Some x_b
    && List.nth f_var xs = Some x_f
    && List.nth a_var xs = Some x_a
    && List.nth i ls = Some l_i
    && List.nth i us = Some u_i
    && List.nth i ls' = Some l_i'
    && List.nth i us' = Some u_i'
    && List.nth i xs = Some x_i
    && (b_var <> f_var) && (b_var <> a_var) && (f_var <> a_var)
    && relu x_b = x_f && x_a = x_f -. x_b
    && bounded xs ls us
    && x_b <=. 0. && x_f = 0.
    ==>
    bounded_elem (x_i, l_i', u_i')
[@@by 
    [%use set_nth_length_preservation (set_nth us b_var 0.) f_var 0.]
    @> [%use set_nth_unchanged ls f_var i 0.]
    @> [%use set_nth_unchanged_2vars us b_var f_var i 0. 0.]
    @> auto]
[@@disable set_nth]
[@@fc]

(* A helper to grab values we will know exist (so the 0 case does not matter!) 
   This is so we can use the `real` terms in the lemma invocations, not their
   `real option` versions which we know will be of the form `Some _`.
 *)

let g i l = match List.nth i l with Some v -> v | None -> 0.0

(* Now, let's `internalize` those x_b, x_f, etc., variables using pattern matching *)

lemma case_1_bridge_1 xs ls us b_var f_var a_var i =
    let ls' = set_nth ls f_var 0. in
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    match List.nth b_var xs, List.nth f_var xs, List.nth a_var xs, 
          List.nth i ls, List.nth i us, List.nth i ls', List.nth i us', List.nth i xs
    with Some x_b, Some x_f, Some x_a, Some l_i, Some u_i, Some l_i', Some u_i', Some x_i ->
      (b_var <> f_var) && (b_var <> a_var) && (f_var <> a_var)
       && relu x_b = x_f && x_a = x_f -. x_b
       && bounded xs ls us
       && x_b <=. 0. && x_f = 0.
       ==>
       bounded_elem (x_i, l_i', u_i')
    | _ -> true
[@@by [%use case_1 xs ls us b_var f_var a_var 
                   (g b_var xs) (g f_var xs) (g a_var xs)
                   (g i ls) (g i us) (g i (set_nth ls f_var 0.)) (g i (set_nth (set_nth us b_var 0.) f_var 0.)) i (g i xs)]
    @> auto]

lemma case_1_bridge_2 xs ls us b_var f_var a_var i =
    let ls' = set_nth ls f_var 0. in
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    match List.nth b_var xs, List.nth f_var xs, List.nth a_var xs, 
          List.nth i ls, List.nth i us, List.nth i ls', List.nth i us', List.nth i xs
    with Some x_b, Some x_f, Some x_a, Some l_i, Some u_i, Some l_i', Some u_i', Some x_i ->
      (b_var <> f_var) && (b_var <> a_var) && (f_var <> a_var)
       && relu x_b = x_f && x_a = x_f -. x_b
       && bounded xs ls us
       && inactive_relu b_var f_var a_var xs
       ==>
      (* l_i' <=. x_i && x_i <=. u_i' *)
       bounded_elem (x_i, l_i', u_i')
    | _ -> true
[@@by [%use case_1 xs ls us b_var f_var a_var 
                   (g b_var xs) (g f_var xs) (g a_var xs)
                   (g i ls) (g i us) (g i (set_nth ls f_var 0.)) (g i (set_nth (set_nth us b_var 0.) f_var 0.)) i (g i xs)]
    @> auto]

lemma case_1_inactive_eval_relu xs ls us b_var f_var a_var i =
    let ls' = set_nth ls f_var 0. in
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    match List.nth b_var xs, List.nth f_var xs, List.nth a_var xs, 
          List.nth i ls, List.nth i us, List.nth i ls', List.nth i us', List.nth i xs
    with Some x_b, Some x_f, Some x_a, Some l_i, Some u_i, Some l_i', Some u_i', Some x_i ->
       eval_relu b_var f_var a_var xs
       && bounded xs ls us
       && inactive_relu b_var f_var a_var xs
       ==>
       bounded_elem (x_i, l_i', u_i')
    | _ -> true
[@@by [%use case_1_bridge_2 xs ls us b_var f_var a_var i]
    @> auto]
[@@fc]

lemma bounded_at_i_rw xs ls us i x_i l_i u_i =
    List.nth i xs = Some x_i
    && List.nth i ls = Some l_i 
    && List.nth i us = Some u_i
    ==>
    bounded_at_i i (zip3 xs ls us) = (l_i <=. x_i && x_i <=. u_i)
[@@by auto]
[@@fc]

lemma case_1' xs ls us b_var f_var a_var x_b x_f x_a l_i u_i l_i' u_i' i x_i =
    let ls' = set_nth ls f_var 0. in
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    List.nth b_var xs = Some x_b
    && List.nth f_var xs = Some x_f
    && List.nth a_var xs = Some x_a
    && List.nth i ls = Some l_i
    && List.nth i us = Some u_i
    && List.nth i ls' = Some l_i'
    && List.nth i us' = Some u_i'
    && List.nth i xs = Some x_i
    && ((b_var <> f_var) && (b_var <> a_var) && (f_var <> a_var)
    && x_f = relu x_b && x_a = x_f -. x_b
    && bounded xs ls us
    && x_b <=. 0. && x_f = 0. [@trigger])
    ==>
    bounded_at_i i (zip3 xs ls' us')
[@@by [%use case_1 xs ls us b_var f_var a_var x_b x_f x_a l_i u_i l_i' u_i' i x_i]
    @> [%use bounded_at_i_rw xs (set_nth ls f_var 0.) (set_nth (set_nth us b_var 0.) f_var 0.) i x_i l_i' u_i']
    @> auto]
[@@disable bounded_at_i, zip3, set_nth]
[@@fc]

lemma case_1'_inactive_eval_relu xs ls us b_var f_var a_var i =
    let ls' = set_nth ls f_var 0. in
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    match List.nth b_var xs, List.nth f_var xs, List.nth a_var xs, 
          List.nth i ls, List.nth i us, List.nth i ls', List.nth i us', List.nth i xs
    with Some x_b, Some x_f, Some x_a, Some l_i, Some u_i, Some l_i', Some u_i', Some x_i ->
        ((b_var <> f_var) && (b_var <> a_var) && (f_var <> a_var)
          && x_f = relu x_b && x_a = x_f -. x_b
          && bounded xs ls us
          && x_b <=. 0. && x_f = 0.)       
        ==>
       bounded_at_i i (zip3 xs ls' us')
    | _ -> true
    [@@by [%use case_1' xs ls us b_var f_var a_var (g b_var xs) (g f_var xs) (g a_var xs)
                       (g i ls) (g i us) (g i (set_nth ls f_var 0.)) (g i (set_nth (set_nth us b_var 0.) f_var 0.)) 
                        i (g i xs)]
       @> [%use bounded_at_i_rw xs (set_nth ls f_var 0.) (set_nth (set_nth us b_var 0.) f_var 0.) i (g i xs) 
                                   (g i (set_nth ls f_var 0.)) (g i (set_nth (set_nth us b_var 0.) f_var 0.))]
       @> auto]
[@@disable bounded_at_i, zip3, set_nth]

(* This is important to make it clear that all `List.nth` values we consume 
   will be `Some _` values, so we can go from the index constraints into 
   a conclusion about which constructor is used (`Some`!). *)

lemma nth_none_bounds i xs =
  (List.nth i xs = None) = (i < 0 || i >= List.length xs)
[@@by auto] [@@rw] [@@fc]

(* Finally, we bridge from index-constraints + Relu.eval_relu etc. 
   world to the explicit pattern matching and inlined constraint 
   world. This will make it possible to apply case_1' and its kin. *)

lemma main_bridge xs ls us b_var f_var a_var i =
  let ls' = set_nth ls f_var 0. in
  let us' = set_nth (set_nth us b_var 0.) f_var 0. in
  0 <= i && (i < List.length xs) 
  && List.length xs = List.length ls 
  && List.length xs = List.length us
  && eval_relu b_var f_var a_var xs
  && bounded xs ls us
  && inactive_relu b_var f_var a_var xs
  && List.length ls' = List.length ls
  && List.length us' = List.length us
  ==>
  match List.nth b_var xs, List.nth f_var xs, List.nth a_var xs, 
        List.nth i ls, List.nth i us, List.nth i ls', List.nth i us', List.nth i xs
  with Some x_b, Some x_f, Some x_a, Some l_i, Some u_i, Some l_i', Some u_i', Some x_i ->
   ((b_var <> f_var) && (b_var <> a_var) && (f_var <> a_var)
    && x_f = relu x_b && x_a = x_f -. x_b
    && x_b <=. 0. && x_f = 0.)
  | _ -> false
[@@by auto]

(* Finally, our main lemma! *)

lemma case_1_bounded_at_i xs ls us b_var f_var a_var i =
    let ls' = set_nth ls f_var 0. in
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    0 <= i && (i < List.length xs) 
    && List.length xs = List.length ls 
    && List.length xs = List.length us
    && eval_relu b_var f_var a_var xs
    && bounded xs ls us
    && inactive_relu b_var f_var a_var xs
    ==>
    bounded_at_i i (zip3 xs ls' us') 
[@@by [%use case_1'_inactive_eval_relu xs ls us b_var f_var a_var i]
   @> [%use main_bridge xs ls us b_var f_var a_var i]
   @> auto]
[@@disable bounded_at_i, set_nth, zip3, bounded]
