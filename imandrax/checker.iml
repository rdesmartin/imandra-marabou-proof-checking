(* GP Status: PROVED! *)

[@@@import "util.iml"]
[@@@import "proof_tree.iml"]
[@@@import "arithmetic.iml"]
[@@@import "split.iml"]

open Util
open Proof_tree
open Arithmetic
open Split
open Tightening
open Bound_lemma
open Constraint
open Farkas
open Certificate

let mk_contradiction_certificate (contradiction: Real.t list) (tableau: expr list) (upper_bounds: Real.t list) (lower_bounds: Real.t list) = 
    let lc = compute_combination contradiction tableau in
    contradiction @ ((mk_upper_bound_certificate lc) @ (mk_lower_bound_certificate lc))

(* check contradiction with polynomials representation *)
let check_contradiction (contradiction: Real.t list) (tableau: expr list) (upper_bounds: Real.t list) (lower_bounds: Real.t list): bool = 
    let sys = mk_system_contradiction tableau upper_bounds lower_bounds in
    let certificate = mk_contradiction_certificate contradiction tableau upper_bounds lower_bounds in
    let res = (check_cert sys certificate) in
    res

(** Recursively check nodes in the proof tree
    First, update the bounds according to the split.
    We then check that the dynamic bound tightenings performed at this step are valid, and we apply them. 
   
    If the node is not a leaf, we then check that its children split the search space correctly (either 2 phases of relu or single var split TODO: what is single var split again?)
    Then we recursively apply `check_node` on all the node's children.

    If the node is a Leaf, we check that the saved proof vector leads to a contradiction
    *)
let rec check_node (tableau: expr list) (upper_bounds: Real.t list) (lower_bounds: Real.t list) (constraints: Constraint.t list) (proof_node: Proof_tree.t) =
    match proof_node with
    | Proof_tree.Leaf (contradiction, bound_lemmas) ->
        (* for integration tests with lemma tightening, we update the bounds according to theory lemmas without checking them *)
        (* let (lower_bounds, upper_bounds) = BoundLemma.update_bound_lemmas bound_lemmas upper_bounds lower_bounds in *)
        let valid_contradiction = check_contradiction contradiction tableau upper_bounds lower_bounds in
        (* if not valid_contradiction then let () = Printf.printf "Invalid contradiction in leaf\n" in valid_contradiction else *)
        valid_contradiction
    | Proof_tree.Node (split, bound_lemmas, left, right) ->
        (* for integration tests with lemma tightening, we update the bounds according to theory lemmas without checking them *)
        (* let (lower_bounds, upper_bounds) = BoundLemma.update_bound_lemmas bound_lemmas upper_bounds lower_bounds in *)
        let valid_split = check_split split constraints in
        let (lb_left, ub_left), (lb_right, ub_right) = update_bounds_from_split lower_bounds upper_bounds split in
        let valid_children = (check_node tableau ub_left lb_left constraints left) &&
            (check_node tableau ub_right lb_right constraints right) in
        valid_children
    [@@adm proof_node]

let rec equal_rows_length tableau size = 
    match tableau with
    | hd :: tl -> List.length hd = size && equal_rows_length tl size
    | [] -> true

let well_formed_tableau tableau = 
    tableau <> [] &&
    List.hd tableau <> [] && 
    equal_rows_length tableau (List.length (List.hd tableau))

lemma well_formed_tableau_members tableau x =
  well_formed_tableau tableau 
  && List.mem x tableau
  ==>
  List.length (List.hd tableau) = List.length x
[@@by auto] [@@fc]

(* Return true if the dimensions of the bounds are the same and if the length of 
   the bounds is greater than the number of rows in the tableau
   todo: ask clarification about second condition
*)
let well_formed_tableau_bounds tableau upper_bounds lower_bounds =
    let valid_bounds_sizes = List.length upper_bounds = List.length lower_bounds && List.length lower_bounds <> 0 in
    let tableau_bounds_match = List.length upper_bounds = List.length (List.hd tableau) in
    let tableau_well_formed = well_formed_tableau tableau in
    valid_bounds_sizes && tableau_well_formed && tableau_bounds_match


(* Main entry point to verify the proof tree.
   - perform sanity checks on the tableau and upper and lower bound vector dimensions.
   - check the tree recursively starting from the root. We use pattern matching to check 
   that the root node contains no dynamic bound tightenings. 
   The function `check_node` will traverse the tree recursively; so if it returns true, 
   it means that the proof is valid, i.e.all the bound tightenings are correct and 
   all the contradiction vectors correpond to a contradiction. 
*)
let check_proof_tree (tableau: Real.t list list) (upper_bounds: Real.t list) (lower_bounds: Real.t list) (constraints: Constraint.t list) (proof_root: Proof_tree.t) =
    let sanity_check_res = well_formed_tableau_bounds tableau upper_bounds lower_bounds in
    let tableau_system = mk_eq_constraints tableau in
    (* we would need to apply the root's bound propagation lemmas here, then we prove that this 
    bound update does not change satisfiability *)
    let check_tree = check_node tableau_system upper_bounds lower_bounds constraints proof_root in
    sanity_check_res && check_tree
