[@@@import "util.iml"]
[@@@import "arithmetic.iml"]

let bounded = Arithmetic.is_bounded

let set_nth = Util.set_nth

(* let rec bounded xs ls us = match xs, ls, us with
    | [], [], [] -> true
    | x::xs, l::ls, u::us -> l <=. x && x <=. u && bounded xs ls us
    | x::xs,l::ls, [] -> l <=. x && bounded xs ls us
    | x::xs,[], u::us -> x <=. u && bounded xs ls us
    | _, _, _ -> true *)

(* 
(* defined in util.iml *)
let rec set_nth (l: 'a list) (n: int) (x: 'a): 'a list =    
    if n < 0 then l
    else
    match l with
    | [] -> []
    | hd::tl ->
    if n = 0 then (
        x :: tl
    ) else (
        hd :: set_nth tl (n-1) x
    )
 *)
lemma bounded_nth xs ls us n = 
    bounded xs ls us 
    ==>
    match (List.nth n xs), (List.nth n ls), (List.nth n us) with
    | Some x, Some l, Some u -> l <=. x && x <=. u
    | _, _, _ -> true
    [@@by auto]

lemma get_set_nth l n a =
    n >= 0 && n < List.length l
     ==>
     (List.nth n (set_nth l n a) = Some a)
[@@by auto] [@@rw]

lemma set_nth_unchanged l n m a =
  n <> m
  ==>
  List.nth m (set_nth l n a) = List.nth m l
[@@by auto] [@@rw]

lemma bounded_set_nth xs ls us k i =
    bounded xs ls us
    ==> 
    bounded xs (set_nth ls i k) us ||
    bounded xs ls (set_nth us i k)
[@@by auto]