(* GP Status: PROVED!

  This module is a great example to teach Remi how strong rules are better than weak ones.
  Remi had many lemmas which together were still weaker than `good_poly_x_sizes_elim` and
  `len_append`! These are the key concepts! Go for the key concepts!) *)

[@@@import "farkas.iml"]
[@@@import "certificate.iml"]
[@@@import "arithmetic.iml"]
[@@@import "constraint.iml"]
[@@@import "proof_tree.iml"]
[@@@import "checker.iml"]
[@@@import "tightening.iml"]
[@@@import "mk_bound_poly.iml"]
[@@@import "bound_reduct_g.iml"]
[@@@import "util.iml"]

open Util
open Arithmetic
open Constraint
open Proof_tree
open Checker
open Check_splits
open Certificate
open Farkas
open Tightening
open Bound_lemma

(** 
=========== well_formed_mk_eq_constraints ================================
 *)
lemma good_poly_length_append row =
    good_poly_x_sizes (List.append row [0.]) row
[@@by auto]
[@@rw] [@@fc]
 
lemma equal_row_length_empty_row row tableau =
    tableau <> [] && List.hd tableau = [] &&
    row <> []
    ==>
    equal_rows_length tableau (List.length row) = false
[@@by auto]
[@@rw] [@@fc]

lemma wf_tableau_all_rows_eq_size tableau r = 
    well_formed_tableau tableau &&
    List.mem r tableau
    ==> 
    List.length r = List.length (List.hd tableau)
[@@by auto]
[@@fc]

lemma good_poly_length_constraints_same_len tableau system =
    well_formed_tableau tableau &&
    system = mk_eq_constraints tableau
    ==> 
    good_poly_x_sizes (extract_poly (List.hd system)) (List.hd tableau)
[@@by auto]
[@@fc]

lemma wf_tableau_non_empty_row tableau r = 
    well_formed_tableau tableau &&
    List.mem r tableau
    ==> 
    r <> []
[@@by auto]
[@@fc]

lemma mk_eq_constraints_non_empty_invariant tableau = 
    tableau <> [] 
    ==> 
    (mk_eq_constraints tableau = []) = false
[@@rw][@@fc]

lemma equal_rows_length_tl_invariant tableau1 tableau2 =
    tableau2 <> [] &&
    equal_rows_length tableau2 (List.length tableau1)
    ==>
    List.length (List.hd tableau2) = List.length tableau1
[@@by auto]
[@@fc]

lemma good_poly_length_transitivity p x1 x2 = 
    List.length x1 = List.length x2 
    && good_poly_x_sizes p x1 
    ==> 
    good_poly_x_sizes p x2
[@@by auto]
[@@fc]

 (* Grant: Key property about good_poly_x_sizes! *)

lemma good_poly_x_sizes_elim p x =
  good_poly_x_sizes p x = (List.length p = List.length x + 1)
[@@by auto] [@@fc] [@@rw]

    (* Grant: This is a very weak rule! Let's make it stronger!

    lemma well_formed_system_eq_lists_invariant tableau l1 l2 =
      List.length l1 = List.length l2 &&
      well_formed_tableau tableau &&
      well_formed (mk_eq_constraints tableau) l1
      ==>
      well_formed (mk_eq_constraints tableau) l2
      [@@by auto]
      [@@fc]

      *)

lemma well_formed_system_eq_lists_invariant tableau l1 l2 =
    well_formed_tableau tableau
    && well_formed (mk_eq_constraints tableau) l1
    ==>
    well_formed (mk_eq_constraints tableau) l2
    = (List.length l1 = List.length l2)
[@@by auto] [@@fc]

lemma well_formed_tableau_prepend_invariant (tableau: real list list) (row: real list) =
    well_formed_tableau tableau && 
    well_formed_tableau [row] && 
    List.length (List.hd tableau) = List.length row
    ==> 
    well_formed_tableau (row :: tableau)
[@@by auto] [@@rw]
[@@disable List.map, List.length, Util.all]

let rec well_formed_eq_induction_scheme (tableau: real list list) (system: system) =
    match tableau, system with
    | ht::tt, hs::ts -> well_formed_eq_induction_scheme tt ts
    | [], [] -> true
    | _, _ -> true

lemma len_append x y =
    List.length (x @ y) = List.length x + List.length y
[@@by auto] [@@rw]
  
lemma well_formed_mk_eq_constraints tableau system =
    well_formed_tableau tableau
    && system = (mk_eq_constraints tableau)
    ==>
    well_formed system (List.hd tableau)
[@@by auto]

(** 
=========== well_formed_mk_geq_constraints ================================
 *)

 lemma good_poly_length_helper p x =
    List.length p = (List.length x) + 1
    ==>
    good_poly_x_sizes p x
[@@by auto]
[@@rw][@@fc]

lemma repeat_length x n = 
    n >= 0
    ==>
    List.length (repeat x n) = n
[@@by auto]
[@@rw][@@fc]
   
lemma mk_bound_poly_size size i coeff bound =
    size >= 0
    ==> 
    List.length (mk_bound_poly size i coeff bound) = size + 1
[@@by auto]
[@@disable Util.repeat, List.append]
[@@rw][@@fc]

let is_geq p = match p with
    | Geq _ -> true
    | _ -> false
    
lemma geq_mk_bound_poly_length_invariant size i coeff bound =
    size >= 0 
    ==>
    List.length (extract_poly (Geq (mk_bound_poly size i coeff bound))) = size + 1
[@@by auto]
[@@fc]

lemma mk_upper_bounds_constraints_geq e upper_bounds x = 
    List.mem e (mk_upper_bounds_constraints (List.length x) upper_bounds)
    ==>
    is_geq e
[@@by auto]
[@@fc]

lemma mk_bound_poly_length size i coeff bound =
    size >= 0 
    ==>
    List.length (mk_bound_poly size i coeff bound) = size + 1
[@@by auto][@@fc]

(* Grant: We don't need this weak rule because we now have the much 
   stronger rule `good_poly_x_sizes_elim` above!

  lemma good_poly_length_list_length x y = 
     List.length x = List.length y + 1
     ==> 
     good_poly_x_sizes x y
   [@@by auto][@@fc]
 *)

lemma non_empty_list_len x =
    x <> [] ==> List.length x >= 0
[@@by auto][@@fc]

lemma good_upper_bound_poly_length_mk_bound_poly upper_bounds x = 
    x <> [] && upper_bounds <> [] 
    ==> 
    good_poly_x_sizes (mk_bound_poly (List.length x) ((List.length x) - (List.length upper_bounds)) (-1.) (List.hd upper_bounds)) x
    [@@by auto]
    [@@fc]

lemma mk_upper_bounds_constraints_length_invariant e sys size upper_bounds =
    e = List.hd sys &&
    size >= 0 && upper_bounds <> [] &&
    sys = mk_upper_bounds_constraints size upper_bounds
    ==> 
    List.length (extract_poly e) = size + 1
    [@@by [%use geq_mk_bound_poly_length_invariant size (size - (List.length upper_bounds)) (-1.) (List.hd upper_bounds)]
       @> auto]
    [@@disable List.length]
    [@@fc]

lemma mk_upper_bounds_constraints_good_poly_length e sys upper_bounds x =
    e = List.hd sys &&
    x <> [] && upper_bounds <> [] &&
    sys = mk_upper_bounds_constraints (List.length x) upper_bounds
    ==> 
    good_poly_x_sizes (extract_poly e) x
    [@@by [%use mk_upper_bounds_constraints_length_invariant e sys (List.length x) upper_bounds]
       @> auto]
    [@@disable List.length]
    [@@fc]

lemma mk_upper_bounds_constraints_empty_invariant size = 
    mk_upper_bounds_constraints size [] = []
    [@@rw][@@fc]

lemma mk_upper_bounds_constraints_empty_invariant_inverse size upper_bounds = 
    mk_upper_bounds_constraints size upper_bounds = []
    ==> 
    upper_bounds = []
    [@@fc]

lemma mk_upper_bounds_constraints_nonempty_invariant size upper_bounds = 
    upper_bounds <> []
    ==>
    mk_upper_bounds_constraints  size upper_bounds <> []
    [@@rw][@@fc]

lemma mk_upper_bounds_constraints_well_formed sys upper_bounds x = 
    x <> [] && upper_bounds <> [] &&
    sys = mk_upper_bounds_constraints (List.length x) upper_bounds
    ==>
    well_formed sys x
    [@@by auto]
    [@@disable List.length, Farkas.extract_poly]

(* =============== mk_lower_bound_constraints_well_formed =============== *)

lemma mk_lower_bounds_constraints_geq e lower_bounds x = 
    List.mem e (mk_lower_bounds_constraints (List.length x) lower_bounds)
    ==>
    is_geq e
    [@@by auto]
    [@@fc]

lemma good_lower_bound_poly_length_mk_bound_poly lower_bounds x = 
    x <> [] && lower_bounds <> [] 
    ==> 
    good_poly_x_sizes (mk_bound_poly (List.length x) ((List.length x) - (List.length lower_bounds)) (1.) (-. (List.hd lower_bounds))) x
    [@@by auto]
    [@@fc]

let one = 1.0

lemma mk_lower_bounds_constraints_length_invariant e sys size lower_bounds =
    e = List.hd sys &&
    size >= 0 && lower_bounds <> [] &&
    sys = mk_lower_bounds_constraints  size lower_bounds
    ==> 
    List.length (extract_poly e) = size + 1
    [@@by
     [%use geq_mk_bound_poly_length_invariant size (size - (List.length lower_bounds)) one (List.hd lower_bounds)]
     @> auto]
    [@@disable List.length]
    [@@fc]

lemma mk_lower_bounds_constraints_good_poly_length e sys lower_bounds x =
    e = List.hd sys &&
    x <> [] && lower_bounds <> [] &&
    sys = mk_lower_bounds_constraints (List.length x) lower_bounds
    ==> 
    good_poly_x_sizes (extract_poly e) x
    [@@by [%use mk_lower_bounds_constraints_length_invariant e sys (List.length x) lower_bounds]
       @> auto]
    [@@disable List.length]
    [@@fc]

lemma mk_lower_bounds_constraints_empty_invariant size = 
    mk_lower_bounds_constraints  size [] = []
    [@@rw][@@fc]

lemma mk_lower_bounds_constraints_empty_invariant_inverse size lower_bounds = 
    mk_lower_bounds_constraints size lower_bounds = []
    ==> 
    lower_bounds = []
    [@@fc]

lemma mk_lower_bounds_constraints_nonempty_invariant size lower_bounds = 
    lower_bounds <> []
    ==>
    mk_lower_bounds_constraints  size lower_bounds <> []
    [@@rw][@@fc]


lemma mk_lower_bounds_constraints_well_formed sys lower_bounds x = 
    x <> [] && lower_bounds <> [] &&
    sys = mk_lower_bounds_constraints  (List.length x) lower_bounds
    ==>  
    well_formed sys x
    [@@by auto]
    [@@disable List.length, Farkas.extract_poly]

(* =================  well_formed_mk_geq_constraints =================== *)

(* Grant: This is much better as a rewrite rule (see previous version to see what I mean)! *)

lemma well_formed_concat_invariant_rw s1 s2 x =
    well_formed (s1 @ s2) x = (well_formed s1 x && well_formed s2 x)
[@@by auto]
[@@rw]

lemma well_formed_mk_geq_constraints upper_bounds lower_bounds u_constraints l_constraints =
    u_constraints = mk_upper_bounds_constraints (List.length upper_bounds) upper_bounds &&
    l_constraints = mk_lower_bounds_constraints (List.length upper_bounds) lower_bounds &&
    upper_bounds <> [] && lower_bounds <> [] && 
    List.length upper_bounds = List.length lower_bounds
    ==>
    well_formed (u_constraints @ l_constraints) upper_bounds
[@@by [%use mk_upper_bounds_constraints_well_formed u_constraints upper_bounds upper_bounds]
   @> [%use mk_lower_bounds_constraints_well_formed l_constraints lower_bounds upper_bounds]
   @> auto]
[@@disable Certificate.mk_lower_bounds_constraints, Certificate.mk_upper_bounds_constraints ]
[@@fc]

lemma well_formed_mk_geq_constraints' upper_bounds lower_bounds u_constraints l_constraints =
    u_constraints = mk_upper_bounds_constraints (List.length upper_bounds) upper_bounds &&
    l_constraints = mk_lower_bounds_constraints (List.length upper_bounds) lower_bounds &&
    upper_bounds <> [] && lower_bounds <> [] && 
    List.length upper_bounds = List.length lower_bounds
    ==>
    well_formed (mk_geq_constraints upper_bounds lower_bounds) upper_bounds
[@@by [%use well_formed_mk_geq_constraints upper_bounds lower_bounds u_constraints l_constraints]
   @> auto]
[@@disable Certificate.mk_lower_bounds_constraints , Certificate.mk_upper_bounds_constraints]
[@@fc]

lemma well_formed_mk_geq_constraints'' upper_bounds lower_bounds sys =
    sys = mk_geq_constraints upper_bounds lower_bounds &&
    upper_bounds <> [] && lower_bounds <> [] && 
    List.length upper_bounds = List.length lower_bounds
    ==>
    well_formed sys upper_bounds
[@@by 
 [%use well_formed_mk_geq_constraints' upper_bounds lower_bounds 
       (mk_upper_bounds_constraints  (List.length upper_bounds) upper_bounds) 
       (mk_lower_bounds_constraints  (List.length upper_bounds) lower_bounds)]
 @> auto]       
[@@disable Certificate.mk_lower_bounds_constraints, 
           Certificate.mk_upper_bounds_constraints , Certificate.mk_geq_constraints]
[@@fc]

(* 
============= well_formed_mk_system_contradiction ========================
 *)

(** Linear combination size invariant *)

(* Grant: Similarly, we don't need this weak rule anymore... 

 lemma good_poly_length_size p x =
    good_poly_x_sizes p x
    ==> 
    (List.length p) - 1 = List.length x
    [@@by auto]
    [@@fc]

  There is still more rule strengthening and simplification we can do!
 *)

lemma well_formed_good_poly_length system e x =
    well_formed system x && List.mem e system
    ==> 
    good_poly_x_sizes (extract_poly e) x
[@@by auto]
[@@fc]

lemma good_poly_length_same_lengths p l1 l2 =
    List.length l1 = List.length l2 &&
    good_poly_x_sizes p l1
    ==>
    good_poly_x_sizes p l2
[@@by auto]
[@@fc]

lemma well_formed_same_lengths system l1 l2 =
    List.length l1 = List.length l2 &&
    well_formed system l1
    ==>
    well_formed system l2
[@@by auto]
[@@fc]

lemma well_formed_conversion tableau upper_bounds lower_bounds eq_constraints geq_constraints =
    well_formed_tableau tableau &&
    upper_bounds <> [] && lower_bounds <> [] && 
    List.length upper_bounds = List.length (List.hd tableau) &&
    List.length upper_bounds = List.length lower_bounds &&
    eq_constraints = mk_eq_constraints tableau &&
    geq_constraints = mk_geq_constraints upper_bounds lower_bounds
    ==>
    well_formed (eq_constraints @ geq_constraints) (List.hd tableau)
[@@by [%use well_formed_mk_geq_constraints'' upper_bounds lower_bounds geq_constraints]
   @> [%use well_formed_mk_eq_constraints tableau eq_constraints]
   @> auto]
[@@disable Certificate.mk_eq_constraints, Certificate.mk_geq_constraints, Arithmetic.compute_combination, List.hd, Farkas.good_poly_x_sizes]
[@@fc]

lemma well_formed_conversion' tableau upper_bounds lower_bounds system =
    well_formed_tableau tableau &&
    upper_bounds <> [] && lower_bounds <> [] &&
    List.length upper_bounds = List.length (List.hd tableau) &&
    List.length upper_bounds = List.length lower_bounds &&
    system = mk_system_contradiction (mk_eq_constraints tableau) upper_bounds lower_bounds
    ==>
    well_formed system (List.hd tableau)
[@@by
 [%use well_formed_conversion tableau upper_bounds lower_bounds (mk_eq_constraints tableau) (mk_geq_constraints upper_bounds lower_bounds)]
 @> auto]
[@@disable Certificate.mk_geq_constraints]
[@@fc]

lemma well_formed_conversion'' tableau upper_bounds lower_bounds system x =
    well_formed_tableau tableau &&
    upper_bounds <> [] && lower_bounds <> [] &&
    List.length upper_bounds = List.length (List.hd tableau) &&
    List.length upper_bounds = List.length lower_bounds &&
    system = mk_system_contradiction (mk_eq_constraints tableau) upper_bounds lower_bounds &&
    List.length x = List.length (List.hd tableau)
    ==>
    well_formed system x
[@@by [%use well_formed_conversion' tableau upper_bounds lower_bounds system]
   @> [%use well_formed_same_lengths system (List.hd tableau) x]
   @> auto]
[@@disable Certificate.mk_geq_constraints]
[@@fc]

lemma contradiction_system_evaluation_false_helper tableau upper_bounds lower_bounds system x c =
    well_formed_tableau tableau &&
    List.length x = List.length (List.hd tableau) &&
    upper_bounds <> [] && lower_bounds <> [] &&
    List.length upper_bounds = List.length (List.hd tableau) &&
    List.length upper_bounds = List.length lower_bounds &&
    system = mk_system_contradiction (mk_eq_constraints tableau) upper_bounds lower_bounds &&
    check_cert system c
    ==>
    well_formed system x
[@@by [%use well_formed_conversion'' tableau upper_bounds lower_bounds system x]
   @> auto]
[@@disable Certificate.mk_system_contradiction, Farkas.check_cert]
[@@fc]

 lemma contradiction_system_evaluation_false  tableau upper_bounds lower_bounds system x c =
    well_formed_tableau tableau &&
    List.length x = List.length (List.hd tableau) &&
    upper_bounds <> [] && lower_bounds <> [] &&
    List.length upper_bounds = List.length (List.hd tableau) &&
    List.length upper_bounds = List.length lower_bounds &&
    system = mk_system_contradiction (mk_eq_constraints tableau) upper_bounds lower_bounds &&
    check_cert system c
    ==>
    eval_system system x = false
[@@by [%use contradiction_system_evaluation_false_helper tableau upper_bounds lower_bounds system x c]
   @> [%use Farkas.check_cert_correct system x c]
   @> auto]
[@@disable Certificate.mk_system_contradiction, Farkas.check_cert]
[@@fc]