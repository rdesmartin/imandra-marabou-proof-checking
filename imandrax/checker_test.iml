[@@@import "constraint.iml"]
[@@@import "proof_tree.iml"]
[@@@import "split.iml"]
[@@@import "checker.iml"]
[@@@import "tightening.iml"]
[@@@import "mk_bound_poly.iml"]
[@@@import "bound_reduct_g.iml"]
[@@@import "bound_reduction.iml"]
[@@@import "well_formed_reduction.iml"]
[@@@import "tableau_reduction.iml"]
[@@@import "sat.iml"]

open Proof_tree
open Split
open Checker
open Sat

let rec tree_height t =
    match t with
    | Leaf _ -> 0
    | Node (_, _, left, right) ->
        let hl = tree_height left in 
        let hr = tree_height right in
        if hl >= hr then 1 + hl else 1 + hr

lemma tree_height_decreasing a b l r =
    tree_height (Node (a,b,l,r)) > tree_height l
    && tree_height (Node (a,b,l,r)) > tree_height r
[@@by auto]
[@@fc]

let find_sat_leaf_measure tree =
    Ordinal.of_int (tree_height tree)

let rec find_sat_leaf tableau ub lb constraints x t =
    match t with 
    | Leaf _ -> if sat tableau ub lb constraints x then Some t else None
    | Node (split, _, left, right) ->
        if not (check_split split constraints) then None
        else
            let (lb_left, ub_left), (lb_right, ub_right) = update_bounds_from_split lb ub split in
            let res_l = find_sat_leaf tableau ub_left lb_left constraints x left in
            let res_r = find_sat_leaf tableau ub_right lb_right constraints x right in
            (
                match res_l, res_r with 
                | Some t, _ -> Some t 
                | _, Some t -> Some t
                | None, None -> None
            )
[@@measure find_sat_leaf_measure t]

let rec is_in_tree a b = 
    match a with 
    | Leaf _ -> a = b 
    | Node (_, _, left, right) ->
        is_in_tree left b || is_in_tree right b

lemma find_sat_leaf_is_in_tree tableau ub lb constraints x t l =
        find_sat_leaf tableau ub lb constraints x t = Some l
        ==> 
        is_in_tree t l
[@@by auto]
[@@disable find_sat_leaf]