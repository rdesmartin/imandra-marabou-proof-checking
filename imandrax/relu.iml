(* GP Status: PROVED! *)

(* [@@@import "farkas.iml"] *)

(* open Farkas *)

(* backwards variable, forward variable, auxilliary variable *)
type t = (int * int * int)

let relu x = if x >=. 0. then x else 0. 

let eval_relu b_var f_var aux_var x =
    match List.nth b_var x, List.nth f_var x, List.nth aux_var x with
    | Some b, Some f, Some aux -> (b_var <> f_var) && (b_var <> aux_var) && (f_var <> aux_var) &&
        f = relu b && aux +. b -. f = 0.
    | _ -> false

let active_relu b_var f_var aux_var x =
    match List.nth b_var x, List.nth f_var x, List.nth aux_var x with
    | Some b, Some f, Some aux -> 
        b >=. 0. && aux = 0.
    | _ -> false 

let inactive_relu b_var f_var aux_var x =
    match List.nth b_var x, List.nth f_var x, List.nth aux_var x with
    | Some b, Some f, Some aux -> 
        b <=. 0. && f = 0.
    | _ -> false 

let rec eval_relus (cs: t list) (x: real list): bool = 
    match cs with
    | [] -> true
    | (b, f, a):: cs -> eval_relu b f a x && eval_relus cs x

theorem relu_b_non_neg b f aux = 
    f = relu b && aux +. b -. f = 0. 
    ==> 
    f >=. 0.
[@@fc]
theorem relu_aux_pos b f aux = 
    f = relu b && aux +. b -. f = 0. 
    ==> 
    aux >=. 0.
[@@fc]

theorem relu_split b f aux = 
    f = relu b && aux +. b -. f = 0. 
    ==> 
    (b >=. 0. && aux = 0.) ||
    (b <. 0. && f = 0. )
[@@fc]

theorem relu_lemmas_1 b f aux = 
    f = relu b && aux +. b -. f = 0. 
    ==>
    b >=. 0. ==> aux <=. 0.

theorem relu_lemmas_2 b f aux x = 
    f = relu b && aux +. b -. f = 0.
    ==>
    f >=. x && x >. 0. ==> aux <=. 0. 
            
theorem relu_lemmas_3 b f aux x = 
    f = relu b && aux +. b -. f = 0. 
    ==> 
    aux >=. x && x >. 0. ==> f <=. 0.

theorem relu_lemmas_4 b f aux x = 
    f = relu b && aux +. b -. f = 0. 
    ==>
    f <=. x && x <. 0. ==> f <=. 0.

theorem relu_lemmas_5 b f aux = 
    f = relu b && aux +. b -. f = 0. 
    ==>
    b <=. 0. ==> f <=. 0.

theorem relu_lemmas_6 b f aux x = 
    f = relu b && aux +. b -. f = 0. 
    ==>
    f <=. x ==> b <=. x

theorem relu_lemmas_7 b f aux x = 
    f = relu b && aux +. b -. f = 0. 
    ==>
    b <=. x && x >=. 0. ==> f <=. x

theorem relu_lemmas_8 b f aux x = 
    f = relu b && aux +. b -. f = 0. 
    ==>
    aux <=. x ==> b >=. (-. x)

theorem relu_lemmas_9 b f aux x = 
    f = relu b && aux +. b -. f = 0. 
    ==>
    b >=. x && x <=. 0. ==> aux <=. (-. x)