(* GP Status: PROVED! *)

[@@@import "util.iml"]

open Util

type t = Relu of (int * int * int)
  (* | ABSOLUTE_VALUE
  | MAX
  | DISJUNCTION
  | SIGN *)

type t_old = constraint_type * int list

 let constraint_type_of_int = function 
    | 0 -> RELU
    | 1 -> ABSOLUTE_VALUE
    | 2 -> MAX
    | 3 -> DISJUNCTION
    | 4 -> SIGN
    | _ -> UNDEFINED


let parse_constraint (i: int) (vars: int list): t option =
  match i, vars with
  | 0, b :: f :: a :: _ -> Some (Relu (b, f, a))
  | _ -> None

let relu x = if x >=. 0. then x else 0. 

let eval_relu (b_var: int) (f_var: int) (aux_var: int) (x: real list) =
    let b = List.nth b_var x in
    let f = List.nth f_var x in
    let aux = List.nth aux_var x in
    match b, f, aux with
    | Some b, Some f, Some aux -> f = relu b && aux +. b -. f = 0.
    | _ -> false

let rec check_relu_constraints (cs: t list) (x: real list) =
    match cs with
    | [] -> true
    | Relu (b, f, a) :: cs -> eval_relu b f a x && check_relu_constraints cs x
    (* | _ :: cs -> check_relu_constraints cs x *)
