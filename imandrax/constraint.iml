(* GP Status: PROVED! *)

[@@@import "util.iml"]

open Util

let constraint_type_of_int = function 
  | 0 -> RELU
  | 1 -> ABSOLUTE_VALUE
  | 2 -> MAX
  | 3 -> DISJUNCTION
  | 4 -> SIGN
  | _ -> UNDEFINED

(* constraint type, variables *)
type t = constraint_type * int list
    
let relu x = if x >=. 0. then x else 0. 

let eval_relu ((b_var, f_var, aux_var): (int * int * int)) x =
    let b = List.nth b_var x in
    let f = List.nth f_var x in
    let aux = List.nth aux_var x in
    match b, f, aux with
    | Some b, Some f, Some aux -> f = relu b && aux +. b -. f = 0.
    | _ -> false

(* TODO: check if re-factoring with List.all (List.map ...) helps  *)
let rec check_relu_constraints (cs: t list) (x: real list) =
    match cs with
    | [] -> true
    | (RELU, [a; b; f]) :: cs -> eval_relu (a, b, f) x && check_relu_constraints cs x
    | _ -> false
