(* GP Status: PROVED! *)

(* Dynamic bound tightenings *)

[@@@import "util.iml"]

open Util

(* index of value to tighten, new value, bound type (UPPER or LOWER) *)
type t = (int * Real.t * bound_type)

let compare (var1, _, _) (var2, _, _) = var1 <= var2

let is_upper = function
  | (_, _, UPPER) -> true
  | _ -> false
  
let is_lower = function
  | (_, _, LOWER) -> true
  | _ -> false

(* update a single bound vector according to a list of tightenings *)
let rec update_bounds_by_tightenings (tightenings: t list) (bounds: Real.t list): Real.t list =
   match tightenings with
   | []                    -> bounds
   | (var, value, _) :: tl -> let updated_bounds = set_nth bounds var value in
                              update_bounds_by_tightenings tl updated_bounds

let update_bounds' (bounds: Real.t list) (tightenings: t list) (bound: bound_type) =
        let tightenings' = List.filter (fun (a, b, t) -> t = bound) tightenings in
        update_bounds_by_tightenings tightenings' bounds 
    
(* update the bounds according to a list of tightenings *)
let update_bounds_lr upper_tightenings lower_tightenings (upper_bounds: Real.t list) (lower_bounds: Real.t list): (Real.t list * Real.t list) =
  let updated_upper = update_bounds_by_tightenings upper_tightenings upper_bounds in
  let updated_lower = update_bounds_by_tightenings lower_tightenings lower_bounds in
  (updated_upper, updated_lower)

(* update the bounds according to a list of tightenings *)
let update_bounds (tightenings: t list) (upper_bounds: Real.t list) (lower_bounds: Real.t list): (Real.t list * Real.t list) =
   let upper_tightenings = List.filter is_upper tightenings in
   let lower_tightenings = List.filter (fun a -> not (is_upper a)) tightenings in
   let updated_upper = update_bounds_by_tightenings upper_tightenings upper_bounds in
   let updated_lower = update_bounds_by_tightenings lower_tightenings lower_bounds in
   (updated_upper, updated_lower)

(* debugging function *)
(* let tightening_to_string ((n,r,bt) :t) = 
  Printf.sprintf "[ n: %d r: %f bt: %s ]" (Z.to_int n) (Real.to_float r)  (bound_type_to_str bt) *)

(* let rec tightenings_to_string (l: t list) = 
  match l with 
  | [] -> ""
  | x :: xs -> (tightening_to_string x) ^ " " ^ (tightenings_to_string xs) *)