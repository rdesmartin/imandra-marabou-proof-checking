(* GP Status: PROVED! *)

(* Correctness of a full Farkas lemma proof checker in Imandra. *)
(* G.Passmore, Imandra *)

(* A polynomial is a list of coefficients, one for each variable
   X_1, ..., X_n as well as a final constant term.

   So, e.g., `3X_1 + 4X_3 + 1` is represented as
   [3.0; 0.0; 4.0; 1.0].
 *)

type poly = Real.t list

 (* An expression is a constraint of the form `Eq p`, `Geq p`
    or `Gt p`, with `p` a polynomial, interpreted as `p = 0`, 
    `p >= 0` or `p > 0` (resp.). *)
 
type expr =
  | Eq of poly  (*  = 0 *)
  | Geq of poly (* >= 0 *)
 
let extract_poly (e: expr): Real.t list =
    match e with
    | Geq p -> p
    | Eq p -> p

 (* A system is a collection of expressions *)
 
type system = expr list
 
let rec eval_poly (p:poly) (x:Real.t list) : Real.t =
   match p, x with
   | a :: p, b :: x ->
     Real.(a*b + eval_poly p x)
   | [a], [] -> a
   | _ -> 0.0

let eval_expr e x =
   match e with
   | Eq p -> Real.(eval_poly p x = 0.0)
   | Geq p -> Real.(eval_poly p x >= 0.0)
 
let rec eval_system (es:system) (x:Real.t list) : bool =
   match es with
   | [] -> true
   | e::es -> eval_expr e x && eval_system es x
 
let rec p_add (p:poly) (q:poly) : poly =
   match p, q with
   | [], [] -> []
   | a::p, b::q -> Real.(a + b) :: p_add p q
   | _ -> []
 
let rec p_scale (p:poly) (r:Real.t) : poly =
   match p with
   | [] -> []
   | c::cs -> Real.(r * c) :: p_scale cs r
 
let rec is_neg_const (p:poly) : bool =
   match p with
   | [] -> false
   | [c] -> Real.(c < 0.0)
   | c::p -> c = 0.0 && is_neg_const p
 
let rec sum_polys (ps:poly list) : poly =
   match ps with
   | [] -> []
   | [p] -> p
   | p::ps -> p_add p (sum_polys ps)
 
 (* Scale expressions by constants, obtaining a list of scaled polynomials.
    Note that we internalize here the requirement that the certificate
    coefficients for Geq constraints must be non-negative, and similarly
    for Gt constraints w.r.t. positive scalars. This affects neither soundness 
    nor completeness and makes the reasoning a bit more streamlined! *)
 
let rec scale_exprs (cs:Real.t list) (es:system) : poly list =
   match cs, es with
   | c::cs, Eq p :: es ->
     p_scale p c :: scale_exprs cs es
   | c::cs, Geq p :: es ->
     if Real.(c >= 0.0) then (
       p_scale p c :: scale_exprs cs es
     ) else (
       p :: scale_exprs cs es
     )
   | [], Eq p :: es -> p :: scale_exprs cs es
   | [], Geq p :: es -> p :: scale_exprs cs es
   | _ -> []
 [@@adm es]
 
 (* Make a certificate from certificate coefficients and expressions. *)
 
let mk_cert_poly (cs:Real.t list) (es:system) : poly =
   let ps = scale_exprs cs es in
   sum_polys ps
 
 (* This certificate certifies unsatisfiability of es if it normalizes
    to a negative constant. *)
 
let check_cert (es:system) (cs:Real.t list) : bool =
   is_neg_const (mk_cert_poly cs es)
 
 (* A polynomial has a `good size` w.r.t. a given `x` iff the polynomial
    has one more term than `x`. Why? Because `x` represents bindings of
    `p`'s variables to values, and `p` will have coefficients for those
    variables *and* a constant term. *)
 
let rec good_poly_x_sizes (p:poly) (x:Real.t list) : bool =
   match p, x with
   | [_], [] -> true
   | _::p, _::x -> good_poly_x_sizes p x
   | _ -> false
 
 (* Now let's prove some lemmas. It's amazing how much `book-keeping` we
    have to do regarding good sizes and the like. *)
 
lemma eval_const_neg p x =
   is_neg_const p && good_poly_x_sizes p x
    ==>
   Real.((eval_poly p x) < 0.0)
 [@@by auto] [@@fc] [@@rw]
 
lemma eval_p_add p1 p2 x =
   good_poly_x_sizes p1 x && good_poly_x_sizes p2 x
   ==> eval_poly (p_add p1 p2) x = Real.(eval_poly p1 x + eval_poly p2 x)
 [@@by auto] [@@fc] [@@rw]
 
lemma good_poly_x_sizes_scale_invariance p cs x =
   good_poly_x_sizes (p_scale p cs) x = good_poly_x_sizes p x
 [@@by auto] [@@fc] [@@rw]
 
lemma good_poly_x_sizes_add_invariance p q x =
   good_poly_x_sizes p x && good_poly_x_sizes q x
   ==>
   good_poly_x_sizes (p_add p q) x
 [@@by auto] [@@rw] [@@fc]
 
lemma scale_empty_invariant p r =
   ((p_scale p r) [@trigger] = []) = (p = [])
 [@@by auto] [@@rw] [@@fc]
 
lemma eval_scale_pull p r x =
   eval_poly (p_scale p r) x = Real.(r *. eval_poly p x)
 [@@by auto] [@@rw]
 
lemma p_scale_p_add_pull p q r =
   p_add (p_scale p r) (p_scale q r) = p_scale (p_add p q) r
 [@@by auto] [@@rw]
 
lemma eval_zero_scale p c x =
   good_poly_x_sizes p x
   && eval_poly p x = 0.0
   ==>
   eval_poly (p_scale p c) x = 0.0
 [@@by auto] [@@rw] [@@fc]
 
lemma times_psd x y =
   Real.(x >= 0.0) && Real.(y >= 0.0)
   ==>
   Real.((x * y) [@trigger] >= 0.0)
 [@@by nonlin ()] [@@fc]
 
lemma times_pd x y =
   Real.(x > 0.0) && Real.(y > 0.0)
   ==>
   Real.((x * y) [@trigger] > 0.0)
 [@@by nonlin ()] [@@fc]
 
lemma times_neg x y =
   Real.(x < 0.0) && Real.(y > 0.0)
   ==>
   Real.((x * y) [@trigger] < 0.0)
 [@@by nonlin ()] [@@fc]
 
lemma times_neg_2 x y =
   Real.(x > 0.0) && Real.(y < 0.0)
   ==>
   Real.((x * y) [@trigger] < 0.0)
 [@@by nonlin ()] [@@fc]
 
lemma eval_non_neg_scale p c x =
   good_poly_x_sizes p x
   && Real.(eval_poly p x >= 0.0)
   && Real.(c >= 0.0)
   ==>
   Real.(eval_poly (p_scale p c) x >= 0.0)
 [@@by auto] [@@rw] [@@fc]
 
lemma eval_pos_scale p c x =
   good_poly_x_sizes p x
   && Real.(eval_poly p x > 0.0)
   && Real.(c > 0.0)
      ==>
      Real.(eval_poly (p_scale p c) x > 0.0)
 [@@by auto] [@@rw] [@@fc]
 
let rec well_formed es x =
   match es with
   | [] -> true
   | Eq p :: es -> good_poly_x_sizes p x && well_formed es x
   | Geq p :: es -> good_poly_x_sizes p x && well_formed es x
 
lemma sum_scale_well_formed cs es x =
   well_formed es x && es <> []
   ==>
   good_poly_x_sizes (sum_polys (scale_exprs cs es)) x
 [@@by auto] [@@rw] [@@fc]
 
lemma sum_polys_well_formed cs es x =
   well_formed es x && es <> []
   ==>
   good_poly_x_sizes (sum_polys (scale_exprs cs es)) x
 [@@by auto] [@@rw] [@@fc]
 
lemma mk_cert_poly_well_formed cs es x =
   well_formed es x && es <> []
   ==>
   good_poly_x_sizes (mk_cert_poly cs es) x
[@@by [%use sum_scale_well_formed cs es x] @> auto] [@@rw] [@@fc]

(* Needs lots of rewriting -- TODO: speed up with some focused rules! *)
lemma solution_is_not_neg cs es x =
   eval_system es x
   && well_formed es x
   && es <> []
   ==>
   Real.(eval_poly (mk_cert_poly cs es) x >= 0.0)
 [@@by auto]

lemma cert_is_neg cs es x =
   well_formed es x
   && check_cert es cs
   ==>
   eval_poly (mk_cert_poly cs es) x <. 0.
 [@@by [%use solution_is_not_neg cs es x]
    @> [%use eval_const_neg (mk_cert_poly cs es) x]
    @> auto]
 [@@disable mk_cert_poly, eval_const_neg]

 (* Final correctness theorem for our full Farkas proof checker!
 
    If our problem is well-formed and we have a valid algebraic
    (Farkas) certificate (i.e., the induced certificate polynomial
    normalizes to a negative constant), then there exists no real
    solutions for the problem!
 *)
 
theorem farkas_unsat (es:system) (cs:Real.t list) (x:Real.t list) =
   well_formed es x
   && check_cert es cs
   && es <> []
   ==>
   eval_system es x = false
[@@by [%use solution_is_not_neg cs es x]
@> [%use cert_is_neg cs es x] @> auto]
[@@fc]
