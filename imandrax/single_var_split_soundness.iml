[@@@import "util.iml"]
[@@@import "leaf_soundness.iml"]
[@@@import "arithmetic.iml"]
[@@@import "split.iml"]
[@@@import "constraint.iml"]

open Util
open Leaf_soundness
open Arithmetic
open Split 

lemma get_set_nth l n a =
    n >= 0 && n < List.length l
     ==>
     (List.nth n (set_nth l n a) = Some a)
[@@by auto] [@@rw]

lemma set_nth_unchanged l n m a =
  n <> m
  ==>
  List.nth m (set_nth l n a) = List.nth m l
[@@by auto] [@@rw]

lemma is_bounded_set_nth xs us ls k i =
    is_bounded xs us ls
    ==> 
    is_bounded xs us (set_nth ls i k) ||
    is_bounded xs (set_nth us i k) ls
[@@by auto]

lemma sat_update_bounds_helper tableau ubs lbs constraints x k i =
    sat tableau ubs lbs constraints x 
    ==>
    is_bounded x ubs (set_nth lbs i k) ||
    is_bounded x (set_nth ubs i k) lbs
[@@by auto]

lemma sat_update_bounds tableau ubs lbs constraints x k i = 
    sat tableau ubs lbs constraints x 
    ==>
    sat tableau ubs (set_nth lbs i k) constraints x ||
    sat tableau (set_nth ubs i k) lbs constraints x
    [@@by 
        [%use is_bounded_set_nth x lbs ubs k i]
        @> [%use sat_update_bounds_helper tableau ubs lbs constraints x k i]
        @> auto
    ]

lemma single_var_split_tightening (lbs: real list) (ubs: real list) (constraints: Constraint.t list)
        (left: Tightening.t list) (right: Tightening.t list) (i: int) (k: real) =
    match_split left right constraints = Single (i, k)
    ==>
    update_bounds_from_split lbs ubs (match_split left right constraints) = 
        (((set_nth lbs i k), ubs), (lbs, (set_nth ubs i k)))
    [@@by auto]

lemma rewrite_single_var_split_updated_bounds tableau (ubs: real list) 
        (lbs: real list) (constraints: Constraint.t list) (x: real list) 
        (i: int) (k: real) =
    let ((lbs_l, ubs_l), (lbs_r, ubs_r)) = update_bounds_from_split lbs ubs (Single (i, k)) in 
    (lbs_l = (set_nth lbs i k)) 
    && (ubs_l = ubs)
    && (lbs_r = lbs)
    && (ubs_r = (set_nth ubs i k))
    [@@by auto]

lemma soundness_valid_single_var_split tableau ubs lbs constraints x 
        (i: int) (k: real) =
    let (lbs_l, ubs_l), (lbs_r, ubs_r) = update_bounds_from_split lbs ubs (Single (i, k)) in
    sat tableau ubs lbs constraints x
    ==>
    sat tableau ubs_l lbs_l constraints x ||
    sat tableau ubs_r lbs_r constraints x
[@@by [%use rewrite_single_var_split_updated_bounds tableau ubs lbs constraints x i k]
    @> auto
]

lemma soundness_single_var_split_matching_helper tableau ubs lbs constraints x 
        (left: Tightening.t list) (right: Tightening.t list) (i: int) (k: real) =
    let (lbs_l, ubs_l), (lbs_r, ubs_r) = update_bounds_from_split lbs ubs (match_split left right constraints) in
    match_split left right constraints = Single (i, k) &&
    sat tableau ubs lbs constraints x
    ==>
    sat tableau ubs_l lbs_l constraints x ||
    sat tableau ubs_r lbs_r constraints x
    [@@by 
        [%use rewrite_single_var_split_updated_bounds tableau ubs lbs constraints x i k] 
        @> [%use single_var_split_tightening lbs ubs constraints left right i k] 
        @> auto]
    [@@disable Split.match_split]
    [@@fc]

lemma soundness_single_var_split_matching tableau ubs lbs constraints x 
        (left: Tightening.t list) (right: Tightening.t list) =
    let (lbs_l, ubs_l), (lbs_r, ubs_r) = update_bounds_from_split lbs ubs (match_split left right constraints) in
    match match_split left right constraints with
    | Single (i, k) -> 
        sat tableau ubs lbs constraints x
        ==>
        sat tableau ubs_l lbs_l constraints x ||
        sat tableau ubs_r lbs_r constraints x
    | _ -> true
    [@@by auto]
    [@@disable Split.update_bounds_from_split, Split.match_split]
 