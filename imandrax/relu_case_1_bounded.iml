[@@@import "relu.iml"]

open Relu

(* Auxilliary lemmas and definitions *)

(* set list element at given index to x *)
let rec set_nth (l: 'a list) (n: int) (x: 'a): 'a list =    
    if n < 0 then l
    else
    match l with
    | [] -> []
    | hd::tl ->
    if n = 0 then (
        x :: tl
    ) else (
        hd :: set_nth tl (n-1) x
    )

let rec bounded xs ls us = 
    match xs, ls, us with
    | x::xs, l::ls, u::us -> l <=. x && x <=. u && bounded xs ls us
    | _, _, _ -> true

let bounded_at_i i xs ls us =
    match List.nth i xs, List.nth i ls, List.nth i us with 
    | Some x, Some l, Some u -> l <=. x && x <=. u
    | _, _, _ -> true

lemma none_nth_oob l i =
    (i < 0 || (i >= List.length l))
    =
    (List.nth i l = None)
    [@@by auto] [@@rw] [@@fc]

lemma get_set_nth l n a =
    0 <= n && n < List.length l
    ==>
    List.nth n (set_nth l n a) = Some a
[@@by auto] [@@rw]

lemma set_nth_unchanged l n m a =
    n <> m
    ==>
    List.nth m (set_nth l n a) = List.nth m l
[@@by auto] [@@rw]

lemma bounded_implies_bounded_at_i_helper i xs ls us =
    bounded xs ls us
    ==>
    match List.nth i xs, List.nth i ls, List.nth i us with 
    | Some x, Some l, Some u -> l <=. x && x <=. u
    | _, _, _ -> true
    [@@by auto][@@fc]

lemma bounded_implies_bounded_at_i i xs ls us =
    bounded xs ls us
    ==>
    bounded_at_i i xs ls us 
    [@@by auto][@@fc]

lemma set_nth_unchanged_2vars (ls: real list) (i: int) (j: int) (k: int) (a: real) (b: real) =
    let ls' = set_nth (set_nth ls i a) j b in
    k <> i && k <> j
    ==>
    List.nth k ls' = List.nth k ls
[@@by auto]
[@@rw]

lemma set_nth_length_preservation l n x = 
    List.length (set_nth l n x) = List.length l
[@@by auto] [@@rw][@@fc]

lemma eval_relu_different_var xs f_var b_var a_var =
    eval_relu f_var b_var a_var xs
    ==> 
    (b_var <> f_var) && (b_var <> a_var) && (f_var <> a_var) 
[@@fc]

(* Proof case_1_bounded_at_i *)

lemma case_1_bounded_at_i_i1 xs ls us b_var f_var i =
    let ls' = set_nth ls f_var 0. in
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    0 <= i && (i < List.length xs) 
    && i <> f_var && i <> b_var
    && List.length xs = List.length ls 
    && List.length xs = List.length us
    && bounded xs ls us
    ==>
    List.nth i ls' = List.nth i ls
    && List.nth i us' = List.nth i us
[@@by [%use set_nth_unchanged ls i f_var 0.]
    @> [%use set_nth_unchanged_2vars us b_var f_var i 0. 0.]
    @> auto]
[@@fc]

lemma case_1_bounded_at_i_i xs ls us b_var f_var a_var i =
    let ls' = set_nth ls f_var 0. in
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    0 <= i && (i < List.length xs) 
    && i <> f_var && i <> b_var
    && List.length xs = List.length ls 
    && List.length xs = List.length us
    && bounded xs ls us
    ==>
    bounded_at_i i xs ls' us'
[@@by [%use bounded_implies_bounded_at_i i xs ls us]
    @> [%use case_1_bounded_at_i_i1 xs ls us b_var f_var i]
    @> auto]

let g i l = match List.nth i l with Some v -> v | None -> 0.0

lemma case_1_bounded_at_i_f1 xs ls us b_var f_var a_var i =
    let ls' = set_nth ls f_var 0. in
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    0 <= i && (i < List.length xs) 
    && i = f_var
    && List.length xs = List.length ls 
    && List.length xs = List.length us
    && bounded xs ls us
    ==>
    List.nth i ls' = Some 0.
    && List.nth i us' = Some 0.
[@@by [%use get_set_nth ls f_var 0.]
    @> [%use get_set_nth (set_nth us b_var 0.) f_var 0.]
    @> auto]


lemma case_1_bounded_at_i_f2 xs b_var f_var a_var =
    inactive_relu b_var f_var a_var xs
    ==>
    List.nth f_var xs = Some 0.
[@@by auto]

lemma case_1_bounded_at_i_f xs ls us b_var f_var a_var i =
    let ls' = set_nth ls f_var 0. in
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    0 <= i && (i < List.length xs) 
    && i = f_var
    && List.length xs = List.length ls 
    && List.length xs = List.length us
    && inactive_relu b_var f_var a_var xs
    && bounded xs ls us
    ==>
    bounded_at_i i xs ls' us'
[@@by [%use case_1_bounded_at_i_f1 xs ls us b_var f_var a_var i]
    @> [%use case_1_bounded_at_i_f2 xs b_var f_var a_var]
    @> auto]

lemma case_1_bounded_at_i_b1 xs ls us b_var f_var a_var i =
    let ls' = set_nth ls f_var 0. in
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    0 <= i && (i < List.length xs) 
    && i = b_var
    && List.length xs = List.length ls 
    && List.length xs = List.length us
    && bounded xs ls us
    && eval_relu b_var f_var a_var xs
    ==>
    g i ls = g i ls' 
    && g i us' = 0.
[@@by [%use eval_relu_different_var xs b_var f_var a_var]
    @> [%use set_nth_unchanged ls b_var f_var 0.]
    @> [%use get_set_nth (set_nth us b_var 0.) f_var 0.]
    @> auto]

lemma case_1_bounded_at_i_b2 xs b_var f_var a_var =
    inactive_relu b_var f_var a_var xs
    && 0 <= b_var && b_var < List.length xs 
    ==>
    g b_var xs <. 0.
[@@by auto]

lemma g_nth_bounded xs ls us i =
    0 <= i && (i < List.length xs)
    && g i ls <=. g i xs 
    && g i xs <=. g i us
    ==> 
    bounded_at_i i xs ls us
[@@by auto]

lemma nth_g_bounded_us xs ls us i =
    0 <= i && (i < List.length xs)
    && List.length xs = List.length ls 
    && List.length xs = List.length us
    && bounded_at_i i xs ls us
    ==> 
    g i xs <=. g i us
    (* match List.nth i xs, List.nth i us with 
    | Some x_i, Some u_i -> x_i <=. u_i
    | _ -> false *)
[@@by auto]

lemma nth_g_bounded_ls xs ls us i =
    0 <= i && (i < List.length xs)
    && List.length xs = List.length ls 
    && List.length xs = List.length us
    && bounded_at_i i xs ls us
    ==> 
    g i ls <=. g i xs
    (* match List.nth i xs, List.nth i ls with 
    | Some x_i, Some l_i -> l_i <=. x_i
    | _ -> false *)
[@@by auto]

lemma case_1_bounded_at_i_b3 xs ls us b_var f_var a_var i =
    let ls' = set_nth ls f_var 0. in
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    0 <= i && (i < List.length xs) 
    && i = b_var
    && List.length xs = List.length ls 
    && List.length xs = List.length us
    && inactive_relu b_var f_var a_var xs
    && bounded xs ls us
    ==>
    g i xs <=. g i us'
[@@by [%use case_1_bounded_at_i_b1 xs ls us b_var f_var a_var i]
    @> [%use case_1_bounded_at_i_b2 xs b_var f_var a_var]
    @> [%use nth_g_bounded_us xs (set_nth ls f_var 0.) (set_nth (set_nth us b_var 0.) f_var 0.) i]
    @> auto]

lemma case_1_bounded_at_i_b4 xs ls us b_var f_var a_var i =
    let ls' = set_nth ls f_var 0. in
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    0 <= i && (i < List.length xs) 
    && i = b_var
    && List.length xs = List.length ls 
    && List.length xs = List.length us
    && inactive_relu b_var f_var a_var xs
    && bounded xs ls us
    ==>
    g i ls <=. g i xs
[@@by [%use bounded_implies_bounded_at_i i xs ls us]
    @> [%use nth_g_bounded_ls xs ls us i]
    @> auto]

lemma case_1_bounded_at_i_b5 xs ls us b_var f_var a_var i =
    let ls' = set_nth ls f_var 0. in
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    0 <= i && (i < List.length xs) 
    && i = b_var
    && List.length xs = List.length ls 
    && List.length xs = List.length us
    && inactive_relu b_var f_var a_var xs
    && bounded xs ls us
    ==>
    g i ls <=. g i xs
[@@by [%use case_1_bounded_at_i_b4 xs ls us b_var f_var a_var i]
    @> [%use case_1_bounded_at_i_b1 xs ls us b_var f_var a_var i]
    @> auto]

lemma case_1_bounded_at_i_b xs ls us b_var f_var a_var i =
    let ls' = set_nth ls f_var 0. in
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    0 <= i && (i < List.length xs) 
    && i = b_var
    && List.length xs = List.length ls 
    && List.length xs = List.length us
    && inactive_relu b_var f_var a_var xs
    && bounded xs ls us
    ==>
    bounded_at_i i xs ls' us'
[@@by [%use case_1_bounded_at_i_b3 xs ls us b_var f_var a_var i]
    @> [%use case_1_bounded_at_i_b5 xs ls us b_var f_var a_var i]
    @> [%use g_nth_bounded xs (set_nth ls f_var 0.) (set_nth (set_nth us b_var 0.) f_var 0.) i]
    @> auto]

lemma case_1_bounded_at_i xs ls us b_var f_var a_var i =
    let ls' = set_nth ls f_var 0. in
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    0 <= i && (i < List.length xs) 
    && List.length xs = List.length ls 
    && List.length xs = List.length us
    && eval_relu b_var f_var a_var xs
    && bounded xs ls us
    && inactive_relu b_var f_var a_var xs
    ==>
    bounded_at_i i xs ls' us'
[@@by [%use case_1_bounded_at_i_i xs ls us b_var f_var a_var i]
    @> [%use case_1_bounded_at_i_f xs ls us b_var f_var a_var i]
    @> [%use case_1_bounded_at_i_b xs ls us b_var f_var a_var i]
    @> auto]
[@@fc]

(* Proof case_1_bounded_preservation *)

(* skolem function *)
let rec find_bad_bound xs ls us j =
    match xs, ls, us with
    | [], _, _ | _, [], _ | _, _, [] -> None
    | x :: xs, l :: ls, u :: us -> 
        if not (l <=. x && x <=. u) then Some j
        else find_bad_bound xs ls us (j + 1) 

(* relationship between find_bad and bounded *)
lemma no_witness_bounded xs ls us k =
    (find_bad_bound xs ls us k = None)
    = (bounded xs ls us)
    [@@by auto][@@fc]

lemma witness_index_bounded xs ls us k =
    match find_bad_bound xs ls us k with
    | None -> true
    | Some i -> i >= k && (i < List.length xs + k)
[@@by auto]

lemma witness_not_bounded_at_i xs ls us k =
  match find_bad_bound xs ls us k with
  | None -> true
  | Some i -> not (bounded_at_i (i-k) xs ls us)
[@@by auto][@@fc]
[@@timeout 50]

lemma case_1_witness_not_bounded xs ls us b_var f_var a_var =
    let ls' = set_nth ls f_var 0. in
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    List.length xs = List.length ls 
    && List.length xs = List.length us
    && eval_relu b_var f_var a_var xs
    && bounded xs ls us
    && inactive_relu b_var f_var a_var xs
    ==>
    match find_bad_bound xs ls' us' 0 with
    | None -> true
    | Some j -> not (bounded_at_i j xs ls' us')
    [@@by [%use witness_not_bounded_at_i xs (set_nth ls f_var 0.) (set_nth (set_nth us b_var 0.) f_var 0.) 0]
        @> auto]
    [@@disable set_nth, bounded]

lemma case_1_find_witness_helper xs ls us b_var f_var a_var j =
    let ls' = set_nth ls f_var 0. in
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    List.length xs = List.length ls 
    && List.length xs = List.length us
    && eval_relu b_var f_var a_var xs
    && bounded xs ls us
    && inactive_relu b_var f_var a_var xs
    && find_bad_bound xs ls' us' 0 = Some j
    ==>
    bounded_at_i j xs ls' us'
    [@@by [%use case_1_bounded_at_i xs ls us b_var f_var a_var j]
        @> auto]
    [@@disable set_nth, bounded]
    [@@fc]

(* to prove the lemma above the helper lemma above is automatically applied *)
lemma case_1_witness_bounded xs ls us b_var f_var a_var =
    let ls' = set_nth ls f_var 0. in
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    List.length xs = List.length ls 
    && List.length xs = List.length us
    && eval_relu b_var f_var a_var xs
    && bounded xs ls us
    && inactive_relu b_var f_var a_var xs
    ==>
    match find_bad_bound xs ls' us' 0 with
    | None -> true
    | Some j -> bounded_at_i j xs ls' us'
    [@@by auto]
    [@@disable set_nth, bounded]

(* we prove that there cannot be witnesses by contradiction *)
lemma case_1_no_witness xs ls us b_var f_var a_var =
    let ls' = set_nth ls f_var 0. in
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    List.length xs = List.length ls 
    && List.length xs = List.length us
    && eval_relu b_var f_var a_var xs
    && bounded xs ls us
    && inactive_relu b_var f_var a_var xs
    ==>
    find_bad_bound xs ls' us' 0 = None
    [@@by [%use case_1_witness_not_bounded xs ls us b_var f_var a_var]
    @> [%use case_1_witness_bounded xs ls us b_var f_var a_var]
    @> auto]
    [@@disable set_nth, bounded]

lemma case_1_updating_bounds_preserves_bounded xs ls us b_var f_var a_var =
    let ls' = set_nth ls f_var 0. in 
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    List.length xs = List.length ls 
    && List.length xs = List.length us
    && eval_relu b_var f_var a_var xs
    && bounded xs ls us
    && inactive_relu b_var f_var a_var xs
    ==>
    bounded xs ls' us'
[@@by [%use case_1_no_witness xs ls us b_var f_var a_var] 
@> [%use no_witness_bounded xs (set_nth ls f_var 0.) (set_nth (set_nth us b_var 0.) f_var 0.) 0]
@> auto]
[@@disable set_nth, bounded]
[@@fc]