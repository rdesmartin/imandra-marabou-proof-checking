(* GP Status: PROVED! *)

(* Check the soundness of the proof checker for the Leaf constructor of Proof Trees. *)

[@@@import "farkas.iml"]
[@@@import "certificate.iml"]
[@@@import "arithmetic.iml"]
[@@@import "constraint.iml"]
[@@@import "proof_tree.iml"]
[@@@import "split.iml"]
[@@@import "checker.iml"]
[@@@import "tightening.iml"]
[@@@import "mk_bound_poly.iml"]
[@@@import "bound_reduct_g.iml"]
[@@@import "bound_reduction.iml"]
[@@@import "well_formed_reduction.iml"]
[@@@import "tableau_reduction.iml"]
[@@@import "sat.iml"]
[@@@import "util.iml"]

open Util
open Constraint
open Proof_tree
open Split
open Certificate
open Checker
open Arithmetic
open Farkas
open Well_formed_reduction
open Tableau_reduction
open Bound_reduction
open Sat

lemma check_node_implies_check_cert tableau upper_bounds lower_bounds relu_constraints (proof_tree: Proof_tree.t) =
    match proof_tree with
    | Node _ -> true
    | (Leaf (contradiction, bound_lemmas)) ->
        let sys = mk_system_contradiction tableau upper_bounds lower_bounds in
        let certificate = mk_contradiction_certificate contradiction tableau upper_bounds lower_bounds in
        check_node tableau upper_bounds lower_bounds relu_constraints proof_tree
        ==> 
        check_cert sys certificate
[@@by auto]
[@@disable Farkas.check_cert, Checker.check_node, Checker.mk_contradiction_certificate, Certificate.mk_system_contradiction]
[@@fc]

lemma expand_well_formed_tableau_bounds tableau upper_bounds lower_bounds =
    well_formed_tableau_bounds tableau upper_bounds lower_bounds 
    ==>
    well_formed_tableau tableau &&
    upper_bounds <> [] && lower_bounds <> []
    && List.length upper_bounds = List.length (List.hd tableau)
    && List.length upper_bounds = List.length lower_bounds
[@@by auto]
[@@fc]

lemma check_cert_implies_not_eval_system tableau upper_bounds lower_bounds x proof_tree certificate sys =
    match proof_tree with
    | Node _ -> true
    | (Leaf (contradiction, bound_lemmas)) ->
        sys = mk_system_contradiction (mk_eq_constraints tableau) upper_bounds lower_bounds &&
        well_formed_tableau_bounds tableau upper_bounds lower_bounds &&
        List.length x = List.length (List.hd tableau) &&
        check_cert sys certificate
        ==>
        eval_system sys x = false
[@@by [%use contradiction_system_evaluation_false tableau upper_bounds lower_bounds sys x certificate]
   @> auto]
[@@disable Checker.well_formed_tableau_bounds]
[@@fc]

lemma destruct_mk_system tableau upper_bounds lower_bounds =
    mk_system_contradiction tableau upper_bounds lower_bounds = tableau @ (mk_geq_constraints upper_bounds lower_bounds)
[@@by auto] [@@rw] [@@fc]

(* Grant: I've added these key properties! Remember, go for the key properties, not their instances! *)

lemma eval_system_append_rw l1 l2 x =
  well_formed l1 x && well_formed l2 x
  ==>
  eval_system (l1 @ l2) x 
    = (eval_system l1 x && eval_system l2 x)
[@@by auto] [@@rw]

lemma well_formed_append_rw l1 l2 x =
  well_formed (l1 @ l2) x = 
  (well_formed l1 x && well_formed l2 x)
[@@by auto] [@@rw]

lemma soundness_eval_sys_composition tableau upper_bounds lower_bounds x =
    let sys = mk_system_contradiction (mk_eq_constraints tableau) upper_bounds lower_bounds in
    well_formed_tableau_bounds tableau upper_bounds lower_bounds &&
    List.length x = List.length (List.hd tableau) &&
    not (eval_system sys x)
    ==>
    not (eval_system (mk_eq_constraints tableau) x) || not (eval_system (mk_geq_constraints upper_bounds lower_bounds) x)
[@@by [%use destruct_mk_system (mk_eq_constraints tableau) upper_bounds lower_bounds]
   @> auto]
[@@disable Farkas.eval_system, Certificate.mk_system_contradiction, Checker.well_formed_tableau_bounds]
[@@fc]

lemma eval_system_unsat tableau upper_bounds lower_bounds x =
    well_formed_tableau_bounds tableau upper_bounds lower_bounds &&
    List.length x = List.length (List.hd tableau) &&
    (not (eval_system (mk_eq_constraints tableau) x) || not (eval_system (mk_geq_constraints upper_bounds lower_bounds) x))
    ==>
    not (is_in_kernel tableau x) || not (bounded x upper_bounds lower_bounds)
[@@by [%use tableau_reduction_soundness_contra tableau x]
   @> [%use mk_geq_constraints_reduction_soundness_contra upper_bounds lower_bounds x]
   @> [%use mk_geq_constraints_reduction_soundness upper_bounds lower_bounds x]
   @> auto]
[@@disable Arithmetic.bounded, List.length, Checker.well_formed_tableau_bounds, Arithmetic.is_in_kernel, 
           Farkas.eval_system, Certificate.mk_eq_constraints, Certificate.mk_geq_constraints]
[@@fc]

lemma eval_system_unsat_conjn tableau upper_bounds lower_bounds x =
    well_formed_tableau_bounds tableau upper_bounds lower_bounds &&
    List.length x = List.length (List.hd tableau) &&
    not ((eval_system (mk_eq_constraints tableau) x) && (eval_system (mk_geq_constraints upper_bounds lower_bounds) x))
    ==>
    not ((is_in_kernel tableau x) && (bounded x upper_bounds lower_bounds))
[@@by [%use eval_system_unsat tableau upper_bounds lower_bounds x]
   @> auto]
[@@disable Checker.well_formed_tableau_bounds, Arithmetic.bounded]
[@@fc]

lemma eval_system_unsat_contra tableau upper_bounds lower_bounds x =
    well_formed_tableau_bounds tableau upper_bounds lower_bounds &&
    List.length x = List.length (List.hd tableau) &&
    (is_in_kernel tableau x) && (bounded x upper_bounds lower_bounds)
    ==>
    (eval_system (mk_eq_constraints tableau) x) && (eval_system (mk_geq_constraints upper_bounds lower_bounds) x)
[@@by [%use eval_system_unsat_conjn tableau upper_bounds lower_bounds x]
   @> auto]
[@@fc]

lemma soundness_check_cert_composition tableau upper_bounds lower_bounds x =
    let sys = mk_system_contradiction (mk_eq_constraints tableau) upper_bounds lower_bounds in
    well_formed_tableau_bounds tableau upper_bounds lower_bounds &&
    List.length x = List.length (List.hd tableau) &&
    not (eval_system sys x)
    ==>
    not (is_in_kernel tableau x) || not (bounded x upper_bounds lower_bounds)
[@@by [%use soundness_eval_sys_composition tableau upper_bounds lower_bounds x]
   @> [%use eval_system_unsat_contra tableau upper_bounds lower_bounds x]
   @> auto]
[@@disable Certificate.mk_system_contradiction, Arithmetic.bounded,
    List.length, Checker.well_formed_tableau_bounds, Arithmetic.is_in_kernel, 
    Farkas.eval_system, Certificate.mk_geq_constraints, 
    Certificate.mk_eq_constraints, Certificate.mk_lower_bounds_constraints,
    List.append]
[@@fc]

lemma not_eval_system_implies_unsat tableau upper_bounds lower_bounds relu_constraints x =
    let sys = mk_system_contradiction (mk_eq_constraints tableau) upper_bounds lower_bounds in
    well_formed_tableau_bounds tableau upper_bounds lower_bounds &&
    List.length x = List.length (List.hd tableau) &&
    not (eval_system sys x)
    ==>
    unsat tableau upper_bounds lower_bounds relu_constraints x
[@@by [%use soundness_check_cert_composition tableau upper_bounds lower_bounds x]
   @> auto]
[@@disable Checker.well_formed_tableau_bounds, Certificate.mk_system_contradiction, Arithmetic.bounded]
[@@fc]

lemma sat_implies_eval_system tableau upper_bounds lower_bounds relu_constraints x =
    let sys = mk_system_contradiction (mk_eq_constraints tableau) upper_bounds lower_bounds in
    well_formed_tableau_bounds tableau upper_bounds lower_bounds &&
    List.length x = List.length (List.hd tableau) &&
    sat tableau upper_bounds lower_bounds relu_constraints x
    ==>
    eval_system sys x
[@@by [%use sat_not_unsat tableau upper_bounds lower_bounds relu_constraints x]
   @> [%use not_eval_system_implies_unsat tableau upper_bounds lower_bounds relu_constraints x]
   @> auto]
[@@disable Checker.well_formed_tableau_bounds, sat, Farkas.check_cert, Certificate.mk_system_contradiction]

lemma soundness_leaf tableau upper_bounds lower_bounds relu_constraints x proof_tree =
    match proof_tree with
    | Node _ -> true
    | (Leaf (contradiction, bound_lemmas)) ->
        well_formed_tableau_bounds tableau upper_bounds lower_bounds &&
        List.length x = List.length (List.hd tableau) &&
        check_node (mk_eq_constraints tableau) upper_bounds lower_bounds relu_constraints proof_tree
        ==> 
        unsat tableau upper_bounds lower_bounds relu_constraints x
[@@by [%use check_node_implies_check_cert (mk_eq_constraints tableau) upper_bounds lower_bounds relu_constraints proof_tree]
   @> [%use not_eval_system_implies_unsat tableau upper_bounds lower_bounds relu_constraints x]
   @> auto]
[@@disable Arithmetic.bounded, List.length, Checker.well_formed_tableau_bounds, Arithmetic.is_in_kernel, 
           Farkas.eval_system, Certificate.mk_eq_constraints, Certificate.mk_geq_constraints, Farkas.check_cert, 
           Certificate.mk_system_contradiction]
[@@fc] 