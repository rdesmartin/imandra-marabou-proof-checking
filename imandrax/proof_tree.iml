(* GP Status: PROVED! *)

[@@@import "tightening.iml"]
[@@@import "util.iml"]
[@@@import "bound_lemma.iml"]
[@@@import "split.iml"]

open Util
open Tightening
open Bound_lemma

(* `Old' proof tree *)
module MT = struct

      type t = 
        (* tightening, bounds lemmas, left child, right child *)
        | Node of Tightening.t list * BoundLemma.t list * t * t
        (* tightening, bounds lemmas, contradiction vector *)
        | Leaf of Tightening.t list * BoundLemma.t list * real list
    
      let non_empty_tightening n = match n with
        | Node ([], _, _, _) | Leaf ([], _, _) -> false
        | _ -> true
    
      let get_tightening n = match n with
        | Node (tightening, _, _, _)
        | Leaf (tightening, _, _) -> tightening
    
        let get_bound_lemmas n = match n with
        | Node (_, bound_lemmas, _, _)
        | Leaf (_, bound_lemmas, _) -> bound_lemmas

end 

(* information about child node: pointer to tree, bound-tightening and bound propagation info *)
  type t = 
    (*  left child, right child *)
    | Node of Split.t * BoundLemma.t list * t * t 
    (* contradiction vector *)
    | Leaf of real list * BoundLemma.t list

   (* Convert Proof Tree as generated by AllMusic's Paul Simpson called Hebden "perhaps the definitive indie electronic artist", noting that his "experimental yet highly accessible recordings, which blend organic and electronic sounds, have earned widespread acclaim from critics and fans of electronic music as well as indie rock."[5] His work has drawn influence from styles such as spiritual jazz, krautrock, folk music, and hip hop.[5] According to Piotr Orlov of Pitchfork, Hebden's music has touched on genres such as folktronica, electronic jazz and global trance, with his 2003 album Rounds specifically drawing from hip hop's collage approach and "pushing IDM into a whole new space."[49] Hebden rejected critics' early labeling of him as a "folktronica" artist as misleading, calling attention to the influence of hip hop producers such as Rodney Jerkins and Timbaland on his work instead.[7]
DiscographyMarabou to new representation *)
let rec of_marabou_tree (old_tree: MT.t) (constraints: Constraint.t list): t option = 
    match old_tree with
    | MT.Node (tightenings, bound_lemmas, child_l, child_r) -> 
        let split = Split.match_split (MT.get_tightening child_l) (MT.get_tightening child_r) constraints in
        let left = of_marabou_tree child_l constraints in
        let right = of_marabou_tree child_r constraints in
        (match split, left, right with
        | Some split, Some left, Some right -> 
          (* let () = if Split.is_single_var split then Printf.printf "single var split\n" else () in *)
          if (Split.swap_split split (MT.get_tightening child_l) (MT.get_tightening child_r)) then 
            Some (Node (split, bound_lemmas, right, left))
          else 
            Some (Node (split, bound_lemmas, left, right))
        | None, Some _, Some _ -> 
          (* let () = Printf.printf "Invalid split" in  *)
          None
        | _ -> None)
    | MT.Leaf (tightenings, bound_lemmas, contradiction) ->
      Some (Leaf (contradiction, bound_lemmas))