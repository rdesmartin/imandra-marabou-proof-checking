[@@@import "relu.iml"]
[@@@import "struct_index.iml"]

open Relu
open Struct_index

let rec zip3 l1 l2 l3 = 
    match l1, l2, l3 with
    | [], _, _ | _, [], _ | _, _, [] -> []
    | h1::t1, h2::t2, h3::t3 -> (h1, h2, h3) :: zip3 t1 t2 t3

lemma zip3_length l1 l2 l3 = 
    List.length l1 = List.length l2
    && List.length l1 = List.length l3
    ==>
    List.length (zip3 l1 l2 l3) = List.length l1
    [@@by induct ~on_fun:[%id zip3] ()
    @> auto]
    [@@rw]

let rec bounded xs ls us = 
    match xs, ls, us with
    | [], [], [] -> true
    | x::xs, l::ls, u::us -> l <=. x && x <=. u && bounded xs ls us
    (* | x::xs, l::ls, [] -> l <=. x && bounded xs ls us
    | x::xs, [], u::us -> x <=. u && bounded xs ls us *)
    | _, _, _ -> true

lemma aux_1 a b = (a <=. b) <==> (b >=. a)

lemma aux_2 a b = (a <. b) ==> (a <=. b)
[@@by auto]

lemma aux_3 a b = (a = b) || (a <> b)
[@@by auto]

(* set list element at given index to x *)
let rec set_nth (l: 'a list) (n: int) (x: 'a): 'a list =    
    if n < 0 then l
    else
    match l with
    | [] -> []
    | hd::tl ->
    if n = 0 then (
        x :: tl
    ) else (
        hd :: set_nth tl (n-1) x
    )

lemma bounded_nth xs ls us n = 
    bounded xs ls us 
    ==>
    match (List.nth n xs), (List.nth n ls), (List.nth n us) with
    | Some x, Some l, Some u -> l <=. x && x <=. u
    (* | Some x, Some l, _ -> l <=. x
    | Some x, _, Some u -> x <=. u *)
    | _, _, _ -> true
    [@@by auto]
    [@@fc]

lemma bounded_nth' xs ls us n x_n l_n u_n =
    List.nth n xs = Some x_n
    && List.nth n ls = Some l_n
    && List.nth n us = Some u_n
    && bounded xs ls us 
    ==>
    l_n <=. x_n && x_n <=. u_n
    [@@by auto]

let bounded_elem (x, l, u) =
    l <=. x && x <=. u

let bounded_at_i = holds_at_i bounded_elem

let bounded_below = holds_below bounded_elem

let bounded_all = holds_all bounded_elem

lemma holds_at_i_out_of_bounds p x i =
    i < 0 || i >= List.length x
    ==>
    holds_at_i p i x
[@@by auto]
[@@fc]

lemma bounded_at_i_out_of_bounds x i =
    i < 0 || i >= List.length x
    ==>
    bounded_at_i i x
[@@by [%use holds_at_i_out_of_bounds bounded_elem x i]
    @> auto]
[@@fc]
[@@timeout 5]

lemma bounded_all_eq_bounded xs ls us = 
    bounded xs ls us = bounded_all (zip3 xs ls us)
    [@@by auto]

lemma bounded_all_eq_bounded_below xs ls us =
    bounded_all (zip3 xs ls us) 
    = bounded_below (List.length (zip3 xs ls us) - 1) (zip3 xs ls us) 
[@@by [%use main bounded_elem (zip3 xs ls us) (List.length (zip3 xs ls us))]
@> auto]

lemma bounded_below_eq_bounded xs ls us =
    let i = List.length (zip3 xs ls us) - 1 in
    bounded_below i (zip3 xs ls us) = bounded xs ls us
[@@by [%use bounded_all_eq_bounded xs ls us]
    @> [%use bounded_all_eq_bounded_below xs ls us]
    @> auto]

lemma get_set_nth l n a =
    0 <= n && n < List.length l
    ==>
    List.nth n (set_nth l n a) = Some a
[@@by auto] [@@rw]

lemma set_nth_unchanged l n m a =
    n <> m
    ==>
    List.nth m (set_nth l n a) = List.nth m l
[@@by auto] [@@rw]

lemma set_nth_length_preservation l n x = 
    List.length (set_nth l n x) = List.length l
[@@by auto] [@@rw]

lemma relu_split xs b_var f_var a_var =
    eval_relu b_var f_var a_var xs
    ==> 
    match List.nth b_var xs, List.nth f_var xs, List.nth a_var xs with
    | Some b, Some f, Some a -> (b >=. 0. && 0. >=. a && a >=. 0.) 
        || (b <. 0. && 0. >=. f && f >=. 0.)
    | _, _, _ -> true 
    [@@by auto]
    [@@fc]

lemma eval_relu_different_indices b f aux (xs: real list) =
    eval_relu b f aux xs ==> (b <> f) && (b <> aux) && (f <> aux)
[@@fc]

lemma set_nth_unchanged_2vars (ls: real list) (i: int) (j: int) (k: int) (a: real) (b: real) =
    let ls' = set_nth (set_nth ls i a) j b in
    k <> i && k <> j
    ==>
    List.nth k ls' = List.nth k ls
[@@by auto]
[@@rw]

lemma get_set_nth_2vars (ls: real list) (i: int) (j: int) (a: real) (b: real) =
    let ls' = set_nth (set_nth ls i a) j b in
    0 <= i && i < List.length ls
    && i <> j
    ==>
    List.nth i ls' = Some a
[@@by auto]
[@@rw]

lemma valid_list_index l i x = 
    List.nth i l = Some x
    ==>
    0 <= i && i < List.length l
    [@@by auto]
    [@@fc]

(*
(* The three cases below were useful to discover the need for valid_list_index lemma and the exact formulation of get_set_nth_2vars, but
The proof of case1 goes through without them *)

lemma case_1_a xs ls us b_var f_var a_var x_b x_f x_a l_i u_i l_i' u_i' =
    let ls' = set_nth ls f_var 0. in
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    List.nth b_var xs = Some x_b
    && List.nth f_var xs = Some x_f
    && List.nth a_var xs = Some x_a
    && List.nth b_var ls = Some l_i
    && List.nth b_var us = Some u_i
    && List.nth b_var ls' = Some l_i'
    && List.nth b_var us' = Some u_i'
    && (b_var <> f_var) && (b_var <> a_var) && (f_var <> a_var)
    && x_f = relu x_b && x_a = x_f -. x_b
    && bounded xs ls us
    && x_b <=. 0. && x_f = 0.
    ==>
    l_i' <=. x_b && x_b <=. u_i'
[@@by 
    [%use set_nth_unchanged ls f_var b_var 0.]
    @> [%use get_set_nth_2vars us b_var f_var 0. 0.]
    @> [%use bounded_nth' xs ls us b_var x_b l_i u_i]
    @> auto]
[@@fc]

lemma case_1_b xs ls us b_var f_var a_var x_b x_f x_a l_i u_i l_i' u_i' =
    let ls' = set_nth ls f_var 0. in
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    List.nth b_var xs = Some x_b
    && List.nth f_var xs = Some x_f
    && List.nth a_var xs = Some x_a
    && List.nth f_var ls = Some l_i
    && List.nth f_var us = Some u_i
    && List.nth f_var ls' = Some l_i'
    && List.nth f_var us' = Some u_i'
    && (b_var <> f_var) 
    && (b_var <> a_var) && (f_var <> a_var)
    && x_f = relu x_b && x_a = x_f -. x_b
    && bounded xs ls us
    && x_b <=. 0. && x_f = 0.
    ==>
    l_i' <=. x_f && x_f <=. u_i'
[@@by [%use get_set_nth ls f_var 0.]
    @> [%use valid_list_index (set_nth us b_var 0.) f_var u_i']
    @> [%use get_set_nth (set_nth us b_var 0.) f_var 0.]
    @> [%use bounded_nth' xs ls us b_var x_b l_i u_i]
    @> auto]

lemma case_1_c xs ls us b_var f_var a_var x_b x_f x_a l_i u_i l_i' u_i' i x_i =
    let ls' = set_nth ls f_var 0. in
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    List.nth b_var xs = Some x_b
    && List.nth f_var xs = Some x_f
    && List.nth a_var xs = Some x_a
    && List.nth i ls = Some l_i
    && List.nth i us = Some u_i
    && List.nth i ls' = Some l_i'
    && List.nth i us' = Some u_i'
    && List.nth i xs = Some x_i
    && (b_var <> f_var) && (b_var <> a_var) && (f_var <> a_var)
    && x_f = relu x_b && x_a = x_f -. x_b
    && bounded xs ls us
    && x_b <=. 0. && x_f = 0.
    && i <> b_var && i <> f_var
    ==>
    l_i' <=. x_i && x_i <=. u_i'
[@@by [%use set_nth_unchanged ls f_var i 0.]
    @> [%use set_nth_unchanged_2vars us b_var f_var i 0. 0.]
    @> auto] 
*)

(* need to prove theorem on length of l_i' = length of l_i for the theorem to go through
lemma case_1_helper xs ls us b_var f_var a_var =
    let ls' = set_nth ls f_var 0. in
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    List.length ls' = List.length ls && List.length us' = List.length us
    [@@by auto]
    [@@fc] *)

(* for some reason we need to add the l_i and u_i preconditions, assuming that i <= length ls is not enough. *)
lemma case_1 xs ls us b_var f_var a_var x_b x_f x_a l_i u_i l_i' u_i' i x_i =
    let ls' = set_nth ls f_var 0. in
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    List.nth b_var xs = Some x_b
    && List.nth f_var xs = Some x_f
    && List.nth a_var xs = Some x_a
    && List.nth i ls = Some l_i
    && List.nth i us = Some u_i
    && List.nth i ls' = Some l_i'
    && List.nth i us' = Some u_i'
    && List.nth i xs = Some x_i
    && (b_var <> f_var) && (b_var <> a_var) && (f_var <> a_var)
    && x_f = relu x_b && x_a = x_f -. x_b
    && bounded xs ls us
    && x_b <=. 0. && x_f = 0.
    ==>
    l_i' <=. x_i && x_i <=. u_i'
[@@by 
    [%use set_nth_length_preservation (set_nth us b_var 0.) f_var 0.]
    @> [%use set_nth_unchanged ls f_var i 0.]
    @> [%use set_nth_unchanged_2vars us b_var f_var i 0. 0.]
    @> auto]
[@@disable set_nth]
[@@fc]

lemma bounded_at_i_rw xs ls us i x_i l_i u_i =
    List.nth i xs = Some x_i
    && List.nth i ls = Some l_i 
    && List.nth i us = Some u_i
    ==>
    bounded_at_i i (zip3 xs ls us) = (l_i <=. x_i && x_i <=. u_i)
[@@by auto]
[@@fc]

lemma case_1' xs ls us b_var f_var a_var x_b x_f x_a l_i u_i l_i' u_i' i x_i =
    let ls' = set_nth ls f_var 0. in
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    List.nth b_var xs = Some x_b
    && List.nth f_var xs = Some x_f
    && List.nth a_var xs = Some x_a
    && List.nth i ls = Some l_i
    && List.nth i us = Some u_i
    && List.nth i ls' = Some l_i'
    && List.nth i us' = Some u_i'
    && List.nth i xs = Some x_i
    && ((b_var <> f_var) && (b_var <> a_var) && (f_var <> a_var)
    && x_f = relu x_b && x_a = x_f -. x_b
    && bounded xs ls us
    && x_b <=. 0. && x_f = 0. [@trigger])
    ==>
    bounded_at_i i (zip3 xs ls' us')
[@@by [%use case_1 xs ls us b_var f_var a_var x_b x_f x_a l_i u_i l_i' u_i' i x_i]
    @> [%use bounded_at_i_rw xs (set_nth ls f_var 0.) (set_nth (set_nth us b_var 0.) f_var 0.) i x_i l_i' u_i']
    @> auto]
[@@disable bounded_at_i, zip3, set_nth]
[@@fc]

lemma case_1_bounded_at_i xs ls us b_var f_var a_var i =
    let ls' = set_nth ls f_var 0. in
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    0 <= i && (i < List.length xs) 
    && List.length xs = List.length ls 
    && List.length xs = List.length us
    && eval_relu b_var f_var a_var xs
    && bounded xs ls us
    && inactive_relu b_var f_var a_var xs
    ==>
    bounded_at_i i (zip3 xs ls' us') 
[@@by auto]
[@@fc]
[@@disable bounded_at_i, set_nth, zip3, bounded]

let rec induct_scheme_case_1 (xs: real list) (ls: real list) (us: real list) (b_var: int) (f_var: int) (a_var: int) (i: int) =
    if i < 0 then true
    else if i >= List.length xs then true
    else induct_scheme_case_1 xs ls us b_var f_var a_var (i - 1)

lemma bounded_below_head xlus i = 
    bounded_below (i - 1) xlus
    && bounded_at_i i xlus
    ==>
    bounded_below i xlus
    [@@fc]

lemma case_1_bounded_below xs ls us b_var f_var a_var i =
    let ls' = set_nth ls f_var 0. in 
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    0 <= i && i < List.length xs
    && List.length xs = List.length ls 
    && List.length xs = List.length us
    && eval_relu b_var f_var a_var xs
    && bounded xs ls us
    && inactive_relu b_var f_var a_var xs
    ==>
    bounded_below i (zip3 xs ls' us')
[@@by auto]
[@@disable bounded_at_i, set_nth, zip3, bounded, main]
[@@fc]

lemma case_1_bounded xs ls us b_var f_var a_var =
    let ls' = set_nth ls f_var 0. in
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    List.length xs = List.length ls 
    && List.length xs = List.length us
    && List.length xs = List.length ls'
    && List.length xs = List.length us'
    && eval_relu b_var f_var a_var xs
    && bounded xs ls us
    && inactive_relu b_var f_var a_var xs
    ==>
    bounded xs ls' us'
[@@by [%use case_1_bounded_below xs ls us b_var f_var a_var (List.length xs - 1)]
    @> [%use bounded_below_eq_bounded xs (set_nth ls f_var 0.) (set_nth (set_nth us b_var 0.) f_var 0.)]
    @>auto]
[@@disable bounded_at_i, set_nth, zip3, bounded, main]


(* Case 2 (should mirror the proof of Case 1)
lemma case_2_a xs ls us b_var f_var a_var x_b x_f x_a l_i u_i l_i' u_i' =
    let ls' = set_nth (set_nth us b_var 0.) a_var 0. in
    let us' = set_nth ls a_var 0. in
    List.nth b_var xs = Some x_b
    && List.nth f_var xs = Some x_f
    && List.nth a_var xs = Some x_a
    && List.nth b_var ls = Some l_i
    && List.nth b_var us = Some u_i
    && List.nth b_var ls' = Some l_i'
    && List.nth b_var us' = Some u_i'
    && (b_var <> f_var) && (b_var <> a_var) && (f_var <> a_var)
    && x_f = relu x_b && x_a = x_f -. x_b
    && bounded xs ls us
    && x_b >=. 0. && x_a = 0.
    ==>
    u_i' = u_i 
    (* l_i' <=. x_b && x_b <=. u_i' *)
[@@by [%use set_nth_unchanged us b_var a_var 0.]
    @> [%use get_set_nth_2vars ls b_var a_var 0. 0.]
    @> auto]
[@@timeout 10] *)

(* lemma case_2 xs ls us b_var f_var a_var x_b x_f x_a l_i u_i l_i' u_i' i x_i =
    let ls' = set_nth (set_nth us b_var 0.) a_var 0. in
    let us' = set_nth ls a_var 0. in
    List.nth b_var xs = Some x_b
    && List.nth f_var xs = Some x_f
    && List.nth a_var xs = Some x_a
    && List.nth i ls = Some l_i
    && List.nth i us = Some u_i
    && List.nth i ls' = Some l_i'
    && List.nth i us' = Some u_i'
    && List.nth i xs = Some x_i
    && (b_var <> f_var) && (b_var <> a_var) && (f_var <> a_var)
    && x_f = relu x_b && x_a = x_f -. x_b
    && bounded xs ls us
    && x_b >=. 0. && x_a = 0.
    ==>
    l_i' <=. x_i && x_i <=. u_i'
[@@by [%use set_nth_unchanged us a_var i 0.]
    @> [%use set_nth_unchanged_2vars ls b_var a_var i 0. 0.]
    @> auto]
[@@timeout 5] *)

lemma case_2_bounded xs ls us b_var f_var a_var =
    let ls' = set_nth (set_nth us b_var 0.) a_var 0. in
    let us' = set_nth ls a_var 0. in
    List.length xs = List.length ls 
    && List.length xs = List.length us
    && eval_relu b_var f_var a_var xs
    && bounded xs ls us
    && active_relu b_var f_var a_var xs
    ==>
    bounded xs ls' us'
[@@by auto]

lemma eval_relu_split b f a xs =
    eval_relu b f a xs
    ==> 
    (active_relu b f a xs) || (inactive_relu b f a xs)
[@@by auto]

lemma relu_split x_b x_f x_a = 
    (x_f = relu x_b) && (x_a = x_f -. x_b)
    ==> 
    (x_b >=. 0. && x_a = 0.) || (x_b <=. 0. && x_f = 0.)

lemma relu_split_soundness (xs: real list) (ls: real list) (us: real list) (b_var: int) (f_var: int) (a_var: int) 
        x_b x_f x_a l_i u_i =
    let ls' = set_nth ls f_var 0. in
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    let ls'' = set_nth (set_nth us b_var 0.) a_var 0. in
    let us'' = set_nth ls a_var 0. in
    List.length xs = List.length ls 
    && List.length xs = List.length us
    && eval_relu b_var f_var a_var xs
    && bounded xs ls us
    ==>
    (bounded xs ls' us')
    || (bounded xs ls'' us'')
[@@by [%use eval_relu_split b_var f_var a_var xs]
    @> [%use case_1_bounded xs ls us b_var f_var a_var]
    @> [%use case_2_bounded xs ls us b_var f_var a_var]
    @> auto]
[@@timeout 100]