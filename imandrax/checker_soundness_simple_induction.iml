(* GP Status: Proved! *)

(* Prove the soundness of the main proof-checking algorithm
    version with new version of splits checking, no bound tightening lemmas checking
*)

[@@@import "util.iml"]
[@@@import "farkas.iml"]
[@@@import "certificate.iml"]
[@@@import "arithmetic.iml"]
[@@@import "constraint.iml"]
[@@@import "proof_tree.iml"]
[@@@import "split.iml"]
[@@@import "checker.iml"]
[@@@import "tightening.iml"]
[@@@import "mk_bound_poly.iml"]
[@@@import "bound_reduct_g.iml"]
[@@@import "bound_reduction.iml"]
[@@@import "well_formed_reduction.iml"]
[@@@import "tableau_reduction.iml"]
[@@@import "tightening.iml"]
[@@@import "leaf_soundness.iml"]
[@@@import "node_soundness.iml"]
[@@@import "sat.iml"]

open Util
open Constraint
open Proof_tree
open Split
open Certificate
open Checker
open Arithmetic
open Bound_lemma
open Tightening
open Leaf_soundness
open Sat

lemma check_node_parent_imply_check_node_children tableau upper_bounds lower_bounds constraints tree =
    match tree with 
    | Leaf _ -> true
    | Node (split, b_l, left, right) ->
        let (lb_left, ub_left), (lb_right, ub_right) = update_bounds_from_split lower_bounds upper_bounds split in
        (check_node tableau upper_bounds lower_bounds constraints tree) [@trigger]
        ==>
        (check_node tableau ub_left lb_left constraints left) 
          && (check_node tableau ub_right lb_right constraints right)
[@@by auto]
[@@disable check_node, update_bounds_from_split]
[@@fc]

(* Imandra lemma 13, proven in split_soundness.iml *)
lemma soundness_leaf tableau upper_bounds lower_bounds relu_constraints x proof_tree =
    match proof_tree with
    | Node _ -> true
    | Leaf (contradiction, bound_lemmas) ->
        well_formed_tableau_bounds tableau upper_bounds lower_bounds &&
        List.length x = List.length (List.hd tableau) &&
        check_node (mk_eq_constraints tableau) upper_bounds lower_bounds relu_constraints proof_tree
        ==> 
        unsat tableau upper_bounds lower_bounds relu_constraints x
[@@by [%use Leaf_soundness.soundness_leaf  tableau upper_bounds lower_bounds relu_constraints x proof_tree]
    @> auto]

let rec check_all_splits t constraints =
    match t with 
    | Leaf _ -> true
    | Node (split, _, left, right) -> 
      check_split split constraints 
      && check_all_splits left constraints
      && check_all_splits right constraints

(* A helper function to get our target Node subterms for the instance we need of `well_formed_preservation`. *)

let split_of_node tree =
    match tree with
    | Node (split, _, _, _) -> split
    | Leaf _ -> Split.SingleSplit (0,0.0)

lemma unsat_children_imply_unsat_parent tableau upper_bounds lower_bounds constraints proof_tree x =
    match proof_tree with
    | Leaf _ -> true
    | Node (split, bound_lemmas, left, right) ->
        let (lb_left, ub_left), (lb_right, ub_right) = update_bounds_from_split lower_bounds upper_bounds split in
        List.length x = List.length lower_bounds 
        && List.length x = List.length upper_bounds
        && check_split split constraints
        && unsat tableau ub_left lb_left constraints x 
        && unsat tableau ub_right lb_right constraints x
        ==>
        unsat tableau upper_bounds lower_bounds constraints x
[@@by [%use Node_soundness.soundness_split_contra tableau upper_bounds lower_bounds constraints x (split_of_node proof_tree)]
   @> auto]

(* 
1. lemma check_node implies unsatisfiability
    (tableau: real list list) (upper_bounds: real list) (lower_bounds: real list) 
    (relu_constraints: Constraint.t list) (proof_tree: ProofTree.t) =
    check_node (mk_eq_constraints tableau) upper_bounds lower_bounds relu_constraints proof_tree
    ==>
    for all x, unsat tableau upper_bounds lower_bounds relu_constraints x

*)

lemma check_node_soundness_leaf (tableau: real list list) (upper_bounds: real list) (lower_bounds: real list) 
        (constraints: Constraint.t list) (tree: Proof_tree.t) (x: real list) =
    (* this is a check performed in check_proof_tree, outside of check_node *)
    well_formed_tableau_bounds tableau upper_bounds lower_bounds
    && List.length x = List.length (List.hd tableau)
    && check_all_splits tree constraints
    && check_node (mk_eq_constraints tableau) upper_bounds lower_bounds constraints tree
    ==>
    match tree with 
    | Leaf _ -> unsat tableau upper_bounds lower_bounds constraints x
    | Node _ -> true
    [@@by [%use soundness_leaf tableau upper_bounds lower_bounds constraints x tree]
       @> auto]
    [@@disable update_bounds, unsat, Checker.well_formed_tableau_bounds, List.length, Checker.check_node, check_split]
    [@@timeout 30]

lemma check_node_soundness_node (tableau: real list list) (upper_bounds: real list) (lower_bounds: real list) 
    (constraints: Constraint.t list) (tree: Proof_tree.t) (x: real list) =
(* this is a check performed in check_proof_tree, outside of check_node *)
  well_formed_tableau_bounds tableau upper_bounds lower_bounds
  && List.length x = List.length (List.hd tableau)
  && List.length x = List.length upper_bounds
  && List.length x = List.length lower_bounds
  && check_node (mk_eq_constraints tableau) upper_bounds lower_bounds constraints tree
  ==>
  match tree with 
  | Leaf _ -> true
  | Node (split, bound_lemmas, left, right)  -> 
    let (lb_left, ub_left), (lb_right, ub_right) = update_bounds_from_split lower_bounds upper_bounds split in
    check_split split constraints
    && unsat tableau ub_left lb_left constraints x 
    && unsat tableau ub_right lb_right constraints x
    ==> 
    unsat tableau upper_bounds lower_bounds constraints x
[@@by [%use check_node_parent_imply_check_node_children (mk_eq_constraints tableau) upper_bounds lower_bounds constraints tree]
   @> [%use unsat_children_imply_unsat_parent tableau upper_bounds lower_bounds constraints tree x]
   @> auto]

(* It's convenient to have both cases we want in induction wrapped up into a single lemma. *)
lemma check_node_soundness_full (tableau: real list list) (upper_bounds: real list) (lower_bounds: real list) 
   (constraints: Constraint.t list) (tree: Proof_tree.t) (x: real list) =
(* this is a check performed in check_proof_tree, outside of check_node *)
 well_formed_tableau_bounds tableau upper_bounds lower_bounds
 && List.length x = List.length (List.hd tableau)
 && check_all_splits tree constraints
 && check_node (mk_eq_constraints tableau) upper_bounds lower_bounds constraints tree
 ==>
 match tree with 
 | Leaf _ -> unsat tableau upper_bounds lower_bounds constraints x
 | Node (split, bound_lemmas, left, right)  -> 
   let (lb_left, ub_left), (lb_right, ub_right) = update_bounds_from_split lower_bounds upper_bounds split in
   unsat tableau ub_left lb_left constraints x 
   && unsat tableau ub_right lb_right constraints x
   ==> 
   unsat tableau upper_bounds lower_bounds constraints x
[@@by [%use check_node_soundness_leaf tableau upper_bounds lower_bounds constraints tree x]
   @> [%use check_node_soundness_node tableau upper_bounds lower_bounds constraints tree x]
   @> unroll 50]

(* This gives us the induction scheme we need for the main correctness theorem.
   We can also derive it from `check_node`. *)
let rec split_proof_tree_induction (tableau: real list list) (upper_bounds: real list) (lower_bounds: real list) 
        (constraints: Constraint.t list) (tree: Proof_tree.t) (x: real list) =
  match tree with
  | Leaf _ -> true
  | Node (split, bound_lemmas, left, right) ->
    let (lb_left, ub_left), (lb_right, ub_right) = update_bounds_from_split lower_bounds upper_bounds split in
    split_proof_tree_induction tableau ub_left lb_left constraints left x 
    && split_proof_tree_induction tableau ub_right lb_right constraints right x
[@@adm tree]

(* Important for our main induction to go through in `check_node_soundness`! *)
lemma well_formed_preservation (tableau: real list list) (upper_bounds: real list) (lower_bounds: real list) split =
  well_formed_tableau_bounds tableau upper_bounds lower_bounds
  ==>
  let (lb_left, ub_left), (lb_right, ub_right) = update_bounds_from_split lower_bounds upper_bounds split in
    well_formed_tableau_bounds tableau ub_left lb_left
    && well_formed_tableau_bounds tableau ub_right lb_right
[@@by auto]

let valid_proof (tableau: real list list) (upper_bounds: real list) (lower_bounds: real list) 
    (constraints: Constraint.t list) (tree: Proof_tree.t)
    =
    well_formed_tableau_bounds tableau upper_bounds lower_bounds
    && check_all_splits tree constraints
    && check_node (mk_eq_constraints tableau) upper_bounds lower_bounds constraints tree

let well_formed_vector tableau x =
    List.length x = List.length (List.hd tableau)

(* Our big finale! *)

theorem check_node_soundness (tableau: real list list) (upper_bounds: real list) (lower_bounds: real list) 
        (constraints: Constraint.t list) (tree: Proof_tree.t) (x: real list) =
    valid_proof tableau upper_bounds lower_bounds constraints tree
    && well_formed_vector tableau x
    ==>
    unsat tableau upper_bounds lower_bounds constraints x
[@@by [%expand "valid_proof"] 
   @> [%expand "well_formed_vector"] 
   @> induction ~id:[%id check_node] ()
      @>>| [%use check_node_soundness_full tableau upper_bounds lower_bounds constraints tree x]
             @> [%use check_node_parent_imply_check_node_children (mk_eq_constraints tableau) 
                      upper_bounds lower_bounds constraints tree]
             @> [%use well_formed_preservation tableau upper_bounds lower_bounds (split_of_node tree)]
             @> auto
    ]
[@@disable List.length, well_formed_tableau_bounds, check_node, mk_eq_constraints, unsat, set_nth, 
           update_bounds_from_split]
