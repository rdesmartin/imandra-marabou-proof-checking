[@@@import "util.iml"]
[@@@import "relu.iml"]
[@@@import "certificate.iml"]
[@@@import "proof_tree.iml"]
[@@@import "tightening.iml"]
[@@@import "split.iml"]
[@@@import "checker.iml"]
[@@@import "sat.iml"]
[@@@import "arithmetic.iml"]
[@@@import "constraint.iml"]
[@@@import "relu_split_soundness.iml"]
[@@@import "single_var_split_soundness.iml"]

open Util
open Relu
open Proof_tree
open Certificate
open Tightening
open Split
open Checker
open Sat
open Arithmetic
open Constraint
open Relu_split_soundness
open Single_var_split_soundness
open Farkas

lemma split_matching tableau upper_bounds lower_bounds constraints x split =
    let (lb_left, ub_left), (lb_right, ub_right) = update_bounds_from_split lower_bounds upper_bounds split in
    List.length x = List.length lower_bounds 
    && List.length x = List.length upper_bounds
    ==>
    match split with
    | ReluSplit (b, f, aux) -> 
        List.mem (Relu (b,f,aux)) constraints
        && sat tableau upper_bounds lower_bounds constraints x
        ==>
        sat tableau ub_left lb_left constraints x 
        || sat tableau ub_right lb_right constraints x
    | SingleSplit (i, k) -> 
        sat tableau upper_bounds lower_bounds constraints x
        ==>
        sat tableau ub_left lb_left constraints x 
        || sat tableau ub_right lb_right constraints x
    [@@by [%use soundness_relu_split_matching tableau upper_bounds lower_bounds constraints x split] 
        @> [%use soundness_single_var_split_matching tableau upper_bounds lower_bounds constraints x split]
        @> auto]

lemma soundness_split_helper tableau upper_bounds lower_bounds constraints x split =
    let (lb_left, ub_left), (lb_right, ub_right) = update_bounds_from_split lower_bounds upper_bounds split in
    List.length x = List.length lower_bounds 
    && List.length x = List.length upper_bounds
    && check_split split constraints
    ==>
    match split with
    | ReluSplit (b, f, aux) -> 
        sat tableau upper_bounds lower_bounds constraints x
        ==>
        sat tableau ub_left lb_left constraints x 
        || sat tableau ub_right lb_right constraints x
    | SingleSplit (i, k) -> 
        sat tableau upper_bounds lower_bounds constraints x
        ==>
        sat tableau ub_left lb_left constraints x 
        || sat tableau ub_right lb_right constraints x
    [@@by [%use split_matching tableau upper_bounds lower_bounds constraints x split] 
        @> auto]

lemma soundness_split tableau upper_bounds lower_bounds constraints x split =
    let (lb_left, ub_left), (lb_right, ub_right) = update_bounds_from_split lower_bounds upper_bounds split in
    List.length x = List.length lower_bounds 
    && List.length x = List.length upper_bounds
    && check_split split constraints
    && sat tableau upper_bounds lower_bounds constraints x
    ==>
    sat tableau ub_left lb_left constraints x 
    || sat tableau ub_right lb_right constraints x
[@@by [%use soundness_split_helper tableau upper_bounds lower_bounds constraints x split] 
    @> auto]
[@@fc]

lemma soundness_split_contra tableau upper_bounds lower_bounds constraints x split =
    let (lb_left, ub_left), (lb_right, ub_right) = update_bounds_from_split lower_bounds upper_bounds split in
    List.length x = List.length lower_bounds 
    && List.length x = List.length upper_bounds
    && check_split split constraints
    && not (sat tableau ub_left lb_left constraints x 
        && sat tableau ub_right lb_right constraints x)
    ==>
    not (sat tableau upper_bounds lower_bounds constraints x)
[@@by [%use soundness_split tableau upper_bounds lower_bounds constraints x split] 
    @> auto]
[@@fc]

lemma soundness_split_matching tableau upper_bounds lower_bounds constraints x proof_tree =
    match proof_tree with
    | Leaf _ -> true
    | Node (split, bound_lemmas, left, right) ->
        let (lb_left, ub_left), (lb_right, ub_right) = update_bounds_from_split lower_bounds upper_bounds split in
        List.length x = List.length lower_bounds 
        && List.length x = List.length upper_bounds
        && check_split split constraints
        && sat tableau upper_bounds lower_bounds constraints x
        ==>
        sat tableau ub_left lb_left constraints x 
        || sat tableau ub_right lb_right constraints x
        (* we want to apply soundness_split *)
    [@@by auto]
    [@@disable Split.update_bounds_from_split]
    [@@fc]

(* lemma soundness_node_sat tableau upper_bounds lower_bounds relu_constraints x proof_tree =
    match proof_tree with
    | Leaf _ -> true
    | Node (split, bound_lemmas, left, right) ->
        check_node (mk_eq_constraints tableau) upper_bounds lower_bounds relu_constraints proof_tree
        ==>
        unsat tableau upper_bounds lower_bounds relu_constraints x
    [@@by [%use unsat_not_sat tableau upper_bounds lower_bounds relu_constraints x]
       @> auto]
    [@@disable sat, Checker.check_node, Certificate.mk_eq_constraints]
    [@@fc] *)