(* 
    Proof that Relu splits are covering
*)

[@@@import "util.iml"]
[@@@import "relu.iml"]
[@@@import "relu_case_1_bounded.iml"]
[@@@import "relu_case_2_bounded.iml"]
[@@@import "tightening.iml"]
[@@@import "split.iml"]
[@@@import "sat.iml"]
[@@@import "arithmetic.iml"]
[@@@import "constraint.iml"]

open Util
open Relu
open Relu_case_1_bounded
open Relu_case_2_bounded
open Tightening
open Split
open Sat
open Arithmetic
open Constraint

lemma eval_relu_split b f a xs =
    eval_relu b f a xs
    ==> 
    (inactive_relu b f a xs) || (active_relu b f a xs)
[@@by auto]
[@@fc]

lemma relu_split x_b x_f x_a = 
    (x_f = relu x_b) && (x_a = x_f -. x_b)
    ==> 
    (x_b >=. 0. && x_a = 0.) || (x_b <=. 0. && x_f = 0.)

lemma relu_split_soundness_bounds (xs: real list) (ls: real list) (us: real list) (b_var: int) (f_var: int) (a_var: int) =
    let ls' = set_nth ls f_var 0. in
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    let ls'' = set_nth (set_nth ls b_var 0.) a_var 0. in
    let us'' = set_nth us a_var 0. in
    List.length xs = List.length ls 
    && List.length xs = List.length us
    && eval_relu b_var f_var a_var xs
    && bounded xs us ls
    && ((inactive_relu b_var f_var a_var xs) || (active_relu b_var f_var a_var xs))
    ==>
    (bounded xs us' ls')
    || (bounded xs us'' ls'')
[@@by
    [%use case_1_updating_bounds_preserves_bounded xs us ls b_var f_var a_var]
    @> [%use case_2_updating_bounds_preserves_bounded xs us ls b_var f_var a_var]
    @> auto
]
(* [@@by 
    [%cases (inactive_relu b_var f_var a_var xs), (active_relu b_var f_var a_var xs)]
    @>| [
        (intros
            @> [%use case_1_updating_bounds_preserves_bounded xs us ls b_var f_var a_var]
            @> auto);
        (intros
            @> [%use case_2_updating_bounds_preserves_bounded xs us ls b_var f_var a_var]
            @> simp
            @> auto);
        (intros @> auto)
    ]
] *)

lemma relu_split_soundness_bounds (xs: real list) (ls: real list) (us: real list) (b_var: int) (f_var: int) (a_var: int) =
    let ls' = set_nth ls f_var 0. in
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    let ls'' = set_nth (set_nth ls b_var 0.) a_var 0. in
    let us'' = set_nth us a_var 0. in
    List.length xs = List.length ls 
    && List.length xs = List.length us
    && eval_relu b_var f_var a_var xs
    && bounded xs us ls
    ==>
    (bounded xs us' ls')
    || (bounded xs us'' ls'')
[@@by [%use eval_relu_split b_var f_var a_var xs]
    @> [%use case_2_updating_bounds_preserves_bounded xs us ls b_var f_var a_var]
    @> [%use case_1_updating_bounds_preserves_bounded xs us ls b_var f_var a_var]
    @> auto]

lemma sat_new_bounds tableau us ls constraints xs us' ls' =
    sat tableau us ls constraints xs 
    && bounded xs us' ls'
    ==>
    sat tableau us' ls' constraints xs
[@@by auto]

lemma relu_split_soundness_sat (xs: real list) tableau (ls: real list) (us: real list) constraints (b_var: int) (f_var: int) (a_var: int) =
    let ls' = set_nth ls f_var 0. in
    let us' = set_nth (set_nth us b_var 0.) f_var 0. in
    let ls'' = set_nth (set_nth ls b_var 0.) a_var 0. in
    let us'' = set_nth us a_var 0. in
    List.length xs = List.length ls 
    && List.length xs = List.length us
    && eval_relu b_var f_var a_var xs
    && sat tableau us ls constraints xs
    ==>
    sat tableau us' ls' constraints xs
    || sat tableau us'' ls'' constraints xs
[@@by [%use relu_split_soundness_bounds xs ls us b_var f_var a_var]
    @> auto]

lemma sat_check_constraints tableau us ls constraints xs =
    sat tableau us ls constraints xs 
    ==>
    check_relu_constraints constraints xs
[@@fc]

lemma mem_not_empty l x =
    List.mem x l ==> l <> []
    [@@fc]

lemma mem_tail l x =
    l <> [] && List.mem x (List.tl l) 
    ==> 
    List.mem x l
[@@fc]

lemma check_constraints_ith constraints xs b f aux i = 
    check_relu_constraints constraints xs
    && List.nth i constraints = Some (Relu (b,f,aux))
    ==> 
    eval_relu b f aux xs
[@@by auto]
[@@timeout 120]

lemma check_constraints_eval_relu constraints xs b f aux =
    check_relu_constraints constraints xs
    && List.mem (Relu (b,f,aux)) constraints
    ==> 
    eval_relu b f aux xs
[@@by auto]
[@@disable eval_relu]
[@@fc]

lemma sat_eval_relu tableau us ls constraints xs b f aux =
    List.length xs = List.length ls 
    && List.length xs = List.length us
    && List.mem (Relu (b,f,aux)) constraints
    && sat tableau us ls constraints xs
    ==>
    eval_relu b f aux xs
[@@by [%use sat_check_constraints tableau us ls constraints xs]
@> [%use check_constraints_eval_relu constraints xs b f aux]
@> intros
@> auto]
    
lemma update_bounds_from_relu_split_expand ls us b f aux split =
    let (lb_left, ub_left), (lb_right, ub_right) = update_bounds_from_split ls us split in
    split = ReluSplit (b,f,aux)
    ==>
    lb_left = set_nth ls f 0.
    && ub_left = set_nth (set_nth us b 0.) f 0.
    && lb_right = set_nth (set_nth ls b 0.) aux 0.
    && ub_right = set_nth us aux 0.
    [@@fc]

theorem soundness_relu_split tableau us ls constraints xs b f aux split =
    let (lb_left, ub_left), (lb_right, ub_right) = update_bounds_from_split ls us split in
    List.length xs = List.length ls 
    && List.length xs = List.length us
    && List.mem (Relu (b,f,aux)) constraints
    && split = ReluSplit (b, f, aux)
    && sat tableau us ls constraints xs
    ==>
    sat tableau ub_left lb_left constraints xs 
    || sat tableau ub_right lb_right constraints xs
[@@by [%use sat_eval_relu tableau us ls constraints xs b f aux]
    @> [%use relu_split_soundness_sat xs tableau ls us constraints b f aux] 
    @> intros
    @> auto
    ]
[@@disable sat, update_bounds_from_split, List.length, List.mem]
[@@fc]

lemma soundness_relu_split_matching_helper split = 
    match split with
    | ReluSplit (b,f,aux) -> split = ReluSplit (b,f,aux)
    | _ -> true
[@@by auto]

theorem soundness_relu_split_matching tableau us ls constraints xs split =
    let (lb_left, ub_left), (lb_right, ub_right) = update_bounds_from_split ls us split in
    List.length xs = List.length ls 
    && List.length xs = List.length us
    ==>
    match split with 
    | ReluSplit (b,f,aux) ->
        List.mem (Relu (b,f,aux)) constraints
        && sat tableau us ls constraints xs
        ==>
        (sat tableau ub_left lb_left constraints xs 
        || sat tableau ub_right lb_right constraints xs)
    | _ -> true
[@@by [%use soundness_relu_split_matching_helper split]
    @> auto]
[@@disable sat, update_bounds_from_split]