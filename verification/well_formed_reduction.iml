open Utils
open Arithmetic.LinArith
open Constraint
open Proof_tree
open Checker
open Check_splits
open Certificate
open Farkas_lemma
open Tightening
open Bound_lemma

(** 
=========== well_formed_mk_eq_constraints ================================
 *)
lemma good_poly_length_append row =
    good_poly_length (List.append row [0.]) row
    [@@auto]
    [@@rw][@@fc]

lemma equal_row_length_empty_row row tableau =
    tableau <> [] && List.hd tableau = [] &&
    row <> []
    ==>
    equal_rows_length tableau (List.length row) = false
    [@@auto]
    [@@rw][@@fc]

lemma wf_tableau_all_rows_eq_size tableau r = 
    well_formed_tableau tableau &&
    List.mem r tableau
    ==> 
    List.length r = List.length (List.hd tableau)
[@@auto]
[@@fc]

lemma good_poly_length_constraints_same_len tableau system =
    well_formed_tableau tableau &&
    system = mk_eq_constraints tableau
    ==> 
    good_poly_length (extract_poly (List.hd system)) (List.hd tableau)
    [@@auto]
    [@@fc]

lemma wf_tableau_non_empty_row tableau r = 
    well_formed_tableau tableau &&
    List.mem r tableau
    ==> 
    r <> []
[@@auto]
[@@fc]

lemma mk_eq_constraints_non_empty_invariant tableau = 
    tableau <> [] 
    ==> 
    mk_eq_constraints tableau <> []
    [@@rw][@@fc]

lemma equal_rows_length_tl_invariant tableau1 tableau2 =
    tableau2 <> [] &&
    equal_rows_length tableau2 (List.length tableau1)
    ==>
    List.length (List.hd tableau2) = List.length tableau1
    [@@auto]
    [@@fc]

lemma good_poly_length_transitivity p x1 x2 = 
    List.length x1 = List.length x2 
    && good_poly_length p x1 
    ==> 
    good_poly_length p x2
    [@@auto]
    [@@fc]

lemma well_formed_system_eq_lists_invariant tableau l1 l2 =
    List.length l1 = List.length l2 &&
    well_formed_tableau tableau &&
    well_formed (mk_eq_constraints tableau) l1
    ==>
    well_formed (mk_eq_constraints tableau) l2
    [@@auto]
    [@@fc]

lemma well_formed_tableau_prepend_invariant tableau row =
    well_formed_tableau tableau && 
    well_formed_tableau [row] && 
    List.length (List.hd tableau) = List.length row
    ==> 
    well_formed_tableau (row :: tableau)
    [@@disable List.map, List.length, Utils.all]
    [@@auto]

let rec well_formed_eq_induction_scheme tableau system =
    match tableau, system with
    | ht::tt, hs::ts -> well_formed_eq_induction_scheme tt ts
    | [], [] -> true
    | _, _ -> true

lemma well_formed_mk_eq_constraints tableau system =
    well_formed_tableau tableau &&
    system = mk_eq_constraints tableau
    ==>
    well_formed system (List.hd tableau)
[@@disable List.map, List.length, Utils.all]
[@@induct functional well_formed_eq_induction_scheme]



(** 
=========== well_formed_mk_geq_constraints ================================
 *)

 lemma good_poly_length_helper p x =
    List.length p = (List.length x) + 1
    ==>
    good_poly_length p x
    [@@auto]
    [@@rw][@@fc]


lemma mk_bound_poly_size p size i coeff bound =
    size >= 0 &&
    p = mk_bound_poly size i coeff bound
    ==> 
    List.length p = size + 1
    [@@auto]
    [@@fc]

let is_geq p = match p with
    | Geq _ -> true
    | _ -> false
    
lemma geq_mk_bound_poly_length_invariant size i coeff bound =
    size >= 0 
    ==>
    List.length (extract_poly (Geq (mk_bound_poly size i coeff bound))) = size + 1
    [@@auto]
    [@@fc]

lemma mk_upper_bounds_constraints_geq e i upper_bounds x = 
    List.mem e (mk_upper_bounds_constraints (List.length x) i upper_bounds)
    ==>
    is_geq e
    [@@auto]
    [@@fc]

lemma good_upper_bound_poly_length_mk_bound_poly i upper_bounds x = 
    x <> [] && upper_bounds <> [] 
    ==> 
    good_poly_length (mk_bound_poly (List.length x) i (-1.) (List.hd upper_bounds)) x
    [@@auto]
    [@@fc]

lemma mk_upper_bounds_constraints_length_invariant e sys size i upper_bounds =
    e = List.hd sys &&
    size >= 0 && upper_bounds <> [] &&
    sys = mk_upper_bounds_constraints size i upper_bounds
    ==> 
    List.length (extract_poly e) = size + 1
    [@@auto]
    [@@apply geq_mk_bound_poly_length_invariant size i (-1.) (List.hd upper_bounds)]
    [@@disable List.length]
    [@@fc]

lemma mk_upper_bounds_constraints_good_poly_length e sys i upper_bounds x =
    e = List.hd sys &&
    x <> [] && upper_bounds <> [] &&
    sys = mk_upper_bounds_constraints (List.length x) i upper_bounds
    ==> 
    good_poly_length (extract_poly e) x
    [@@auto]
    [@@apply mk_upper_bounds_constraints_length_invariant e sys (List.length x) i upper_bounds]
    [@@disable List.length]
    [@@fc]

lemma mk_upper_bounds_constraints_empty_invariant size i = 
    mk_upper_bounds_constraints size i [] = []
    [@@rw][@@fc]

lemma mk_upper_bounds_constraints_empty_invariant_inverse size i upper_bounds = 
    mk_upper_bounds_constraints size i upper_bounds = []
    ==> 
    upper_bounds = []
    [@@fc]

lemma mk_upper_bounds_constraints_nonempty_invariant size i upper_bounds = 
    upper_bounds <> []
    ==>
    mk_upper_bounds_constraints size i upper_bounds <> []
    [@@rw][@@fc]

lemma mk_upper_bounds_constraints_disjunction sys i upper_bounds x =
    x <> [] && upper_bounds <> [] &&
    sys = mk_upper_bounds_constraints (List.length x) i (List.tl upper_bounds)
    ==>
    sys = [] || well_formed sys x
    [@@auto]
    [@@fc]

lemma mk_upper_bounds_constraints_well_formed sys i upper_bounds x = 
    x <> [] && upper_bounds <> [] &&
    sys = mk_upper_bounds_constraints (List.length x) i upper_bounds
    ==>  
    well_formed sys x
    [@@auto]
    [@@induct functional Certificate.mk_upper_bounds_constraints]
    [@@disable List.length, Farkas_lemma.extract_poly]




(* =============== mk_lower_bound_constraints_well_formed =============== *)

lemma mk_lower_bounds_constraints_geq e i lower_bounds x = 
    List.mem e (mk_lower_bounds_constraints (List.length x) i lower_bounds)
    ==>
    is_geq e
    [@@auto]
    [@@fc]

lemma good_lower_bound_poly_length_mk_bound_poly i lower_bounds x = 
    x <> [] && lower_bounds <> [] 
    ==> 
    good_poly_length (mk_bound_poly (List.length x) i (1.) (-. (List.hd lower_bounds))) x
    [@@auto]
    [@@fc]

lemma mk_lower_bounds_constraints_length_invariant e sys size i lower_bounds =
    e = List.hd sys &&
    size >= 0 && lower_bounds <> [] &&
    sys = mk_lower_bounds_constraints size i lower_bounds
    ==> 
    List.length (extract_poly e) = size + 1
    [@@auto]
    [@@apply geq_mk_bound_poly_length_invariant size i (1.) (List.hd lower_bounds)]
    [@@disable List.length]
    [@@fc]

lemma mk_lower_bounds_constraints_good_poly_length e sys i lower_bounds x =
    e = List.hd sys &&
    x <> [] && lower_bounds <> [] &&
    sys = mk_lower_bounds_constraints (List.length x) i lower_bounds
    ==> 
    good_poly_length (extract_poly e) x
    [@@auto]
    [@@apply mk_lower_bounds_constraints_length_invariant e sys (List.length x) i lower_bounds]
    [@@disable List.length]
    [@@fc]

lemma mk_lower_bounds_constraints_empty_invariant size i = 
    mk_lower_bounds_constraints size i [] = []
    [@@rw][@@fc]

lemma mk_lower_bounds_constraints_empty_invariant_inverse size i lower_bounds = 
    mk_lower_bounds_constraints size i lower_bounds = []
    ==> 
    lower_bounds = []
    [@@fc]

lemma mk_lower_bounds_constraints_nonempty_invariant size i lower_bounds = 
    lower_bounds <> []
    ==>
    mk_lower_bounds_constraints size i lower_bounds <> []
    [@@rw][@@fc]


lemma mk_lower_bounds_constraints_disjunction sys i lower_bounds x =
    x <> [] && lower_bounds <> [] &&
    sys = mk_lower_bounds_constraints (List.length x) i (List.tl lower_bounds)
    ==>
    sys = [] || well_formed sys x
    [@@auto]
    [@@fc]

lemma mk_lower_bounds_constraints_disjunction_gpl sys i lower_bounds x =
    x <> [] && lower_bounds <> [] &&
    sys = mk_lower_bounds_constraints (List.length x) (i + 1) (List.tl lower_bounds)
    ==>
    sys = [] || good_poly_length (mk_bound_poly (List.length x) i 1. (-. (List.hd lower_bounds))) x
    [@@auto]
    [@@fc]

lemma mk_lower_bounds_constraints_disjunction_gpl' i lower_bounds x =
    x <> []
    ==>
    mk_lower_bounds_constraints (List.length x) (i + 1) (List.tl lower_bounds) = [] || 
    good_poly_length (mk_bound_poly (List.length x) i 1. (-. (List.hd lower_bounds))) x
    [@@auto]
    [@@fc]

lemma mk_lower_bounds_constraints_disjunction' i lower_bounds x =
    x <> []
    ==>
    good_poly_length (mk_bound_poly (List.length x) i 1. (-. (List.hd lower_bounds))) x ||
    List.tl lower_bounds <> []
    [@@auto]
    [@@fc]

lemma mk_lower_bounds_constraints_well_formed sys i lower_bounds x = 
    x <> [] && lower_bounds <> [] &&
    sys = mk_lower_bounds_constraints (List.length x) i lower_bounds
    ==>  
    well_formed sys x
    [@@auto]
    [@@apply mk_lower_bounds_constraints_disjunction_gpl' i lower_bounds x,
    mk_lower_bounds_constraints_disjunction' i lower_bounds x]
    [@@induct functional Certificate.mk_lower_bounds_constraints]
    [@@disable List.length, Farkas_lemma.extract_poly]


(* =================  well_formed_mk_geq_constraints =================== *)

lemma well_formed_concat_invariant s1 s2 x =
    well_formed s1 x &&
    well_formed s2 x 
    ==>
    well_formed (s1 @ s2) x
[@@auto]
[@@fc]


lemma well_formed_mk_geq_constraints upper_bounds lower_bounds u_constraints l_constraints =
    u_constraints = mk_upper_bounds_constraints (List.length upper_bounds) 0 upper_bounds &&
    l_constraints = mk_lower_bounds_constraints (List.length upper_bounds) 0 lower_bounds &&
    upper_bounds <> [] && lower_bounds <> [] && 
    List.length upper_bounds = List.length lower_bounds
    ==>
    well_formed (u_constraints @ l_constraints) upper_bounds
[@@auto]
[@@apply mk_upper_bounds_constraints_well_formed u_constraints 0 upper_bounds upper_bounds,
    mk_lower_bounds_constraints_well_formed l_constraints 0 lower_bounds upper_bounds,
    well_formed_concat_invariant u_constraints l_constraints upper_bounds
    ]
[@@disable Certificate.mk_lower_bounds_constraints, Certificate.mk_upper_bounds_constraints]
[@@fc]


lemma well_formed_mk_geq_constraints' upper_bounds lower_bounds u_constraints l_constraints =
    u_constraints = mk_upper_bounds_constraints (List.length upper_bounds) 0 upper_bounds &&
    l_constraints = mk_lower_bounds_constraints (List.length upper_bounds) 0 lower_bounds &&
    upper_bounds <> [] && lower_bounds <> [] && 
    List.length upper_bounds = List.length lower_bounds
    ==>
    well_formed (mk_geq_constraints upper_bounds lower_bounds) upper_bounds
[@@auto]
[@@apply well_formed_mk_geq_constraints upper_bounds lower_bounds u_constraints l_constraints]
[@@disable Certificate.mk_lower_bounds_constraints, Certificate.mk_upper_bounds_constraints]
[@@fc]

lemma well_formed_mk_geq_constraints'' upper_bounds lower_bounds sys =
    sys = mk_geq_constraints upper_bounds lower_bounds &&
    upper_bounds <> [] && lower_bounds <> [] && 
    List.length upper_bounds = List.length lower_bounds
    ==>
    well_formed sys upper_bounds
[@@auto]
[@@apply well_formed_mk_geq_constraints' upper_bounds lower_bounds 
        (mk_upper_bounds_constraints (List.length upper_bounds) 0 upper_bounds) 
        (mk_lower_bounds_constraints (List.length upper_bounds) 0 lower_bounds)
        ]
[@@disable Certificate.mk_lower_bounds_constraints, 
Certificate.mk_upper_bounds_constraints, Certificate.mk_geq_constraints]
[@@fc]


(* 
============= well_formed_mk_system_contradiction ========================
 *)



(** Linear combination size invariant *)

lemma good_poly_length_size p x =
    good_poly_length p x
    ==> 
    (List.length p) - 1 = List.length x
    [@@auto]
    [@@fc]

lemma well_formed_good_poly_length system e x =
    well_formed system x && List.mem e system
    ==> 
    good_poly_length (extract_poly e) x
    [@@auto]
    [@@fc]

lemma well_formed_same_lengths system l1 l2 =
    List.length l1 = List.length l2 &&
    well_formed system l1
    ==>
    well_formed system l2
    [@@auto]
    [@@fc]

lemma well_formed_conversion tableau upper_bounds lower_bounds eq_constraints geq_constraints =
    well_formed_tableau tableau &&
    upper_bounds <> [] && lower_bounds <> [] && 
    List.length upper_bounds = List.length (List.hd tableau) &&
    List.length upper_bounds = List.length lower_bounds &&
    eq_constraints = mk_eq_constraints tableau &&
    geq_constraints = mk_geq_constraints upper_bounds lower_bounds
    ==>
    well_formed (eq_constraints @ geq_constraints) (List.hd tableau)
[@@auto]
[@@apply well_formed_mk_geq_constraints'' upper_bounds lower_bounds geq_constraints,
         well_formed_mk_eq_constraints tableau eq_constraints,
         well_formed_concat_invariant eq_constraints geq_constraints (List.hd tableau)]
[@@disable Certificate.mk_eq_constraints, Certificate.mk_geq_constraints, Arithmetic.LinArith.compute_combination, List.hd, Farkas_lemma.good_poly_length]
[@@fc]

lemma well_formed_conversion' tableau upper_bounds lower_bounds system =
    well_formed_tableau tableau &&
    upper_bounds <> [] && lower_bounds <> [] &&
    List.length upper_bounds = List.length (List.hd tableau) &&
    List.length upper_bounds = List.length lower_bounds &&
    system = mk_system_contradiction (mk_eq_constraints tableau) upper_bounds lower_bounds
    ==>
    well_formed system (List.hd tableau)
[@@auto]
[@@apply well_formed_conversion tableau upper_bounds lower_bounds (mk_eq_constraints tableau) (mk_geq_constraints upper_bounds lower_bounds)]
[@@disable Certificate.mk_geq_constraints]
[@@fc]

lemma well_formed_conversion'' tableau upper_bounds lower_bounds system x =
    well_formed_tableau tableau &&
    upper_bounds <> [] && lower_bounds <> [] &&
    List.length upper_bounds = List.length (List.hd tableau) &&
    List.length upper_bounds = List.length lower_bounds &&
    system = mk_system_contradiction (mk_eq_constraints tableau) upper_bounds lower_bounds &&
    List.length x = List.length (List.hd tableau)
    ==>
    well_formed system x
[@@auto]
[@@apply well_formed_conversion' tableau upper_bounds lower_bounds system,
    well_formed_same_lengths system (List.hd tableau) x]
[@@disable Certificate.mk_geq_constraints]
[@@fc]


lemma contradiction_system_evaluation_false_helper tableau upper_bounds lower_bounds system x c =
    well_formed_tableau tableau &&
    List.length x = List.length (List.hd tableau) &&
    upper_bounds <> [] && lower_bounds <> [] &&
    List.length upper_bounds = List.length (List.hd tableau) &&
    List.length upper_bounds = List.length lower_bounds &&
    system = mk_system_contradiction (mk_eq_constraints tableau) upper_bounds lower_bounds &&
    check_cert system c
    ==>
    well_formed system x
    [@@auto]
    [@@apply well_formed_conversion'' tableau upper_bounds lower_bounds system x]
    [@@disable Certificate.mk_system_contradiction, Farkas_lemma.check_cert]
    [@@fc]

axiom farkas_lemma s x c =
    well_formed s x &&
    check_cert s c
    ==>
    eval_system s x = false
    [@@fc]


lemma contradiction_system_evaluation_false  tableau upper_bounds lower_bounds system x c =
    well_formed_tableau tableau &&
    List.length x = List.length (List.hd tableau) &&
    upper_bounds <> [] && lower_bounds <> [] &&
    List.length upper_bounds = List.length (List.hd tableau) &&
    List.length upper_bounds = List.length lower_bounds &&
    system = mk_system_contradiction (mk_eq_constraints tableau) upper_bounds lower_bounds &&
    check_cert system c
    ==>
    eval_system system x = false
    [@@auto]
    [@@apply contradiction_system_evaluation_false_helper tableau upper_bounds lower_bounds system x c,
        farkas_lemma system x c]
    [@@disable Certificate.mk_system_contradiction, Farkas_lemma.check_cert]
    [@@fc]