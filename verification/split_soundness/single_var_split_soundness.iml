open Utils
open Farkas_lemma
open Constraint
open Proof_tree
open Check_splits
open Certificate
open Checker
open Arithmetic
open Bound_lemma
open Tightening

axiom sat_tableau_to_poly_sys tableau ubs lbs constraints x =
    sat tableau ubs lbs constraints x
    ==> 
    eval_system (mk_system_contradiction (mk_eq_constraints tableau) ubs lbs) x
    [@@fc]

axiom sound_split_poly_system tableau ubs lbs x  
        (left: Tightening.t list) (right: Tightening.t list) =
    let ub_left = Tightening.update_bounds' ubs left Utils.UPPER in
    let lb_left = Tightening.update_bounds' lbs left Utils.LOWER in
    let ub_right = Tightening.update_bounds' ubs right Utils.UPPER in
    let lb_right = Tightening.update_bounds' lbs right Utils.LOWER in
    check_single_var_split left right &&
    eval_system (mk_system_contradiction (mk_eq_constraints tableau) ubs lbs) x
    ==>
    eval_system (mk_system_contradiction (mk_eq_constraints tableau) ub_left lb_left) x ||
        eval_system (mk_system_contradiction (mk_eq_constraints tableau) ub_right lb_right) x
    [@@fc]

axiom eval_system_implies_sat tableau ubs lbs constraints x =
    List.length x = List.length ubs &&
    eval_system (mk_system_contradiction (mk_eq_constraints tableau) ubs lbs) x &&
    Constraint.check_relu_constraints constraints x 
    ==>
    sat tableau ubs lbs constraints x
    [@@fc]


lemma eval_system_implies_sat_disjunction tableau ubl lbl ubr lbr constraints x =
    List.length x = List.length ubr &&
    List.length x = List.length ubl &&
    Constraint.check_relu_constraints constraints x &&
    (eval_system (mk_system_contradiction (mk_eq_constraints tableau) ubl lbl) x ||
    eval_system (mk_system_contradiction (mk_eq_constraints tableau) ubr lbr) x)
    ==>
    sat tableau ubl lbl constraints x ||
    sat tableau ubr lbr constraints x 
    [@@auto]
    [@@apply eval_system_implies_sat tableau ubl lbl constraints x]
    [@@apply eval_system_implies_sat tableau ubr lbr constraints x]
    [@@fc]

lemma soundness_valid_single_var_split tableau ubs lbs constraints x 
        (left: Tightening.t list) (right: Tightening.t list) =
    let ub_left = Tightening.update_bounds' ubs left Utils.UPPER in
    let lb_left = Tightening.update_bounds' lbs left Utils.LOWER in
    let ub_right = Tightening.update_bounds' ubs right Utils.UPPER in
    let lb_right = Tightening.update_bounds' lbs right Utils.LOWER in
    List.length x = List.length ub_left &&
    List.length x = List.length ub_right &&
    List.length x = List.length ubs &&
    check_single_var_split left right &&
    Constraint.check_relu_constraints constraints x &&
    sat tableau ubs lbs constraints x
    ==>
    sat tableau ub_left lb_left constraints x ||
    sat tableau ub_right lb_right constraints x
    [@@auto]
    [@@apply sat_tableau_to_poly_sys tableau ubs lbs constraints x]
    [@@apply sound_split_poly_system tableau ubs lbs x left right]
    [@@apply eval_system_implies_sat_disjunction tableau 
        (Tightening.update_bounds' ubs left Utils.UPPER) 
        (Tightening.update_bounds' lbs left Utils.LOWER ) 
        (Tightening.update_bounds' ubs right Utils.UPPER) 
        (Tightening.update_bounds' lbs right Utils.LOWER ) 
        constraints x]
    [@@disable List.length, Arithmetic.is_in_kernel, Arithmetic.is_upper_bounded, 
        sat, Tightening.Tightening.update_bounds', Certificate.mk_system_contradiction, 
        Check_splits.check_single_var_split]
    [@@fc]