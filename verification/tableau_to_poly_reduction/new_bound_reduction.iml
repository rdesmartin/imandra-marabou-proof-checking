open Farkas_lemma
open Tightening
open Utils
open Certificate
open Arithmetic

let eval_all s xs = 
    holds_all (fun e -> eval_exp e xs) s

let eval_at_i i s xs =
    holds_at_i (fun e -> eval_exp e xs) i s

let eval_below i s xs = 
    holds_below (fun e -> eval_exp e xs) i s

let well_formed_bounds xs bs = 
    List.length xs = List.length bs

(* ========= Upper bounds ================== *)

lemma parallel_nth_generalized ubs i ub size = 
    size >= List.length ubs && List.nth i ubs = Some ub
    ==>
    List.nth i (mk_upper_bounds_constraints size ubs) = 
        Some (Geq (mk_bound_poly size (size - List.length ubs + i) (-1.) ub))
[@@auto][@@fc]

axiom upper_bounded_implies_eval_ith ubs xs (i: int) =
    well_formed_bounds xs ubs &&
    is_upper_bounded xs ubs
    ==> 
    eval_at_i i (mk_upper_bounds_constraints (List.length ubs) ubs) xs 
    [@@fc]

lemma upper_bounded_implies_eval_below ubs xs =
    well_formed_bounds xs ubs &&
    is_upper_bounded xs ubs [@trigger]
    ==> 
    eval_below (List.length ubs) (mk_upper_bounds_constraints (List.length ubs) ubs) xs
[@@auto]
[@@apply upper_bounded_implies_eval_ith ubs xs (List.length ubs)]
[@@disable eval_at_i, Certificate.mk_upper_bounds_constraints]
[@@fc]

lemma mk_upper_bounds_constraints_length size ubs =
    List.length (mk_upper_bounds_constraints size ubs) = List.length ubs
[@@auto]
[@@fc]

lemma eval_below_implies_eval_all ubs xs =
    eval_below (List.length ubs) (mk_upper_bounds_constraints (List.length ubs) ubs) xs [@trigger]
    ==>
    eval_all (mk_upper_bounds_constraints (List.length ubs) ubs) xs
[@@auto]
[@@disable Certificate.mk_upper_bounds_constraints, holds_below, holds_all]
[@@fc]

lemma eval_all_eval_sys_eq s xs =
    eval_all s xs [@trigger]
    ==>
    eval_system s xs
[@@auto]
[@@fc]

lemma eval_below_implies_eval_system ubs xs =
    eval_below (List.length ubs) (mk_upper_bounds_constraints (List.length ubs) ubs) xs [@trigger]
    ==>
    eval_system (mk_upper_bounds_constraints (List.length ubs) ubs) xs
[@@auto]
[@@apply eval_all_eval_sys_eq (mk_upper_bounds_constraints (List.length ubs) ubs) xs]
[@@disable eval_below, eval_all]
[@@fc]

lemma mk_upper_bounds_constraints_eval ubs xs = 
    is_upper_bounded xs ubs
    ==> 
    eval_system (mk_upper_bounds_constraints (List.length ubs) ubs) xs
    [@@auto]
    [@@disable eval_below, eval_all]