let rec nth n l =
    match l with 
    | [] -> []
    | hd::tl -> if n <= 0 
                then hd
                else 
                nth (n - 1) tl

(* step function for induction *)
verify (fun tableau y c ->
    let n = List.length y in
    n >= List.length tableau
    ==> 
    compute_combination (y @ [c]) tableau = list_add (compute_combination y (tableau)) (list_mult (nth n tableau) c))
[@@auto]
[@@disable List.length]

(* verify (fun tableau x y -> 
    dot_product x (Utils.repeat 0. (List.length x)) = 0. &&
    null_product tableau x
    ==>
    dot_product x (Checker.compute_combination' y tableau (Utils.repeat 0. (List.length x))) = 0.
)
[@@auto] *)

(* verify (fun tableau x y ->
    null_product tableau x &&
    List.length x = List.length (List.hd tableau)
    ==> 
    dot_product x (compute_combination y tableau) = 0.
)
[@@auto]    
[@@disable List.length, null_product, dot_product, Utils.repeat]
[@@apply dot_product_zero x] *)
