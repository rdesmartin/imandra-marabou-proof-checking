(* 
  Proof that the satisfiability of the system representation implies the 
  satisfiability of the matrix representation of a linear query:
  If an assignment x satisfies the system representation of the 
  query (tableau, ubs, lbs), then x also satisfies the
  matrix representation.
*)

open Utils
open Constraint
open Certificate
open Arithmetic
open Farkas_lemma

(* =============== Eq constraints ================================ *)

lemma eval_tableau_row_poly row x = 
    eval_poly (row @ [0.]) x = dot_product row x
    [@@auto]
    [@@rw]

lemma mk_eq_constraints_implies_is_in_kernel tableau x =
    eval_system (mk_eq_constraints tableau) x
    ==>
    is_in_kernel tableau x
    [@@auto]
    [@@fc]

lemma full_system_implies_eq_constraints tableau ubs lbs x =
    eval_system (mk_system_contradiction (mk_eq_constraints tableau) ubs lbs) x
    ==>
    eval_system (mk_eq_constraints tableau) x
    [@@auto]
    [@@fc]

lemma eval_system_implies_is_in_kernel tableau ubs lbs x =
    eval_system (mk_system_contradiction (mk_eq_constraints tableau) ubs lbs) x
    ==>
    is_in_kernel tableau x
    [@@auto]
    [@@disable Certificate.mk_system_contradiction]
    [@@fc]

(* ================ proved in mk_[upper|lower]_bounds_proof.iml =============================== *)

axiom mk_lb_constraints_implies_is_upper_bounded lbs x =
    eval_system (mk_lower_bounds_constraints (List.length lbs) lbs) x
    ==>
    is_upper_bounded lbs x
    [@@fc]

axiom mk_ub_constraints_implies_is_upper_bounded ubs x =
    List.length x = List.length ubs &&
    eval_system (mk_upper_bounds_constraints (List.length x) ubs) x
    ==>
    is_upper_bounded x ubs
[@@fc] 

(* ================ Geq constraints =============================== *)

lemma eval_system_concat_destruct s1 s2 x =
    eval_system (s1 @ s2) x
    ==>
    eval_system s1 x && eval_system s2 x
    [@@disable Farkas_lemma.eval_exp]
    [@@auto]
    [@@fc]

lemma mk_geq_constraints_rw ubs lbs = 
      let size = List.length ubs in
      mk_geq_constraints ubs lbs = 
        (mk_upper_bounds_constraints size ubs) @ (mk_lower_bounds_constraints size lbs)
[@@rw]

lemma eval_mk_geq_constraint_destruct ubs lbs x = 
    let size = List.length ubs in
    eval_system (mk_geq_constraints ubs lbs) x
    ==>
    eval_system (mk_upper_bounds_constraints size ubs) x && 
        eval_system (mk_lower_bounds_constraints size lbs) x
[@@auto]
[@@disable Farkas_lemma.eval_system]
[@@fc]

lemma mk_geq_constraints_implies_correct_ub ubs lbs x =
    let size = List.length ubs in
    List.length x = List.length ubs &&    
    List.length lbs = List.length ubs &&
    eval_system ((mk_upper_bounds_constraints size ubs) @ (mk_lower_bounds_constraints size lbs)) x
    ==>
    is_upper_bounded x ubs 
    [@@auto]
    [@@apply eval_mk_geq_constraint_destruct ubs lbs x]
    [@@apply mk_ub_constraints_implies_is_upper_bounded ubs x]
    [@@disable Farkas_lemma.eval_system, Certificate.mk_geq_constraints]
    [@@fc]

lemma mk_geq_constraints_implies_correct_lb ubs lbs x =
    let size = List.length ubs in
    List.length x = List.length ubs &&    
    List.length lbs = List.length ubs &&
    eval_system ((mk_upper_bounds_constraints size ubs) @ (mk_lower_bounds_constraints size lbs)) x
    ==>
    is_upper_bounded lbs x 
    [@@auto]
    [@@apply eval_mk_geq_constraint_destruct ubs lbs x]
    [@@apply mk_lb_constraints_implies_is_upper_bounded ubs x]
    [@@disable Farkas_lemma.eval_system, Certificate.mk_geq_constraints]
    [@@fc]

lemma mk_geq_constraints_implies_correct_ub_lb ubs lbs x =
    List.length x = List.length ubs &&    
    List.length lbs = List.length ubs &&
    eval_system (mk_geq_constraints ubs lbs) x
    ==>
    is_upper_bounded x ubs && is_upper_bounded lbs x 
    [@@auto]
    [@@disable Farkas_lemma.eval_system, Certificate.mk_geq_constraints]
    [@@fc]

lemma full_system_implies_geq_constraints tableau ubs lbs x =
    eval_system (mk_system_contradiction (mk_eq_constraints tableau) ubs lbs) x
    ==>
    eval_system (mk_geq_constraints ubs lbs) x
[@@auto]
[@@apply eval_system_concat_destruct (mk_eq_constraints tableau) (mk_geq_constraints ubs lbs) x]
[@@disable Certificate.mk_geq_constraints]
[@@fc]

lemma is_bounded_rw ubs lbs x =
    (is_upper_bounded x ubs && is_upper_bounded lbs x) 
    =
    is_bounded x ubs lbs

lemma eval_system_implies_is_bounded tableau ubs lbs x =
    List.length x = List.length ubs &&    
    List.length lbs = List.length ubs &&
    eval_system (mk_system_contradiction (mk_eq_constraints tableau) ubs lbs) x
    ==>
    is_bounded x ubs lbs
    [@@auto]
    [@@apply full_system_implies_geq_constraints tableau ubs lbs x]
    [@@apply mk_geq_constraints_implies_correct_ub_lb ubs lbs x]
    [@@apply is_bounded_rw ubs lbs x]
    [@@disable Arithmetic.is_bounded, Certificate.mk_system_contradiction, Certificate.mk_geq_constraints]
    [@@fc]

(* ================= Main theorem ===================== *)

theorem eval_system_implies_sat_tableau tableau ubs lbs relu_constraints x =
    List.length x = List.length ubs &&    
    List.length lbs = List.length ubs &&
    eval_system (mk_system_contradiction (mk_eq_constraints tableau) ubs lbs) x
    ==>
    is_in_kernel tableau x &&
    is_bounded x ubs lbs 
    [@@auto]
    [@@apply eval_system_implies_is_bounded tableau ubs lbs x]
    [@@apply eval_system_implies_is_in_kernel tableau ubs lbs x]
    [@@disable Farkas_lemma.eval_system, Certificate.mk_system_contradiction]
