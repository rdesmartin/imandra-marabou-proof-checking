(* Correctness of a simple Farkas lemma proof checker in 1 variable *)
(* G.Passmore, Imandra *)

(* Here's the main idea illustrated with a concrete example:

   Consider the constraint system S

    X-2>=0
    X-1=0

   with certificate (-1,1).

   This certificate proves infeasibility of S because

    (-1)(X-1) + (X-2) = -1 by polynomial arithmetic,

   while assuming X is a solution to the constraint
   system implies that

    (-1)(X-1) + (X-2) >= 0.
          |       |
         =0   +  >=0

   Thus assuming X is a solution implies -1 >= 0,
   which is a contradiction.

 TODO: Generalize to more variables and systems with more than 2 constraints!
*)

type poly = Real.t * Real.t

type system = poly list

type cert = Real.t list

let eval_poly ((a,b):poly) (x:Real.t) : Real.t =
  Real.(a * x + b)

(* let all (l: bool list) = List.fold_left (fun x y -> x && y) true l *)

let eval_system (s:system) (x:Real.t) : bool =
  all @@ List.map (fun poly -> eval_poly poly x = 0.) s

let p_add ((a,b):poly) ((c,d):poly) : poly =
  Real.(a+c, b+d)

let p_scale ((a,b):poly) (r:Real.t) : poly =
  Real.(r*a, r*b)


let rec zip (x: 'a list) (y: 'b list): ('a * 'b) list =
  match x, y with
  | [], _ | _, [] -> []
  | hx::tx, hy::ty -> (hx, hy) :: (zip tx ty)

let check_cert (cert:cert) (s:system) : bool =
  let scaled_system = List.map (fun (p, r) -> p_scale p r) (zip s cert) in
  let sum = List.fold_left p_add (0., 0.) scaled_system in
  sum = (0.0, -1.0)

(* The system's constraints imply that sum_i cert_i * p_i is zero. 
   For now we take this as an assumption 
   *)
axiom sat_system_implies_zero_combination_of_rows (cert: cert) (s: system) x =
  eval_system s x
  ==>
  let scaled_system = List.map (fun (p, r) -> p_scale p r) (zip s cert) in
  let sum = List.fold_left p_add (0., 0.) scaled_system in
  eval_poly sum x = 0.

lemma sat_system_implies_not_neg_combination_of_rows (cert: cert) (s: system) x =
  eval_system s x
  ==>
  let scaled_system = List.map (fun (p, r) -> p_scale p r) (zip s cert) in
  let sum = List.fold_left p_add (0., 0.) scaled_system in
  not (eval_poly sum x = -1.)
  [@@auto][@@apply sat_system_implies_zero_combination_of_rows cert s x]

lemma neg_combination_of_rows_implies_unsat_system (cert: cert) (s: system) x =
  let scaled_system = List.map (fun (p, r) -> p_scale p r) (zip s cert) in
  let sum = List.fold_left p_add (0., 0.) scaled_system in
  eval_poly sum x = -1. && s <> [] && cert <> [] 
  ==> 
  not (eval_system s x)
  [@@auto][@@apply sat_system_implies_not_neg_combination_of_rows cert s x]

lemma check_cert_implies_negative_combination_of_rows (cert: cert) (s: system) x =
  check_cert cert s
  ==>
  let scaled_system = List.map (fun (p, r) -> p_scale p r) (zip s cert) in
  let sum = List.fold_left p_add (0., 0.) scaled_system in
  eval_poly sum x = -1.0

lemma check_cert_correct cert s x =
  List.length cert = List.length s &&
  check_cert cert s
  ==>
  eval_system s x = false
  [@@auto]
  [@@apply check_cert_implies_negative_combination_of_rows cert s x, 
           neg_combination_of_rows_implies_unsat_system cert s x]


(* 
  Nice work, @Remi Desmartin! This is good progress. Let me give some comments

  1. Induction (as Imandra does it) is classical reasoning (which also happens to be constructively valid) so don't worry, you're always in classical logic in Imandra :slightly_smiling_face: !
  2. You'll definitely need induction for things like sat_system_implies_zero_combination_of_rows
  3. It's good to be thinking about induction as you write your functions, in the sense of thinking 'what properties will this functions maintain as it is executed?' -- this can help you structure things so that the key properties are made manifest and are not obfuscated by unnecessary recursions (edited) 
  For example, this:
  let all (l: bool list) = List.fold_left (fun x y -> x && y) true l

  let eval_system (s:system) (x:Real.t) : bool =
    all @@ List.map (fun poly -> eval_poly poly x = 0.) s

  has what I would call 'extra recursion' -- the key thing you're trying to say is that 'if eval_system s x holds, then every polynomial constraint in s is satisfied by x '. Currently you're saying that in an indirect way with multiple recursions which are doing different things. This property is more clearly maintained (and easier to then reason about) if you say instead:
  let rec eval_system ps x = 
    match ps with
    | [] -> true
    | p :: ps -> eval_poly p x = 0.0 
                  && eval_system ps x
  Now, whenever you know eval_system ps x it will suggest an induction scheme that recurses into ps and tells us that, e.g., eval_poly p x = 0.0 for any p obtainable by recursing into ps, and it will give the full recursive case as the IH,. This is the kind of 'direct knowledge' we want. (edited) 
  Compare that with what we'd 'know' if we saw your definition - we'd just know something about a fold over a map, and we'd then have to derive by induction the fact that this implies what we care about
  4. For repeated 'inline' recursions you have in multiple definitions like this let sum = List.fold_left p_add (0., 0.) scaled_system it's best to put them in their own function so that they're named and you can prove good rules about them (e.g., let rec sum ... = ...) (edited) 
  5. For something as deep as check_cert_correct (especially with so many subsidiary definitions involving so much recursion) you'll definitely need to prove some lemmas by induction!
  6. For the same reason as point 3 above, in check_cert (and otherwise) I'd get rid of your uses of zip and do recursion on cert and s together. You want to be able to inductively assume  the property you care about holds for a system (and cert) of a given length, and then use that assumption to prove that it holds for a larger one. Bringing zip in just obfuscates things. It's amazing how this also manifests with a 'bad smell' that there is unnecessary allocation going on (the intermediate zipped list!)
 *)