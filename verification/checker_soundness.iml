open Utils
open Constraint
open Proof_tree
open Check_splits
open Certificate
open Checker
open Arithmetic

let check_relu_constraints = Constraint.check_relu_constraints

let unsat tableau upper_bounds lower_bounds relu_constraints x =
    (is_in_kernel tableau x &&
    is_bounded upper_bounds lower_bounds x &&
    check_relu_constraints relu_constraints x) = false

let sat tableau upper_bounds lower_bounds relu_constraints x =
    (is_in_kernel tableau x &&
    is_bounded upper_bounds lower_bounds x &&
    check_relu_constraints relu_constraints x)

lemma sat_not_unsat tableau upper_bounds lower_bounds relu_constraints x =
    sat tableau upper_bounds lower_bounds relu_constraints x = 
    not (unsat tableau upper_bounds lower_bounds relu_constraints x)

lemma unsat_not_sat tableau upper_bounds lower_bounds relu_constraints x =
    unsat tableau upper_bounds lower_bounds relu_constraints x = 
    not (sat tableau upper_bounds lower_bounds relu_constraints x)

 (* 
 1.a. axiom Leaf case, proof_tree = Leaf contradiction:
 TODO (RD): investigate: this is exactly the same theorem as proven in leaf_soundness, but for some reason, 
 if I don't re-define it as an axiom here, Imandra wouldn't apply it to prove soudness_check_node
*)
axiom soundness_leaf tableau upper_bounds lower_bounds relu_constraints x proof_tree =
    let open ProofTree in
    match proof_tree with
    | Node _ -> true
    | (Leaf contradiction) ->
        well_formed_tableau_bounds tableau upper_bounds lower_bounds &&
        List.length x = List.length (List.hd tableau) &&
        check_node (mk_eq_constraints tableau) upper_bounds lower_bounds relu_constraints proof_tree
        ==>
        unsat tableau upper_bounds lower_bounds relu_constraints x
[@@fc]

axiom soundness_node_contra_expand tableau upper_bounds lower_bounds constraints x proof_tree =
    let open ProofTree in
    match proof_tree with
    | Leaf _ -> true
    | Node (left, right) ->
        let valid_children_splits = check_children_splits left.tightenings right.tightenings constraints in
        let (valid_bounds_l, ub_left, lb_left) = update_child_bounds left (mk_eq_constraints tableau) upper_bounds lower_bounds constraints in
        let (valid_bounds_r, ub_right, lb_right) = update_child_bounds right (mk_eq_constraints tableau) upper_bounds lower_bounds constraints in
        valid_bounds_l && valid_bounds_r &&
        valid_children_splits &&
        sat tableau upper_bounds lower_bounds constraints x
        ==>
        not (check_node (mk_eq_constraints tableau) ub_left lb_left constraints left.ptr) ||
        not (check_node (mk_eq_constraints tableau) ub_right lb_right constraints right.ptr)
    [@@fc]

lemma soundness_node_contra_helper tableau upper_bounds lower_bounds constraints x proof_tree =
    let open ProofTree in
    match proof_tree with
    | Leaf _ -> true
    | Node (left, right) ->
        let valid_children_splits = check_children_splits left.tightenings right.tightenings constraints in
        let (valid_bounds_l, ub_left, lb_left) = update_child_bounds left (mk_eq_constraints tableau) upper_bounds lower_bounds constraints in
        let (valid_bounds_r, ub_right, lb_right) = update_child_bounds right (mk_eq_constraints tableau) upper_bounds lower_bounds constraints in
        sat tableau upper_bounds lower_bounds constraints x &&
        (not valid_bounds_l || not valid_bounds_r ||
        not valid_children_splits)
        ==>
        not (check_node (mk_eq_constraints tableau) upper_bounds lower_bounds constraints proof_tree)
    [@@auto]
    [@@disable sat, Checker.update_child_bounds, Checker.check_node, Checker.check_children_splits, Checker.update_child_bounds]

lemma soundness_node_contra tableau upper_bounds lower_bounds relu_constraints x proof_tree =
    let open ProofTree in
    match proof_tree with
    | Leaf _ -> true
    | Node (left, right) ->
        sat tableau upper_bounds lower_bounds relu_constraints x
        ==>
        not (check_node (mk_eq_constraints tableau) upper_bounds lower_bounds relu_constraints proof_tree)
    [@@auto]
    [@@apply soundness_leaf tableau upper_bounds lower_bounds relu_constraints x proof_tree]
    [@@apply soundness_node_contra_expand tableau upper_bounds lower_bounds relu_constraints x proof_tree]
    [@@disable Checker.update_child_bounds, Checker.check_node, Checker.check_children_splits, Checker.update_child_bounds]
    [@@fc]

(* 
1.b. lemma Node case, proof_tree = Node (left_child, right_child) 
Inductive Hypothesis:
    check_node (mk_eq_constraints tableau) ub_left lb_left relu_constraints left_child.ptr
    ==>
    for all x, unsat tableau ub_left lb_left relu_constraints x

    check_node (mk_eq_constraints tableau) ub_right lb_right relu_constraints left_child.ptr
    ==>
    for all x, unsat tableau ub_right lb_right relu_constraints x

How do we make Imandra apply this inductive hypothesis?
*)
lemma soundness_node tableau upper_bounds lower_bounds relu_constraints x proof_tree =
    let open ProofTree in
    match proof_tree with
    | Leaf _ -> true
    | Node (left, right) ->
        check_node (mk_eq_constraints tableau) upper_bounds lower_bounds relu_constraints proof_tree
        ==>
        unsat tableau upper_bounds lower_bounds relu_constraints x
    [@@auto]
    [@@apply unsat_not_sat tableau upper_bounds lower_bounds relu_constraints x]
    [@@disable sat, Checker.check_node, Certificate.mk_eq_constraints]
    [@@fc]


(* 
1. lemma check_node implies unsatisfiability
    (tableau: real list list) (upper_bounds: real list) (lower_bounds: real list) 
    (relu_constraints: Constraint.t list) (proof_tree: ProofTree.t) =
    check_node (mk_eq_constraints tableau) upper_bounds lower_bounds relu_constraints proof_tree
    ==>
    for all x, unsat tableau upper_bounds lower_bounds relu_constraints x

TODO: the root of the proof tree can have bound tightening, which will be applied in proof-tree pre-processing
and should also be proved correct.
*)
lemma check_node_soundness (tableau: real list list) (upper_bounds: real list) (lower_bounds: real list) 
        (relu_constraints: Constraint.t list) (proof_tree: ProofTree.t) (x: real list) =
    (* this is a check performed in check_proof_tree, outside of check_node *)
    well_formed_tableau_bounds tableau upper_bounds lower_bounds &&
    (* We only consider inputs with valid size; could this be moved to the sat/unsat definition instead? *)
    List.length x = List.length (List.hd tableau) &&
    check_node (mk_eq_constraints tableau) upper_bounds lower_bounds relu_constraints proof_tree
    ==>
    unsat tableau upper_bounds lower_bounds relu_constraints x
    [@@auto]
    [@@simp]
    [@@induct structural proof_tree]
    [@@apply soundness_leaf tableau upper_bounds lower_bounds relu_constraints x proof_tree,
        soundness_node tableau upper_bounds lower_bounds relu_constraints x proof_tree]
    [@@disable unsat, Checker.well_formed_tableau_bounds, List.length, Checker.check_node]