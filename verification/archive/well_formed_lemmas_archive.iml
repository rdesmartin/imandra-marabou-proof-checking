lemma compute_combination_case_len_invariant lc caus_bound_t expl tableau =
    well_formed_tableau tableau &&
    expl <> [] &&
    lc = compute_combination_case expl tableau caus_bound_t
    ==>
    List.length lc = List.length (List.hd tableau)
[@@auto]
[@@disable Arithmetic.LinArith.compute_combination]
[@@fc]

#disable compute_combination_case

(* lemma updated_linear_combination_length_invariant lc lc' caus_bound_t caus_var =
    lc' = (if caus_bound_t = UPPER
        then (increment_elem lc caus_var)
        else (decrement_elem lc caus_var))
    ==>
    List.length lc' = List.length lc
    [@@auto] *)

lemma updated_linear_combination_length_invariant lc lc' caus_var caus_bound_t =
    lc' = update_combination_case lc caus_var caus_bound_t
    ==>
    List.length lc' = List.length lc
    [@@auto]
    [@@fc]

#disable update_combination_case


lemma compute_linear_combination_lemmas_len_invariant expl tableau caus_bound_t caus_var lc = 
    well_formed_tableau tableau &&
    expl <> [] &&
    lc = update_combination_case 
            (compute_combination_case expl tableau caus_bound_t) 
            caus_var 
            caus_bound_t
    ==>
    List.length lc = List.length (List.hd tableau)
    [@@auto]
    [@@disable Certificate.update_combination_case, Certificate.compute_combination_case]
    [@@apply compute_combination_case_len_invariant lc caus_bound_t expl tableau,
    updated_linear_combination_length_invariant (compute_combination_case expl tableau caus_bound_t) lc caus_var caus_bound_t]
    [@@fc]

lemma compute_linear_combination_lemmas_len_invariant' expl tableau caus_bound_t caus_var lc = 
    well_formed_tableau tableau &&
    expl <> [] &&
    lc = compute_linear_combination_lemmas expl tableau caus_bound_t caus_var
    ==>
    List.length lc = List.length (List.hd tableau)
    [@@auto]
    [@@apply compute_linear_combination_lemmas_len_invariant expl tableau caus_bound_t caus_var lc]
    [@@disable Certificate.update_combination_case, Certificate.compute_combination_case]
    [@@fc]

    lemma mk_geq_constraints_lemmas_well_formed' (expl: real list) 
        (tableau: real list list) (upper_bounds: real list) (lower_bounds: real list) (caus_bound_t: bound_type) 
        (caus_var: int) (geq_constraints: exp list) (x: real list) =
    well_formed_tableau tableau &&
    expl <> [] && upper_bounds <> [] && lower_bounds <> [] &&
    List.length x = List.length (List.hd tableau) &&
    geq_constraints = mk_geq_constraints (compute_linear_combination_lemmas expl tableau caus_bound_t caus_var) upper_bounds lower_bounds
    ==> 
    well_formed geq_constraints x
    [@@auto]
    [@@apply compute_linear_combination_lemmas_len_invariant' expl tableau caus_bound_t caus_var (compute_linear_combination_lemmas expl tableau caus_bound_t caus_var)]
    [@@disable Certificate.update_combination_case, Certificate.compute_combination_case]
    [@@fc]

    lemma mk_geq_constraints_lemmas_well_formed (expl: real list) 
    (tableau: real list list) (upper_bounds: real list) (lower_bounds: real list) (caus_bound_t: bound_type) 
    (caus_var: int) (geq_constraints: exp list) (x: real list) =
    well_formed_tableau tableau &&
    expl <> [] && upper_bounds <> [] && lower_bounds <> [] &&
    List.length x = List.length (List.hd tableau) &&
    geq_constraints = mk_geq_constraints_lemma expl tableau upper_bounds lower_bounds caus_var caus_bound_t
    ==> 
    well_formed geq_constraints x
[@@auto]
[@@disable Certificate.update_combination_case, Certificate.compute_combination_case, Certificate.mk_geq_constraints, Certificate.compute_linear_combination_lemmas]
