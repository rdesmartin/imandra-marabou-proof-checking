open Checker
open Arithmetic.LinArith

let list_add = Utils.list_add
let list_mult = Utils.list_mult
let repeat = Utils.repeat

let rec is_bounded (vars: real list) (upper_bounds: real list) (lower_bounds: real list) =
  match vars, upper_bounds, lower_bounds with
        | [], [], [] -> true
        | x::xs, u::us, l::ls ->
            x >=. l && x <=. u && is_bounded xs us ls
        | _ -> false

let rec dot_product x y =
        match x, y with
        | [], [] -> 0.
        | x1::xs, y1::ys -> x1 *. y1 +. (dot_product xs ys)
        | _ -> 0. (* TODO handle error case *)

axiom dot_product_symmetry x y =
    dot_product x y = dot_product y x
    [@@auto]

let rec null_product (tableau: real list list) (x: real list) =
    match tableau, x with
    | [], [] -> true
    | row::tl, _ -> dot_product row x = 0. && (null_product tl x)
    | _ -> false

lemma zero_dot_product_r x tableau row =
    dot_product row x = 0. && null_product tableau x
    ==> null_product (tableau @ [row]) x = true
[@@auto][@@rw]

lemma zero_dot_product_l x tableau row =
    dot_product row x = 0. && null_product tableau x
    ==> null_product (row::tableau) x = true
[@@auto][@@rw]

lemma repeat_len_non_empty x =
    x <> []
    ==>
    repeat 0. (List.length x) <> []
[@@auto]

lemma update_combination_id x =
    update_combination (repeat 0. (List.length x)) (1., x) = x
[@@auto][@@apply repeat_len_non_empty x]

lemma update_combination_zero_vec c x =
    update_combination (repeat 0. (List.length x)) (c, x) = List.map (( *. ) c) x
[@@auto]

lemma list_add_len_preservation x y =
    List.length (list_add x y) = List.length x ||
    List.length (list_add x y) = List.length y
[@@auto]

lemma list_mul_len_preservation x c =
    List.length (list_mult x c) = List.length x
[@@auto]

lemma cons_not_empty x y = x :: y <> [] [@@auto]

(* lemma update_combination_nonempty y z n =
    List.length y = List.length z && y <> []
    ==>
    (update_combination n y z) <> []
[@@auto]
 *)
lemma list_mult_length_preservation y c =
    List.length y = List.length (list_mult y c)
[@@auto]

lemma vectors_distrib x y c =
    list_add (list_mult x c) (list_mult y c) = list_mult (list_add x y) c
[@@auto][@@rw]

lemma list_add_identity x =
    let zeros = repeat 0. (List.length x) in
    list_add x zeros = x
[@@auto]

lemma dot_product_zero x =
    let zeros = repeat 0. (List.length x) in
    dot_product x zeros = 0.
[@@auto]

lemma dot_product_coeff x y c =
    dot_product x (list_mult y c) = c *. dot_product x y
[@@auto][@@rw]

lemma dot_product_coeff_eq x y c =
    dot_product x y = 0.
    ==>
    dot_product x (list_mult y c) = 0.
[@@auto][@@apply dot_product_coeff x y c]

lemma dot_product_add x y z =
    List.length x = List.length y &&
    List.length x = List.length z
    ==>
    dot_product x (list_add y z) = (dot_product x y) +. (dot_product x z)
[@@auto][@@rw]

lemma dot_product_add_eq x y z =
    List.length x = List.length y &&
    List.length x = List.length z &&
    dot_product x y = 0. &&
    dot_product x z = 0.
    ==>
    dot_product x (list_add y z) = 0.
[@@auto][@@apply dot_product_add x y z]

lemma zero_dot_product_for_linear_combination_helper x y z c1 c2 =
  List.length x = List.length y &&
  List.length x = List.length z &&
  dot_product x y = 0. &&
  dot_product x z = 0.
  ==> (dot_product x  (list_mult y c1)) +. (dot_product x (list_mult z c2)) = 0.
[@@disable dot_product, List.length][@@apply dot_product_coeff_eq x y c1, dot_product_coeff_eq x z c2 ][@@auto][@@rw]

lemma zero_dot_product_for_linear_combination_helper_2 x y z c1 c2 =
  let u = (list_mult y c1) in
  let v = (list_mult z c2) in
  List.length x = List.length y &&
  List.length x = List.length z
  ==>
  dot_product x (list_add u v) = (dot_product x u) +. (dot_product x v)
  [@@disable dot_product, list_add, List.length]
  [@@apply dot_product_add x (list_mult y c1) (list_mult z c2),  list_mult_length_preservation z c2,  list_mult_length_preservation y c1]
  [@@auto]

lemma zero_dot_product_for_linear_combination x y z c1 c2 =
  List.length x = List.length y &&
  List.length x = List.length z &&
  dot_product x y = 0. &&
  dot_product x z = 0.
  ==> dot_product x (list_add (list_mult y c1) (list_mult z c2) ) = 0.
  [@@disable dot_product, list_mult, List.length]
  [@@apply zero_dot_product_for_linear_combination_helper_2 x y z c1 c2, dot_product_add x (list_mult y c1) (list_mult z c2)]
  [@@auto]

lemma kernel_vector_for_any_row tableau x row =
      null_product tableau x &&
      List.mem row tableau
      ==>
      dot_product x row = 0.
  [@@disable null_product, dot_product][@@auto]

lemma kernel_vector_for_any_row_linear_combination tableau x row1 c1 row2 c2 =
    null_product tableau x &&
    List.mem row1 tableau &&
    List.mem row2 tableau &&
    List.length x = List.length row1 &&
    List.length x = List.length row2
    ==>
    dot_product x (list_add (list_mult row1 c1) (list_mult row2 c2)) = 0.
[@@disable null_product, dot_product, List.mem, List.length, list_add, list_mult][@@apply kernel_vector_for_any_row tableau x row1, kernel_vector_for_any_row tableau x row2, zero_dot_product_for_linear_combination x row1 row2 c1 c2]
[@@auto]

lemma dot_product_zero_vector x =
    dot_product x (repeat 0. (List.length x)) = 0.
[@@auto]

lemma compute_combination_empty tableau = 
    tableau <> [] 
    ==> 
    compute_combination [] tableau = repeat 0. (List.length (List.hd tableau))
[@@auto]

lemma kernel_vector_for_empty_combination tableau x =
    null_product tableau x &&
    List.length (List.hd tableau) = List.length x
    ==> dot_product x (compute_combination [] tableau) = 0.
[@@apply compute_combination_empty tableau, dot_product_zero x]
[@@auto]

(* lemma kernel_vector_for_combination_size_1 tableau x c =
    null_product tableau x
    ==> dot_product x (compute_combination [c] tableau) = 0.
[@@disable null_product, dot_product, List.length]
[@@auto]
 *)

(* axiom kernel_vector_for_any_combination tableau x y =
    null_product tableau x &&
    List.length (compute_combination y tableau) = List.length x
    ==> 
    dot_product x (compute_combination y tableau) = 0.
[@@disable null_product, dot_product, List.length, List.mem][@@induct structural y][@@apply kernel_vector_for_empty_combination tableau x, kernel_vector_for_combination_size_1 tableau x (List.hd y)] *)

(*
axiom bounds_combination row x upper_bounds lower_bounds c =
    compute_row_upper_bound row upper_bounds lower_bounds = c &&
    is_bounded x upper_bounds lower_bounds
    ==> 
    dot_product x row <=. c
[@@auto]

lemma contradiction_implies_negative_row x y tableau upper_bounds lower_bounds =
         check_contradiction y tableau upper_bounds lower_bounds
         <==> (is_bounded x upper_bounds lower_bounds
         && dot_product x y <. 0.) = true
     [@@auto]

lemma contradiction_implies_negative_row x y tableau upper_bounds lower_bounds =
    (check_contradiction y tableau upper_bounds lower_bounds [@trigger rw] &&
     is_bounded x upper_bounds lower_bounds) ==>
    dot_product x (compute_combination y tableau (M.empty)) <. 0. = true
[@@auto] [@@rw]
*)
(* 
lemma dot_product_check_contradiction_eq x y tableau upper_bounds lower_bounds =
    is_bounded x upper_bounds lower_bounds &&
    dot_product x (compute_combination y tableau) <. 0.
    ==>
    check_contradiction y tableau upper_bounds lower_bounds = true
[@@auto]
;;

theorem contradiction_verification x contradiction tableau upper_bounds lower_bounds =
    is_bounded x upper_bounds lower_bounds &&
    check_contradiction contradiction tableau upper_bounds lower_bounds
    ==>
    not (null_product tableau x)
[@@auto][@@apply dot_product_check_contradiction_eq x contradiction tableau upper_bounds lower_bounds]
;; *)
