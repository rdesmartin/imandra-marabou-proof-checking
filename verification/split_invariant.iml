open Farkas_lemma
open Tightening
open Utils
open Certificate

(* predicate stating that s' = s && (b <= 0) && (aux >= 0) *)
let is_inactive_relu (s: exp list) (s': exp list) b f (size) =
    s' = (Geq (mk_bound_poly size b (-1.) 0.)) :: [Geq (mk_bound_poly size f (-1.) 0.)] @ s

let is_active_relu (s: exp list) (s': exp list) b aux (size) =
    s' = (Geq (mk_bound_poly size b 1. 0.)) :: [Geq (mk_bound_poly size aux (-1.) 0.)] @ s

let relu x = if x >=. 0. then x else 0. 

let eval_relu ((b_var, f_var, aux_var): (int * int * int)) (x: real list) =
    let f = List.nth f_var x in
    let b = List.nth b_var x in
    let aux = List.nth aux_var x in
    match b, f, aux with
    | Some b, Some f, Some aux -> f = relu b && aux +. b -. f = 0.
    | _ -> false 

let rec eval_relus cs x = 
    match cs with
    | [] -> true
    | c :: cs -> eval_relu c x && eval_relus cs x

let eval_system_relus s cs x = 
    eval_system s x && eval_relus cs x

lemma mk_bound_poly_length size var_i coeff value =
    size >= 0
    ==>
    List.length (mk_bound_poly size var_i coeff value) = size + 1
    [@@auto]

lemma mk_bound_poly_var size var var_i coeff value = 
    size > 0 && var_i < size &&
    List.nth var_i (mk_bound_poly size var_i coeff value) = Some var
    ==>
    var = coeff
    [@@auto]

(* lemma mk_bound_poly_zero size var var_i i coeff value = 
    size > 0 && var_i < size &&
    i <> var_i && i <> size &&
    List.nth i (mk_bound_poly size var_i coeff value) = Some var
    ==>
    var = 0.
    [@@auto]
    [@@induct functional Certificate.mk_bound_poly] *)

axiom mk_bound_poly_eval var var_i value coeff x = 
    x <> [] && var_i < (List.length x) &&
    List.nth var_i x = Some var
    ==>
    eval_poly (mk_bound_poly (List.length x) var_i coeff value) x = coeff *. var +. value
    [@@auto]
    [@@fc]

lemma mk_bound_poly_pos var var_i value coeff x = 
    x <> [] && var_i < (List.length x) &&
    List.nth var_i x = Some var &&
    coeff *. var >=. value
    ==>
    eval_poly (mk_bound_poly (List.length x) var_i coeff (-. value)) x >=. 0.
    [@@auto]
    [@@apply mk_bound_poly_eval var var_i (-. value) coeff x]
    [@@disable Certificate.mk_bound_poly, List.nth, List.length]

lemma mk_bound_poly_eval_geq_true var var_i value coeff x = 
    x <> [] && var_i < (List.length x) &&
    List.nth var_i x = Some var &&
    coeff *. var >=. value
    ==>
    eval_system [Geq (mk_bound_poly (List.length x) var_i coeff (-. value))] x
    [@@auto]
    [@@apply mk_bound_poly_pos var var_i value coeff x]
    [@@disable Certificate.mk_bound_poly, List.nth, List.length]

lemma mk_bound_poly_eval_geq_true_conj var1 var1_i value1 coeff1 var2 var2_i value2 coeff2 x = 
    x <> [] && 
    var1_i < (List.length x) &&
    var2_i < (List.length x) &&
    List.nth var1_i x = Some var1 &&
    List.nth var2_i x = Some var2 &&
    coeff1 *. var1 >=. value1 &&
    coeff2 *. var2 >=. value2
    ==>
    eval_system ((Geq (mk_bound_poly (List.length x) var1_i coeff1 (-. value1))) :: [Geq (mk_bound_poly (List.length x) var2_i coeff2 (-. value2))]) x
    [@@auto]
    [@@apply mk_bound_poly_eval_geq_true var1 var1_i value1 coeff1 x,
        mk_bound_poly_eval_geq_true var2 var2_i value2 coeff2 x
    ]
    [@@disable Certificate.mk_bound_poly, List.nth, List.length]
    

lemma relu_split_phases_eval b f aux b_var f_var aux_var x =
    x <> [] && 
    b_var < (List.length x) &&
    f_var < (List.length x) &&
    aux_var < (List.length x) &&
    List.nth b_var x = Some b &&
    List.nth f_var x = Some f &&
    List.nth aux_var x = Some aux &&
    eval_relu (b_var, f_var, aux_var) x
    ==>
    eval_system ((Geq (mk_bound_poly (List.length x) b_var (-1.) 0.)) :: [(Geq (mk_bound_poly (List.length x) f_var (-1.) 0.))]) x ||
    eval_system ((Geq (mk_bound_poly (List.length x) b_var 1. 0.)) :: [(Geq (mk_bound_poly (List.length x) aux_var (-1.) 0.))]) x
[@@auto]
[@@simp]
[@@apply
    relu_split b f aux,
    mk_bound_poly_eval_geq_true_conj b b_var 0. (-1.) f f_var 0. (-1.) x,
    mk_bound_poly_eval_geq_true_conj b b_var 0. (1.) aux aux_var 0. (-1.) x
]
[@@disable Farkas_lemma.eval_system, Certificate.mk_bound_poly, List.nth, List.length]


lemma eval_system_concat_invariant s1 s2 x = 
    eval_system s1 x && eval_system s2 x 
    ==>
    eval_system (s1 @ s2) x
    [@@auto]

lemma relu_split_phases_eval_concat s b f aux b_var f_var aux_var x =
    well_formed s x &&
    eval_system s x &&
    x <> [] && 
    b_var < (List.length x) &&
    f_var < (List.length x) &&
    aux_var < (List.length x) &&
    List.nth b_var x = Some b &&
    List.nth f_var x = Some f &&
    List.nth aux_var x = Some aux &&
    eval_relu (b_var, f_var, aux_var) x
    ==>
    eval_system ((Geq (mk_bound_poly (List.length x) b_var (-1.) 0.)) :: [Geq (mk_bound_poly (List.length x) f_var (-1.) 0.)] @ s) x ||
    eval_system ((Geq (mk_bound_poly (List.length x) b_var 1. 0.)) :: [Geq (mk_bound_poly (List.length x) aux_var (-1.) 0.)] @ s) x
[@@auto]
[@@simp]
[@@apply
    relu_split_phases_eval b f aux b_var f_var aux_var x,
    eval_system_concat_invariant ((Geq (mk_bound_poly (List.length x) b_var (-1.) 0.)) :: [Geq (mk_bound_poly (List.length x) f_var (-1.) 0.)]) s x,
    eval_system_concat_invariant ((Geq (mk_bound_poly (List.length x) b_var 1. 0.)) :: [Geq (mk_bound_poly (List.length x) aux_var (-1.) 0.)]) s x
]
[@@disable Farkas_lemma.eval_system, Certificate.mk_bound_poly, List.nth, List.length]


(* left to prove *)
lemma relu_split_phases_eval' s sl sr b f aux b_var f_var aux_var x =
    x <> [] &&
    b_var < (List.length x) &&
    f_var < (List.length x) &&
    aux_var < (List.length x) &&
    List.nth b_var x = Some b &&
    List.nth f_var x = Some f &&
    List.nth aux_var x = Some aux &&
    eval_relu (b_var, f_var, aux_var) x &&
    well_formed s x &&
    eval_system s x &&
    is_inactive_relu s sl f_var b_var (List.length x) &&
    is_active_relu s sr b_var aux_var (List.length x)    
    ==>
    eval_system sl x || eval_system sr x
[@@auto]
[@@simp]
[@@apply
    relu_split_phases_eval_concat s b f aux b_var f_var aux_var x]
[@@disable Farkas_lemma.eval_system, Certificate.mk_bound_poly, List.nth, List.length]


lemma relu_split_sat_invariant (s: exp list) (sl: exp list) (sr: exp list) x cs ((b, f, aux) as c) =
    well_formed s x && well_formed sl x && well_formed sr x && (* good sizes assumptions *)
    eval_system_relus s (c::cs) x && (* x satisfies the system and all relu constraints in the parent node *)
    is_inactive_relu s sl f b (List.length x) && (* the system of the left child corresponds to the inactive phase of a relu split *)
    is_active_relu s sr b aux (List.length x) (* the system of the right child corresponds to the active phase of a relu split *)
    ==> 
    eval_system_relus sl cs x || eval_system_relus sr cs x (* (* x satisfies the system and all relu constraints in either child *) *)
