open Farkas_lemma
open Tightening
open Utils
open Certificate
open Relu

lemma nth_size y_var y x = 
    List.nth y_var x = Some y 
    ==> 
    y_var < (List.length x) 
    [@@auto][@@fc]

(* predicate stating that s' = s && (b <= 0) && (aux >= 0) *)
let is_inactive_relu (s: exp list) (s': exp list) b f (size) =
    s' = (Geq (mk_bound_poly size b (-1.) 0.)) :: [Geq (mk_bound_poly size f (-1.) 0.)] @ s

let is_active_relu (s: exp list) (s': exp list) b aux (size) =
    s' = (Geq (mk_bound_poly size b 1. 0.)) :: [Geq (mk_bound_poly size aux (-1.) 0.)] @ s

lemma relu_split_phases_eval b f aux b_var f_var aux_var x =
    x <> [] && 
    List.nth b_var x = Some b &&
    List.nth f_var x = Some f &&
    List.nth aux_var x = Some aux &&
    eval_relu (b_var, f_var, aux_var) x
    ==>
    eval_system ((Geq (mk_bound_poly (List.length x) b_var (-1.) 0.)) :: [(Geq (mk_bound_poly (List.length x) f_var (-1.) 0.))]) x ||
    eval_system ((Geq (mk_bound_poly (List.length x) b_var 1. 0.)) :: [(Geq (mk_bound_poly (List.length x) aux_var (-1.) 0.))]) x
[@@auto]
[@@simp]
[@@apply
    relu_split b f aux,
    mk_bound_poly_eval_geq_true_conj b b_var 0. (-1.) f f_var 0. (-1.) x,
    mk_bound_poly_eval_geq_true_conj b b_var 0. (1.) aux aux_var 0. (-1.) x
]
[@@disable Farkas_lemma.eval_system, Certificate.mk_bound_poly, List.nth, List.length]


lemma eval_system_concat_invariant s1 s2 x = 
    eval_system s1 x && eval_system s2 x 
    ==>
    eval_system (s1 @ s2) x
    [@@auto][@@rw]

lemma relu_split_phases_eval_concat s b f aux b_var f_var aux_var x =
    well_formed s x &&
    eval_system s x &&
    x <> [] && 
    List.nth b_var x = Some b &&
    List.nth f_var x = Some f &&
    List.nth aux_var x = Some aux &&
    eval_relu (b_var, f_var, aux_var) x
    ==>
    eval_system ((Geq (mk_bound_poly (List.length x) b_var (-1.) 0.)) :: [Geq (mk_bound_poly (List.length x) f_var (-1.) 0.)] @ s) x ||
    eval_system ((Geq (mk_bound_poly (List.length x) b_var 1. 0.)) :: [Geq (mk_bound_poly (List.length x) aux_var (-1.) 0.)] @ s) x
[@@auto]
[@@simp]
[@@apply
    relu_split_phases_eval b f aux b_var f_var aux_var x,
    eval_system_concat_invariant ((Geq (mk_bound_poly (List.length x) b_var (-1.) 0.)) :: [Geq (mk_bound_poly (List.length x) f_var (-1.) 0.)]) s x,
    eval_system_concat_invariant ((Geq (mk_bound_poly (List.length x) b_var 1. 0.)) :: [Geq (mk_bound_poly (List.length x) aux_var (-1.) 0.)]) s x
]
[@@disable Farkas_lemma.eval_system, Certificate.mk_bound_poly, List.nth, List.length]

lemma relu_split_phases_eval' s sl sr b f aux b_var f_var aux_var x =
    x <> [] &&
    List.nth b_var x = Some b &&
    List.nth f_var x = Some f &&
    List.nth aux_var x = Some aux &&
    eval_relu (b_var, f_var, aux_var) x &&
    well_formed s x &&
    eval_system s x &&
    is_inactive_relu s sl b_var f_var (List.length x) &&
    is_active_relu s sr b_var aux_var (List.length x)    
    ==>
    eval_system sl x || eval_system sr x
[@@auto]
[@@simp]
[@@apply
    relu_split_phases_eval_concat s b f aux b_var f_var aux_var x]
[@@disable Farkas_lemma.eval_system, Certificate.mk_bound_poly, List.nth, List.length]

lemma eval_relus_append c cs x =
    eval_relu c x && eval_relus cs x
    ==> 
    eval_relus (c::cs) x

lemma eval_relus_tl c cs x =
    eval_relus (c::cs) x 
    ==>
    eval_relus cs x

lemma relu_split_children_satisfy_linear_and_nonlinear_constraints s sl sr b f aux b_var f_var aux_var x cs =
    x <> [] &&
    List.nth b_var x = Some b &&
    List.nth f_var x = Some f &&
    List.nth aux_var x = Some aux &&
    eval_relu (b_var, f_var, aux_var) x &&
    well_formed s x &&
    is_inactive_relu s sl b_var f_var (List.length x) &&
    is_active_relu s sr b_var aux_var (List.length x) &&
    eval_system_relus s ((b_var, f_var, aux_var)::cs) x  
    ==>
    eval_system_relus sl cs x || eval_system_relus sr cs x
[@@auto]
[@@simp]
[@@apply
    relu_split_phases_eval' s sl sr b f aux b_var f_var aux_var x,
    eval_relus_tl (b_var, f_var, aux_var) cs x]
[@@disable Farkas_lemma.eval_system, Certificate.mk_bound_poly, List.nth, List.length]


let relu_split_sat_invariant (s: exp list) (sl: exp list) (sr: exp list) x cs ((b, f, aux) as c) =
    well_formed s x && well_formed sl x && well_formed sr x && (* good sizes assumptions *)
    eval_system_relus s (c::cs) x && (* x satisfies the system and all relu constraints in the parent node *)
    is_inactive_relu s sl f b (List.length x) && (* the system of the left child corresponds to the inactive phase of a relu split *)
    is_active_relu s sr b aux (List.length x) (* the system of the right child corresponds to the active phase of a relu split *)
    ==> 
    eval_system_relus sl cs x || eval_system_relus sr cs x (* (* x satisfies the system and all relu constraints in either child *) *)
