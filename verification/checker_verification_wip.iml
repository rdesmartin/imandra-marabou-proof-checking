let valid_split (node: ProofTree.t) (q: query) = 
    match node with
    | Leaf _ -> true
    | Node (tightenings, bound_lemma, children) ->
        check_children_splits children q.constraints

lemma valid_split_lm node (q: query) =
    check_node q.tableau q.upper_bounds q.lower_bounds q.constraints node
    ==>
    valid_split node q

lemma tighten_invariant tightenings upper_bounds lower_bounds = 
    tightenings = [] 
    ==> 
    Tightening.update_bounds tightenings upper_bounds lower_bounds = (upper_bounds, lower_bounds)
    [@@rw][@@fc]

lemma bound_lemma_invariant bound_lemmas tableau upper_bounds lower_bounds constraints = 
    bound_lemmas = []
    ==>
    BoundLemma.check_bound_lemmas bound_lemmas tableau upper_bounds lower_bounds constraints = (true, upper_bounds, lower_bounds)
    [@@rw][@@fc]

lemma unsatisfiability expl tableau upper_bounds lower_bounds x =
    let system = mk_system_contradiction expl tableau upper_bounds lower_bounds in
    eval_system system x = false
    ==>
    (LinArith.is_bounded lower_bounds x upper_bounds &&
    is_solution tableau x) = false
[@@auto][@@fc]

lemma checker_leaf_verification contradiction tableau upper_bounds lower_bounds x = 
    check_contradiction contradiction tableau upper_bounds lower_bounds 
    ==>
    (LinArith.is_bounded lower_bounds x upper_bounds &&
    is_solution tableau x) = false
    [@@auto]
    [@@disable Certificate.mk_system_contradiction, Arithmetic.LinArith.is_bounded, Farkas_lemma.check_cert]
    [@@fc]

theorem checker_leaf_verification tableau upper_bounds lower_bounds constraints node x = 
    let open ProofTree in
    match node with 
    | Node _ -> true
    | Leaf (tightenings, bound_lemmas, contradiction) ->
        bound_lemmas = [] && tightenings = [] ==>
        let (upper_bounds', lower_bounds') = Tightening.update_bounds tightenings upper_bounds lower_bounds in
        let (valid_bounds, upper_bounds'', lower_bounds'') = BoundLemma.check_bound_lemmas bound_lemmas tableau upper_bounds' lower_bounds' constraints in
        check_contradiction contradiction tableau upper_bounds'' lower_bounds'' 
        ==>
        (LinArith.is_bounded lower_bounds x upper_bounds &&
        is_solution tableau x) = false    
    [@@auto]
    [@@disable Tightening.Tightening.update_bounds,
               Bound_lemma.BoundLemma.check_bound_lemmas,
               Certificate.mk_system_contradiction,
               Arithmetic.LinArith.is_bounded,
               Checker.check_contradiction]


(* theorem checker_verification tableau upper_bounds lower_bounds constraints proof_tree x =
    check_proof_tree tableau upper_bounds lower_bounds proof_tree
    ==> 
    (is_bounded lower_bounds x upper_bounds &&
     is_solution tableau x
 