module Relu = struct
    (* f  b aux *)
    type t = (int * int * int)

    let relu x = if x >=. 0. then x else 0. 

    let eval_relu ((b_var, f_var, aux_var): t) x =
        let b = List.nth b_var x in
        let f = List.nth f_var x in
        let aux = List.nth aux_var x in
        match b, f, aux with
        | Some b, Some f, Some aux -> f = relu b && aux +. b -. f = 0.
        | _ -> false

    let rec eval_relus cs x = 
        match cs with
        | [] -> true
        | c :: cs -> eval_relu c x && eval_relus cs x

    let eval_system_relus s cs x = 
        eval_system s x && eval_relus cs x    

    theorem relu_b_non_neg b f aux = 
        f = relu b && aux +. b -. f = 0. 
        ==> 
        f >=. 0.
    [@@fc]

        theorem relu_aux_pos b f aux = 
            f = relu b && aux +. b -. f = 0. 
            ==> 
            aux >=. 0.
        [@@fc]

        theorem relu_split b f aux = 
            f = relu b && aux +. b -. f = 0. 
            ==> 
            (b >=. 0. && (-. aux) >=. 0.) ||
            ((-. b) >=. 0. && (-. f) >=. 0. )
        [@@fc]

        theorem relu_lemmas_1 b f aux = 
            f = relu b && aux +. b -. f = 0. 
            ==>
            b >=. 0. ==> aux <=. 0.

        theorem relu_lemmas_2 b f aux x = 
            f = relu b && aux +. b -. f = 0.
            ==>
            f >=. x && x >. 0. ==> aux <=. 0. 
            
        theorem relu_lemmas_3 b f aux x = 
            f = relu b && aux +. b -. f = 0. 
            ==> 
            aux >=. x && x >. 0. ==> f <=. 0.

        theorem relu_lemmas_4 b f aux x = 
            f = relu b && aux +. b -. f = 0. 
            ==>
            f <=. x && x <. 0. ==> f <=. 0.

        theorem relu_lemmas_5 b f aux = 
            f = relu b && aux +. b -. f = 0. 
            ==>
            b <=. 0. ==> f <=. 0.

        theorem relu_lemmas_6 b f aux x = 
        f = relu b && aux +. b -. f = 0. 
        ==>
        f <=. x ==> b <=. x

        theorem relu_lemmas_7 b f aux x = 
        f = relu b && aux +. b -. f = 0. 
        ==>
        b <=. x && x >=. 0. ==> f <=. x

        theorem relu_lemmas_8 b f aux x = 
        f = relu b && aux +. b -. f = 0. 
        ==>
        aux <=. x ==> b >=. (-. x)

        theorem relu_lemmas_9 b f aux x = 
        f = relu b && aux +. b -. f = 0. 
        ==>
        b >=. x && x <=. 0. ==> aux <=. (-. x)
end