(* 
Check the soundness of the proof checker for the Leaf constructor of Proof Trees. 

depends on 
well_formed_reduction.iml for `contradiction_system_evaluation_false`
verification/tableau_reduction.iml for `tableau_reduction_soundness_contra`
*)

open Utils
open Constraint
open Proof_tree
open Check_splits
open Certificate
open Checker
open Arithmetic
open Farkas_lemma

let check_relu_constraints = Constraint.check_relu_constraints

let unsat tableau upper_bounds lower_bounds relu_constraints x =
    (is_in_kernel tableau x &&
    is_bounded x upper_bounds lower_bounds &&
    check_relu_constraints relu_constraints x) = false

let sat tableau upper_bounds lower_bounds relu_constraints x =
    (is_in_kernel tableau x &&
    is_bounded x upper_bounds lower_bounds &&
    check_relu_constraints relu_constraints x)

lemma check_node_implies_check_cert tableau upper_bounds lower_bounds relu_constraints proof_tree =
    let open ProofTree in
    match proof_tree with
    | Node _ -> true
    | (Leaf contradiction) ->
        let sys = mk_system_contradiction tableau upper_bounds lower_bounds in
        let certificate = mk_contradiction_certificate contradiction tableau upper_bounds lower_bounds in
        check_node tableau upper_bounds lower_bounds relu_constraints proof_tree
        ==> 
        check_cert sys certificate
    [@@simp]
    [@@disable Farkas_lemma.check_cert, Checker.check_node, Checker.mk_contradiction_certificate, Certificate.mk_system_contradiction]
    [@@fc]

lemma expand_well_formed_tableau_bounds tableau upper_bounds lower_bounds =
    well_formed_tableau_bounds tableau upper_bounds lower_bounds 
    ==>
    well_formed_tableau tableau &&
    upper_bounds <> [] && lower_bounds <> [] &&
    List.length upper_bounds = List.length (List.hd tableau) &&
    List.length upper_bounds = List.length lower_bounds
    [@@auto]
    [@@fc]

lemma check_cert_implies_not_eval_system tableau upper_bounds lower_bounds x proof_tree certificate sys =
    let open ProofTree in
    match proof_tree with
    | Node _ -> true
    | (Leaf contradiction) ->
        sys = mk_system_contradiction (mk_eq_constraints tableau) upper_bounds lower_bounds &&
        well_formed_tableau_bounds tableau upper_bounds lower_bounds &&
        List.length x = List.length (List.hd tableau) &&
        check_cert sys certificate
        ==>
        eval_system sys x = false
    [@@apply contradiction_system_evaluation_false tableau upper_bounds lower_bounds sys x certificate]
    [@@disable Checker.well_formed_tableau_bounds]
    [@@auto]
    [@@fc]

lemma destruct_mk_system tableau upper_bounds lower_bounds =
    mk_system_contradiction tableau upper_bounds lower_bounds = tableau @ (mk_geq_constraints upper_bounds lower_bounds)
    [@@auto]
    [@@rw][@@fc]

lemma eval_system_append l1 l2 x =
    well_formed (l1 @ l2) x &&
    eval_system l1 x &&
    eval_system l2 x
    ==>
    eval_system (l1 @ l2) x
    [@@auto]


lemma soundness_eval_sys_composition tableau upper_bounds lower_bounds x proof_tree =
    let open ProofTree in
    match proof_tree with
    | Node _ -> true
    | (Leaf contradiction) ->
        let sys = mk_system_contradiction (mk_eq_constraints tableau) upper_bounds lower_bounds in
        well_formed_tableau_bounds tableau upper_bounds lower_bounds &&
        List.length x = List.length (List.hd tableau) &&
        not (eval_system sys x)
        ==>
        not (eval_system (mk_eq_constraints tableau) x) || not (eval_system (mk_geq_constraints upper_bounds lower_bounds) x)
    [@@auto]
    [@@apply destruct_mk_system (mk_eq_constraints tableau) upper_bounds lower_bounds,
    eval_system_append (mk_eq_constraints tableau) (mk_geq_constraints upper_bounds lower_bounds) x]
    [@@disable Farkas_lemma.eval_system, Certificate.mk_system_contradiction, Checker.well_formed_tableau_bounds]
    [@@fc]

axiom mk_geq_constraints_reduction_soundness_contra upper_bounds lower_bounds x =
    List.length x = List.length upper_bounds &&
    List.length x = List.length lower_bounds && 
    not (eval_system (mk_geq_constraints upper_bounds lower_bounds) x)
    ==>
    not (is_bounded x upper_bounds lower_bounds)
[@@fc]

axiom mk_geq_constraints_reduction_soundness upper_bounds lower_bounds x =
    List.length x = List.length upper_bounds &&
    List.length x = List.length lower_bounds && 
    is_bounded x upper_bounds lower_bounds
    ==>
    eval_system (mk_geq_constraints upper_bounds lower_bounds) x
    [@@fc]

lemma eval_system_unsat tableau upper_bounds lower_bounds x =
    well_formed_tableau_bounds tableau upper_bounds lower_bounds &&
    List.length x = List.length (List.hd tableau) &&
    (not (eval_system (mk_eq_constraints tableau) x) || not (eval_system (mk_geq_constraints upper_bounds lower_bounds) x))
    ==>
    not (is_in_kernel tableau x) || not (is_bounded x upper_bounds lower_bounds)
    [@@auto]
    [@@apply tableau_reduction_soundness_contra tableau x,
        mk_geq_constraints_reduction_soundness_contra upper_bounds lower_bounds x,
        mk_geq_constraints_reduction_soundness upper_bounds lower_bounds x
    ]
    [@@disable Arithmetic.is_bounded,
        List.length, Checker.well_formed_tableau_bounds, Arithmetic.is_in_kernel, 
        Farkas_lemma.eval_system, Certificate.mk_eq_constraints, Certificate.mk_geq_constraints]
    [@@fc]

lemma eval_system_unsat_conjn tableau upper_bounds lower_bounds x =
    well_formed_tableau_bounds tableau upper_bounds lower_bounds &&
    List.length x = List.length (List.hd tableau) &&
    not ((eval_system (mk_eq_constraints tableau) x) && (eval_system (mk_geq_constraints upper_bounds lower_bounds) x))
    ==>
    not ((is_in_kernel tableau x) && (is_bounded x upper_bounds lower_bounds))
    [@@simp]
    [@@auto]
    [@@apply eval_system_unsat tableau upper_bounds lower_bounds x]
    [@@disable Checker.well_formed_tableau_bounds]
    [@@fc]

lemma eval_system_unsat_contra tableau upper_bounds lower_bounds x =
    well_formed_tableau_bounds tableau upper_bounds lower_bounds &&
    List.length x = List.length (List.hd tableau) &&
    (is_in_kernel tableau x) && (is_bounded x upper_bounds lower_bounds)
    ==>
    (eval_system (mk_eq_constraints tableau) x) && (eval_system (mk_geq_constraints upper_bounds lower_bounds) x)
    [@@simp]
    [@@auto]
    [@@apply eval_system_unsat_conjn tableau upper_bounds lower_bounds x]
    [@@fc]


lemma soundness_check_cert_composition tableau upper_bounds lower_bounds x proof_tree =
    let open ProofTree in
    match proof_tree with
    | Node _ -> true
    | (Leaf contradiction) ->
        let sys = mk_system_contradiction (mk_eq_constraints tableau) upper_bounds lower_bounds in
        well_formed_tableau_bounds tableau upper_bounds lower_bounds &&
        List.length x = List.length (List.hd tableau) &&
        not (eval_system sys x)
        ==>
        not (is_in_kernel tableau x) || not (is_bounded x upper_bounds lower_bounds)
    [@@auto]
    [@@apply
     soundness_eval_sys_composition tableau upper_bounds lower_bounds x proof_tree,
     eval_system_unsat_contra tableau upper_bounds lower_bounds x]
    [@@disable Certificate.mk_system_contradiction, Arithmetic.is_bounded,
        List.length, Checker.well_formed_tableau_bounds, Arithmetic.is_in_kernel, 
        Farkas_lemma.eval_system, Certificate.mk_eq_constraints, Certificate.mk_lower_bounds_constraints,
        List.append]
    [@@fc]

lemma not_eval_system_implies_unsat tableau upper_bounds lower_bounds relu_constraints x proof_tree =
    let open ProofTree in
    match proof_tree with
    | Node _ -> true
    | (Leaf contradiction) ->
        let sys = mk_system_contradiction (mk_eq_constraints tableau) upper_bounds lower_bounds in
        well_formed_tableau_bounds tableau upper_bounds lower_bounds &&
        List.length x = List.length (List.hd tableau) &&
        not (eval_system sys x)
        ==>
        unsat tableau upper_bounds lower_bounds relu_constraints x
    [@@simp]
    [@@apply soundness_check_cert_composition tableau upper_bounds lower_bounds x proof_tree]
    [@@disable Checker.well_formed_tableau_bounds, Certificate.mk_system_contradiction, Arithmetic.is_bounded]
    [@@auto]
    [@@fc]

lemma soundness_leaf tableau upper_bounds lower_bounds relu_constraints x proof_tree =
    let open ProofTree in
    match proof_tree with
    | Node _ -> true
    | (Leaf contradiction) ->
        well_formed_tableau_bounds tableau upper_bounds lower_bounds &&
        List.length x = List.length (List.hd tableau) &&
        check_node (mk_eq_constraints tableau) upper_bounds lower_bounds relu_constraints proof_tree
        ==> 
        unsat tableau upper_bounds lower_bounds relu_constraints x
    [@@auto]
    [@@disable Checker.well_formed_tableau_bounds, unsat, Farkas_lemma.check_cert, Certificate.mk_system_contradiction]
    [@@apply check_node_implies_check_cert (mk_eq_constraints tableau) upper_bounds lower_bounds relu_constraints proof_tree,
    not_eval_system_implies_unsat tableau upper_bounds lower_bounds relu_constraints x proof_tree]
    [@@fc]
